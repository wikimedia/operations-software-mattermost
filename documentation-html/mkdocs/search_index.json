{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Mattermost Documentation\n\n\nInstallation\n\n\nPreview Installation\n\n\nSee what Mattermost has to offer in a Docker-based preview install\n\n\nLocal Machine: \n- \nOne-line Docker Install\n\n- \nMac OS X install\n\n- \nUbuntu Install\n\n- \nArch Install\n\n\nService Based: \n- \nAWS Elastic Beanstalk Setup\n\n\nOptional:\n- \nSMTP Email Setup\n\n- \nSystem Console Settings\n\n\nProduction Installation\n\n\nSet up Mattermost in your data center using compiled binaries\n- \nSoftware and Hardware Requirements\n\n- \nProduction Ubuntu Setup\n\n- \nSMTP Email Setup\n\n- \nSystem Console Settings\n\n- \nTrouble Shooting Guide\n\n\nOptional\n- \nCommunity Guide for Production Debian Setup\n\n\nConfiguration and Management\n\n\n\n\nSystem Console Settings\n\n\nGitLab SSO Configuration\n \n\n\nMattermost Release Numbering and Schedule\n\n\n\n\nSystem Upgrades\n\n\nProcedures for upgrading the Mattermost server\n- \nMattermost Release Numbering and Schedule\n\n- \nUpgrade Guide\n\n\nDeveloper Documentation\n\n\n\n\nCode Contribution Guidelines\n\n\nDeveloper Machine Setup\n\n\nMattermost Style Guide\n\n\nAPI Overview\n\n\nIncoming Webhooks\n \n\n\nOutgoing Webhooks\n \n\n\nWeb Service API\n\n\n\n\nHelp\n\n\nNote: End user help documentation is a new feature being completed for the v1.2 release. The materials below are work in progress.\n\n\n\n\nUser Interface\n\n\nManage Members\n\n\nTeam Settings \n\n\n\n\nSlack Import\n\n\n\n\n\n\nMessaging\n\n\n\n\nMattermost Markdown Formatting", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#mattermost-documentation", 
            "text": "", 
            "title": "Mattermost Documentation"
        }, 
        {
            "location": "/index.html#installation", 
            "text": "Preview Installation  See what Mattermost has to offer in a Docker-based preview install  Local Machine: \n-  One-line Docker Install \n-  Mac OS X install \n-  Ubuntu Install \n-  Arch Install  Service Based: \n-  AWS Elastic Beanstalk Setup  Optional:\n-  SMTP Email Setup \n-  System Console Settings  Production Installation  Set up Mattermost in your data center using compiled binaries\n-  Software and Hardware Requirements \n-  Production Ubuntu Setup \n-  SMTP Email Setup \n-  System Console Settings \n-  Trouble Shooting Guide  Optional\n-  Community Guide for Production Debian Setup  Configuration and Management   System Console Settings  GitLab SSO Configuration    Mattermost Release Numbering and Schedule   System Upgrades  Procedures for upgrading the Mattermost server\n-  Mattermost Release Numbering and Schedule \n-  Upgrade Guide", 
            "title": "Installation"
        }, 
        {
            "location": "/index.html#developer-documentation", 
            "text": "Code Contribution Guidelines  Developer Machine Setup  Mattermost Style Guide  API Overview  Incoming Webhooks    Outgoing Webhooks    Web Service API", 
            "title": "Developer Documentation"
        }, 
        {
            "location": "/index.html#help", 
            "text": "Note: End user help documentation is a new feature being completed for the v1.2 release. The materials below are work in progress.   User Interface  Manage Members  Team Settings    Slack Import    Messaging   Mattermost Markdown Formatting", 
            "title": "Help"
        }, 
        {
            "location": "/help/Manage-Members/index.html", 
            "text": "Manage Members\n\n\nThe Manage Members menu is used to change the user roles assigned to members belonging to a team. \n\n\nUser Roles\n\n\nThe following user roles are assigned from the \nManage Members\n menu option in the team site main menu. \n\n\nSystem Admin\n\n\nThe System Administrator is typically a member of the IT staff and has the follow privileges: \n\n\n\n\nAccess to the System Console from the main menu in any team site. \n\n\nChange any setting on the Mattermost server available in the System Console.\n\n\nPromote and demote other users to and from the System Admin role.\n\n\nThis role also has all the privileges of the Team Administrator as described below\n\n\n\n\nThe first user added to a newly installed Mattermost system is assigned the System Admin role. \n\n\nTeam Admin\n\n\nThe Team Administrator is typically a non-technical end user and has the following privileges: \n\n\n\n\nAccess to the \"Team Settings\" menu from the team site main menu\n\n\nAbility to change the team name and import data from Slack export files\n\n\nAccess to the \"Manage Members\" menu and change user roles to the levels of Team Administrator, Member and Inactive\n\n\n\n\nMember\n\n\nThis is the default role given to end users who join the system. Members have basic permissions to use the Mattermost team site.\n\n\nInactive\n\n\nThis status is given to users whose accounts are marked inactive. These users can no longer log into the system. \n\n\nBecause Mattermost is designed as a system-of-record, there is not an option to delete users from the Mattermost system, as such an operation could compromise the integrity of message archives.", 
            "title": "Manage Members"
        }, 
        {
            "location": "/help/Manage-Members/index.html#manage-members", 
            "text": "The Manage Members menu is used to change the user roles assigned to members belonging to a team.", 
            "title": "Manage Members"
        }, 
        {
            "location": "/help/Manage-Members/index.html#user-roles", 
            "text": "The following user roles are assigned from the  Manage Members  menu option in the team site main menu.   System Admin  The System Administrator is typically a member of the IT staff and has the follow privileges:    Access to the System Console from the main menu in any team site.   Change any setting on the Mattermost server available in the System Console.  Promote and demote other users to and from the System Admin role.  This role also has all the privileges of the Team Administrator as described below   The first user added to a newly installed Mattermost system is assigned the System Admin role.   Team Admin  The Team Administrator is typically a non-technical end user and has the following privileges:    Access to the \"Team Settings\" menu from the team site main menu  Ability to change the team name and import data from Slack export files  Access to the \"Manage Members\" menu and change user roles to the levels of Team Administrator, Member and Inactive   Member  This is the default role given to end users who join the system. Members have basic permissions to use the Mattermost team site.  Inactive  This status is given to users whose accounts are marked inactive. These users can no longer log into the system.   Because Mattermost is designed as a system-of-record, there is not an option to delete users from the Mattermost system, as such an operation could compromise the integrity of message archives.", 
            "title": "User Roles"
        }, 
        {
            "location": "/help/README/index.html", 
            "text": "Help\n\n\nThe help section of the Mattermost documentation is intended for use by end users learning about the Mattermost concepts, usage, terminology and user interface.\n\n\nNote: Help documentation is a work-in-progress. Community contributions highly welcome. Please see \nguidelines for contributing\n.\n\n\nTeam Site Main Menu\n\n\nYou can access the \nTeam Site Main Menu\n by clicking on the three vertical dots at the top of the left sidebar in a team site. Here we describe the various options available from the menu: \n\n\n\n\nManage Members", 
            "title": "README"
        }, 
        {
            "location": "/help/README/index.html#help", 
            "text": "The help section of the Mattermost documentation is intended for use by end users learning about the Mattermost concepts, usage, terminology and user interface.  Note: Help documentation is a work-in-progress. Community contributions highly welcome. Please see  guidelines for contributing .", 
            "title": "Help"
        }, 
        {
            "location": "/help/README/index.html#team-site-main-menu", 
            "text": "You can access the  Team Site Main Menu  by clicking on the three vertical dots at the top of the left sidebar in a team site. Here we describe the various options available from the menu:    Manage Members", 
            "title": "Team Site Main Menu"
        }, 
        {
            "location": "/help/Search/index.html", 
            "text": "Search\n\n\nThe search box in Mattermost brings back results from any channel of which you\u2019re a member. No results are returned from channels where you are not a member - even if they are open channels.\n\n\nSome things to know about search:\n\n\n\n\nMultiple search terms are connected with \u201cOR\u201d by default. Typing in \nMattermost website\n returns results containing \u201cMattermost\u201d or \u201cwebsite\u201d\n\n\nUse \nfrom:\n to find posts from specific users and \nin:\n to find posts in specific channels. For example: Searching \nMattermost in:town-square\n only returns messages in Town Square that contain \nMattermost\n\n\nUse quotes to return search results for exact terms. For example: Searching \n\"Mattermost website\"\n returns messages containing the entire phrase \n\"Mattermost website\"\n and not messages containing only \nMattermost\n or \nwebsite\n\n\nUse the \n*\n character for wildcard searches that match within words. For example: Searching for \nrea*\n brings back messages containing \nreach\n, \nreason\n and other words starting with \nrea\n.\n\n\n\n\nLimitations:\n\n\n\n\nSearch in Mattermost uses the full text search features included in either a MySQL or Postgres database, which has some limitations\n\n\nSpecial cases that are not supported in default full text search, such as searching for IP addresses like \n10.100.200.101\n, can be added in future as the search feature evolves\n\n\nTwo letter searches and common words like \"this\", \"a\" and \"is\" won't appear in search results\n\n\nFor searching in Chinese try adding * to the end of queries", 
            "title": "Search"
        }, 
        {
            "location": "/help/Search/index.html#search", 
            "text": "The search box in Mattermost brings back results from any channel of which you\u2019re a member. No results are returned from channels where you are not a member - even if they are open channels.  Some things to know about search:   Multiple search terms are connected with \u201cOR\u201d by default. Typing in  Mattermost website  returns results containing \u201cMattermost\u201d or \u201cwebsite\u201d  Use  from:  to find posts from specific users and  in:  to find posts in specific channels. For example: Searching  Mattermost in:town-square  only returns messages in Town Square that contain  Mattermost  Use quotes to return search results for exact terms. For example: Searching  \"Mattermost website\"  returns messages containing the entire phrase  \"Mattermost website\"  and not messages containing only  Mattermost  or  website  Use the  *  character for wildcard searches that match within words. For example: Searching for  rea*  brings back messages containing  reach ,  reason  and other words starting with  rea .   Limitations:   Search in Mattermost uses the full text search features included in either a MySQL or Postgres database, which has some limitations  Special cases that are not supported in default full text search, such as searching for IP addresses like  10.100.200.101 , can be added in future as the search feature evolves  Two letter searches and common words like \"this\", \"a\" and \"is\" won't appear in search results  For searching in Chinese try adding * to the end of queries", 
            "title": "Search"
        }, 
        {
            "location": "/help/Slack-Import/index.html", 
            "text": "Slack Import\n\n\nNote: As a proprietary SaaS service, Slack is able to change its export format quickly and without notice. If you encounter issues not mentioned in the documentation below, please alert the product team by \nfiling an issue\n.\n\n\nUsage\n\n\nThe Slack Import feature in Mattermost is in \"Beta\" and focus is on supporting migration of teams of less than 100 registered users. To use: \n\n\n\n\n\n\nGenerate a Slack \"Export\" file from \nSlack \n Team Settings \n Import/Export Data \n Export \n Start Export\n  \n\n\n\n\n\n\nIn Mattermost go to \nTeam Settings \n Import \n Import from Slack\n. \nTeam Owner\n or \nTeam Administrator\n role is required to access this menu option.\n\n\n\n\n\n\nClick \nSelect file\n to upload Slack export file and click \nImport\n.   \n\n\n\n\n\n\nEmails and usernames from Slack are used to create new Mattermost accounts  \n\n\n\n\n\n\nSlack users can activate their new Mattermost accounts by using Mattermost's Password Reset screen with their email addresses from Slack to set new passwords for their Mattermost accounts  \n\n\n\n\n\n\nOnce logged in, the Mattermost users will have access to previous Slack messages in the public channels imported from Slack.\n\n\n\n\n\n\nIt is highly recommended that you test Slack import before applying it to an instance intended for production.\n If you use Docker, you can spin up a test instance in one line (\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform\n). If you don't use Docker, there are \nstep-by-step instructions\n to install Mattermost in preview mode in less than 5 minutes.\n\n\nNotes:\n\n\n\n\nNewly added markdown suppport in Slack's Posts 2.0 feature announced on September 28, 2015 is not yet supported. \n\n\nSlack does not export files or images your team has stored in Slack's database. Mattermost will provide links to the location of your assets in Slack's web UI.\n\n\nSlack does not export any content from private groups or direct messages that your team has stored in Slack's database. \n\n\nIn Beta, Slack accounts with username or email address collisions with existing Mattermost accounts will not import and mentions do not resolve as Mattermost usernames (still shows Slack ID). No pre-check or roll-back is currently offered.", 
            "title": "Slack Import"
        }, 
        {
            "location": "/help/Team-Statistics/index.html", 
            "text": "Team Statistics\n\n\n\n\nStatistics on users, posts and channels are tracked for each team and viewable in the System Console. System Administrators can access statistics for your Mattermost teams by clicking the \nthree-dot menu\n, then click \nSystem Console\n. Under the \nTeams\n section on the left side you\u2019ll see a list of the teams that belong to your domain. Click \nStatistics\n under the team of interest to open the stats page. Here is some helpful terminology:  \n\n\nTotal Users\n\nThe total number of accounts created, regardless of if the accounts are active or inactive. \n\n\nTotal Posts\n\nThe total number of posts made by your team, including deleted posts or those made by incoming and outgoing webhook integrations.\n\n\nPublic Groups\n\nThe number of public channels created by your team, including channels that may have been archived.\n\n\nPrivate Group\n\nThe number of private groups created by your team, including groups that may have been archived.\n\n\nActive Users With Posts\n\nUsers who logged in and made a post on a certain day.\n\n\nRecently Active Users\n\nUsers that have logged in and had recent browser activity in Mattermost.\n\n\nNewly Created Users\n\nUsers that have recently completed the signup process to create a Mattermost account on the team.", 
            "title": "Team Statistics"
        }, 
        {
            "location": "/help/Team-Statistics/index.html#team-statistics", 
            "text": "Statistics on users, posts and channels are tracked for each team and viewable in the System Console. System Administrators can access statistics for your Mattermost teams by clicking the  three-dot menu , then click  System Console . Under the  Teams  section on the left side you\u2019ll see a list of the teams that belong to your domain. Click  Statistics  under the team of interest to open the stats page. Here is some helpful terminology:    Total Users \nThe total number of accounts created, regardless of if the accounts are active or inactive.   Total Posts \nThe total number of posts made by your team, including deleted posts or those made by incoming and outgoing webhook integrations.  Public Groups \nThe number of public channels created by your team, including channels that may have been archived.  Private Group \nThe number of private groups created by your team, including groups that may have been archived.  Active Users With Posts \nUsers who logged in and made a post on a certain day.  Recently Active Users \nUsers that have logged in and had recent browser activity in Mattermost.  Newly Created Users \nUsers that have recently completed the signup process to create a Mattermost account on the team.", 
            "title": "Team Statistics"
        }, 
        {
            "location": "/developer/API-Web-Service/index.html", 
            "text": "Mattermost Web Service API\n\n\nThis provides a basic overview of the Mattermost Web Service API. Drivers interfacing with this API are available in different languages. Current documentation focuses on the transport layer for the API and functional documentation will be developed next.  \n\n\nAll examples assume there is a Mattermost instance running at http://localhost:8065.\n\n\nSchema\n\n\nAll API access is done through \nyourdomain.com/api/v1/\n, with all data being sent and received as JSON.\n\n\nAuthentication\n\n\nThe majority of the Mattermost API involves interacting with teams. Therefore, most API methods require authentication as a user. There are two ways to authenticate into a Mattermost system.\n\n\nSession Token\n\n\nMake an HTTP POST to \nyourdomain.com/api/v1/users/login\n with a JSON body indicating the \nname\n of the team, the user's \nemail\n and \npassword\n.\n\n\ncurl -i -d '{\nname\n:\nexampleteam\n,\nemail\n:\nsomeone@nowhere.com\n,\npassword\n:\nthisisabadpassword\n}' http://localhost:8065/api/v1/users/login\n\n\n\n\nIf successful, the response will contain a \nToken\n header and a User object in the body.\n\n\nHTTP/1.1 200 OK\nSet-Cookie: MMSID=hyr5dmb1mbb49c44qmx4whniso; Path=/; Max-Age=2592000; HttpOnly\nToken: hyr5dmb1mbb49c44qmx4whniso\nX-Ratelimit-Limit: 10\nX-Ratelimit-Remaining: 9\nX-Ratelimit-Reset: 1\nX-Request-Id: smda55ckcfy89b6tia58shk5fh\nX-Version-Id: developer\nDate: Fri, 11 Sep 2015 13:21:14 GMT\nContent-Length: 657\nContent-Type: application/json; charset=utf-8\n\n{{user object as json}}\n\n\n\n\nInclude the \nToken\n as part of the \nAuthentication\n header on your future API requests with the \nBearer\n method.\n\n\ncurl -i -H 'Authorization: Bearer hyr5dmb1mbb49c44qmx4whniso' http://localhost:8065/api/v1/users/me\n\n\n\n\nThat's it! You should now be able to access the API as the user you logged in as.\n\n\nOAuth2\n\n\nComing soon...\n\n\nClient Errors\n\n\nAll errors will return an appropriate HTTP response code along with the following JSON body:\n\n\n{\n    \nmessage\n: \n, // the reason for the error\n    \ndetailed_error\n: \n, // some extra details about the error\n    \nrequest_id\n: \n, // the ID of the request\n    \nstatus_code\n: 0 // the HTTP status code\n}\n\n\n\n\nRate Limiting\n\n\nWhenever you make an HTTP request to the Mattermost API you might notice the following headers included in the response:\n\n\nX-Ratelimit-Limit: 10\nX-Ratelimit-Remaining: 9\nX-Ratelimit-Reset: 1441983590\n\n\n\n\n\nThese headers are telling you your current rate limit status.\n\n\n\n\n\n\n\n\nHeader\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nX-Ratelimit-Limit\n\n\nThe maximum number of requests you can make per second.\n\n\n\n\n\n\nX-Ratelimit-Remaining\n\n\nThe number of requests remaining in the current window.\n\n\n\n\n\n\nX-Ratelimit-Reset\n\n\nThe remaining UTC epoch seconds before the rate limit resets.\n\n\n\n\n\n\n\n\nIf you exceed your rate limit for a window you will receive the following error in the body of the response:\n\n\nHTTP/1.1 429 Too Many Requests\nDate: Tue, 10 Sep 2015 11:20:28 GMT\nX-RateLimit-Limit: 10\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1\n\nlimit exceeded", 
            "title": "API Web Service"
        }, 
        {
            "location": "/developer/API-Web-Service/index.html#mattermost-web-service-api", 
            "text": "This provides a basic overview of the Mattermost Web Service API. Drivers interfacing with this API are available in different languages. Current documentation focuses on the transport layer for the API and functional documentation will be developed next.    All examples assume there is a Mattermost instance running at http://localhost:8065.", 
            "title": "Mattermost Web Service API"
        }, 
        {
            "location": "/developer/API-Web-Service/index.html#schema", 
            "text": "All API access is done through  yourdomain.com/api/v1/ , with all data being sent and received as JSON.", 
            "title": "Schema"
        }, 
        {
            "location": "/developer/API-Web-Service/index.html#authentication", 
            "text": "The majority of the Mattermost API involves interacting with teams. Therefore, most API methods require authentication as a user. There are two ways to authenticate into a Mattermost system.  Session Token  Make an HTTP POST to  yourdomain.com/api/v1/users/login  with a JSON body indicating the  name  of the team, the user's  email  and  password .  curl -i -d '{ name : exampleteam , email : someone@nowhere.com , password : thisisabadpassword }' http://localhost:8065/api/v1/users/login  If successful, the response will contain a  Token  header and a User object in the body.  HTTP/1.1 200 OK\nSet-Cookie: MMSID=hyr5dmb1mbb49c44qmx4whniso; Path=/; Max-Age=2592000; HttpOnly\nToken: hyr5dmb1mbb49c44qmx4whniso\nX-Ratelimit-Limit: 10\nX-Ratelimit-Remaining: 9\nX-Ratelimit-Reset: 1\nX-Request-Id: smda55ckcfy89b6tia58shk5fh\nX-Version-Id: developer\nDate: Fri, 11 Sep 2015 13:21:14 GMT\nContent-Length: 657\nContent-Type: application/json; charset=utf-8\n\n{{user object as json}}  Include the  Token  as part of the  Authentication  header on your future API requests with the  Bearer  method.  curl -i -H 'Authorization: Bearer hyr5dmb1mbb49c44qmx4whniso' http://localhost:8065/api/v1/users/me  That's it! You should now be able to access the API as the user you logged in as.  OAuth2  Coming soon...", 
            "title": "Authentication"
        }, 
        {
            "location": "/developer/API-Web-Service/index.html#client-errors", 
            "text": "All errors will return an appropriate HTTP response code along with the following JSON body:  {\n     message :  , // the reason for the error\n     detailed_error :  , // some extra details about the error\n     request_id :  , // the ID of the request\n     status_code : 0 // the HTTP status code\n}", 
            "title": "Client Errors"
        }, 
        {
            "location": "/developer/API-Web-Service/index.html#rate-limiting", 
            "text": "Whenever you make an HTTP request to the Mattermost API you might notice the following headers included in the response:  X-Ratelimit-Limit: 10\nX-Ratelimit-Remaining: 9\nX-Ratelimit-Reset: 1441983590  These headers are telling you your current rate limit status.     Header  Description      X-Ratelimit-Limit  The maximum number of requests you can make per second.    X-Ratelimit-Remaining  The number of requests remaining in the current window.    X-Ratelimit-Reset  The remaining UTC epoch seconds before the rate limit resets.     If you exceed your rate limit for a window you will receive the following error in the body of the response:  HTTP/1.1 429 Too Many Requests\nDate: Tue, 10 Sep 2015 11:20:28 GMT\nX-RateLimit-Limit: 10\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1\n\nlimit exceeded", 
            "title": "Rate Limiting"
        }, 
        {
            "location": "/developer/API/index.html", 
            "text": "Mattermost APIs\n\n\nMattermost APIs let you integrate your favorite tools and services withing your Mattermost experience. \n\n\nSlack-compatible Webhooks\n\n\nTo offer an alternative to propreitary SaaS services, Mattermost focuses on being \"Slack-compatible, but not Slack limited\". That means providing support for developers of Slack applications to easily extend their apps to Mattermost, as well as support and capabilities beyond what Slack offers. \n\n\nIncoming Webhooks\n\n\nIncoming webhooks allow external applications to post messages into Mattermost channels and private groups by sending a JSON payload via HTTP POST request to a secret Mattermost URL generated specifically for each application.\n\n\nIn addition to supporting Slack's incoming webhook formatting, Mattermost webhooks offer full support of industry-standard markdown formatting, including headings, tables and in-line images. \n\n\nOutgoing Webhooks (in Mattermost v1.2)\n\n\nOutgoing webhooks allow external applications to receive webhook events from events happening within Mattermost channels and private groups via JSON payloads via HTTP POST requests sent to incoming webhook URLs defined by your applications. \n\n\nOver time, Mattermost outgoing webhooks will support not only Slack applications using a compatible format, but also offer optional events and triggers beyond Slack's feature set. \n\n\nMattermost Web Service API\n\n\nMattermost offers a Web Service API accessible by Mattermost Drivers, listed below. Initial documentation on the \ntransport layer for the web service is available\n and functional documentation is under development. \n\n\nMattermost Drivers\n\n\nMattermost drivers offer access to the Mattermost web service API in different languages and frameworks.\n\n\nReactJS Javascript Driver\n\n\nclient.jsx\n - This Javascript driver connects with the ReactJS components of Mattermost. The web client does the vast majority of its work by connecting to a RESTful JSON web service. There is a very small amount of processing for error checking and set up that happens on the web server.\n\n\nGolang Driver\n\n\nclient.go\n - This is a RESTful driver connecting with the Golang-based webservice of Mattermost and is used by unit tests.", 
            "title": "API"
        }, 
        {
            "location": "/developer/API/index.html#mattermost-apis", 
            "text": "Mattermost APIs let you integrate your favorite tools and services withing your Mattermost experience.", 
            "title": "Mattermost APIs"
        }, 
        {
            "location": "/developer/API/index.html#slack-compatible-webhooks", 
            "text": "To offer an alternative to propreitary SaaS services, Mattermost focuses on being \"Slack-compatible, but not Slack limited\". That means providing support for developers of Slack applications to easily extend their apps to Mattermost, as well as support and capabilities beyond what Slack offers.   Incoming Webhooks  Incoming webhooks allow external applications to post messages into Mattermost channels and private groups by sending a JSON payload via HTTP POST request to a secret Mattermost URL generated specifically for each application.  In addition to supporting Slack's incoming webhook formatting, Mattermost webhooks offer full support of industry-standard markdown formatting, including headings, tables and in-line images.   Outgoing Webhooks (in Mattermost v1.2)  Outgoing webhooks allow external applications to receive webhook events from events happening within Mattermost channels and private groups via JSON payloads via HTTP POST requests sent to incoming webhook URLs defined by your applications.   Over time, Mattermost outgoing webhooks will support not only Slack applications using a compatible format, but also offer optional events and triggers beyond Slack's feature set.", 
            "title": "Slack-compatible Webhooks"
        }, 
        {
            "location": "/developer/API/index.html#mattermost-web-service-api", 
            "text": "Mattermost offers a Web Service API accessible by Mattermost Drivers, listed below. Initial documentation on the  transport layer for the web service is available  and functional documentation is under development.", 
            "title": "Mattermost Web Service API"
        }, 
        {
            "location": "/developer/API/index.html#mattermost-drivers", 
            "text": "Mattermost drivers offer access to the Mattermost web service API in different languages and frameworks.  ReactJS Javascript Driver  client.jsx  - This Javascript driver connects with the ReactJS components of Mattermost. The web client does the vast majority of its work by connecting to a RESTful JSON web service. There is a very small amount of processing for error checking and set up that happens on the web server.  Golang Driver  client.go  - This is a RESTful driver connecting with the Golang-based webservice of Mattermost and is used by unit tests.", 
            "title": "Mattermost Drivers"
        }, 
        {
            "location": "/developer/Code-Contribution-Guidelines/index.html", 
            "text": "Code Contribution Guidelines\n\n\nPlease see \nCONTRIBUTING.md", 
            "title": "Code Contribution Guidelines"
        }, 
        {
            "location": "/developer/Code-Contribution-Guidelines/index.html#code-contribution-guidelines", 
            "text": "Please see  CONTRIBUTING.md", 
            "title": "Code Contribution Guidelines"
        }, 
        {
            "location": "/developer/Setup/index.html", 
            "text": "Developer Machine Setup\n\n\nMac OS X\n\n\n\n\nDownload and set up Docker Toolbox\n\n\nFollow the instructions at http://docs.docker.com/installation/mac/\n\n\nStart a new docker host\n\n\ndocker-machine create -d virtualbox dev\n\n\nGet the IP address of your docker host\n\n\ndocker-machine ip dev\n\n\nAdd a line to your /etc/hosts that goes \nDocker IP\n dockerhost\n\n\nRun \ndocker-machine env dev\n and copy the export statements to your ~/.bash_profile\n\n\n\n\n\n\nDownload Go (version 1.4.2 or 1.5.1. Final release bits are built with 1.4.2) from http://golang.org/dl/\n\n\nSet up your Go workspace\n\n\nmkdir ~/go\n\n\nAdd the following to your ~/.bash_profile\n\n\nexport GOPATH=$HOME/go\n\n\nexport PATH=$PATH:$GOPATH/bin\n\n\nulimit -n 8096\n\n    If you don't increase the file handle limit you may see some weird build issues with browserify or npm.  \n\n\nReload your bash profile\n\n\nsource ~/.bash_profile\n\n\n\n\n\n\nInstall Node.js using Homebrew\n\n\nDownload Homebrew from http://brew.sh/\n\n\nbrew install node\n\n\n\n\n\n\nInstall Compass\n\n\nRun \nruby -v\n and check the ruby version is 1.8.7 or higher\n\n\nsudo gem install compass\n\n\n\n\n\n\nDownload Mattermost\n\n\ncd ~/go\n\n\nmkdir -p src/github.com/mattermost\n\n\ncd src/github.com/mattermost\n\n\ngit clone https://github.com/mattermost/platform.git\n\n\ncd platform\n\n\nRun unit tests on Mattermost using \nmake test\n to make sure the installation was successful\n\n\nIf tests passed, you can now run Mattermost using \nmake run\n\n\n\n\nAny issues? Please let us know on our forums at: http://forum.mattermost.org\n\n\nUbuntu\n\n\n\n\nDownload Docker\n\n\nFollow the instructions at https://docs.docker.com/installation/ubuntulinux/ or use the summary below:\n\n\nsudo apt-get update\n\n\nsudo apt-get install wget\n\n\nwget -qO- https://get.docker.com/ | sh\n\n\nsudo usermod -aG docker \nusername\n\n\nsudo service docker start\n\n\nnewgrp docker\n\n\n\n\n\n\nSet up your dockerhost address\n\n\nEdit your /etc/hosts file to include the following line\n\n\n127.0.0.1 dockerhost\n\n\n\n\n\n\nInstall build essentials\n\n\napt-get install build-essential\n\n\n\n\n\n\nDownload Go (version 1.4.2 or 1.5.1. Final release bits are built with 1.4.2) from http://golang.org/dl/\n\n\nSet up your Go workspace and add Go to the PATH\n\n\nmkdir ~/go\n\n\nAdd the following to your ~/.bashrc\n\n\nexport GOPATH=$HOME/go\n\n\nexport GOROOT=/usr/local/go\n\n\nexport PATH=$PATH:$GOROOT/bin\n\n\nulimit -n 8096\n\n    If you don't increase the file handle limit you may see some weird build issues with browserify or npm.  \n\n\nReload your bashrc\n\n\nsource ~/.bashrc\n\n\n\n\n\n\nInstall Node.js\n\n\nDownload the newest version of the Node.js sources from https://nodejs.org/en/download/\n\n\nExtract the contents of the package and cd into the extracted files\n\n\nCompile and install Node.js\n\n\n./configure\n\n\nmake\n\n\nmake install\n\n\n\n\n\n\nInstall Ruby and Compass\n\n\napt-get install ruby\n\n\napt-get install ruby-dev\n\n\ngem install compass\n\n\nDownload Mattermost\n\n\ncd ~/go\n\n\nmkdir -p src/github.com/mattermost\n\n\ncd src/github.com/mattermost\n\n\ngit clone https://github.com/mattermost/platform.git\n\n\ncd platform\n\n\nRun unit tests on Mattermost using \nmake test\n to make sure the installation was successful\n\n\nIf tests passed, you can now run Mattermost using \nmake run\n\n\n\n\nAny issues? Please let us know on our forums at: http://forum.mattermost.org", 
            "title": "Setup"
        }, 
        {
            "location": "/developer/Setup/index.html#developer-machine-setup", 
            "text": "Mac OS X   Download and set up Docker Toolbox  Follow the instructions at http://docs.docker.com/installation/mac/  Start a new docker host  docker-machine create -d virtualbox dev  Get the IP address of your docker host  docker-machine ip dev  Add a line to your /etc/hosts that goes  Docker IP  dockerhost  Run  docker-machine env dev  and copy the export statements to your ~/.bash_profile    Download Go (version 1.4.2 or 1.5.1. Final release bits are built with 1.4.2) from http://golang.org/dl/  Set up your Go workspace  mkdir ~/go  Add the following to your ~/.bash_profile  export GOPATH=$HOME/go  export PATH=$PATH:$GOPATH/bin  ulimit -n 8096 \n    If you don't increase the file handle limit you may see some weird build issues with browserify or npm.    Reload your bash profile  source ~/.bash_profile    Install Node.js using Homebrew  Download Homebrew from http://brew.sh/  brew install node    Install Compass  Run  ruby -v  and check the ruby version is 1.8.7 or higher  sudo gem install compass    Download Mattermost  cd ~/go  mkdir -p src/github.com/mattermost  cd src/github.com/mattermost  git clone https://github.com/mattermost/platform.git  cd platform  Run unit tests on Mattermost using  make test  to make sure the installation was successful  If tests passed, you can now run Mattermost using  make run   Any issues? Please let us know on our forums at: http://forum.mattermost.org  Ubuntu   Download Docker  Follow the instructions at https://docs.docker.com/installation/ubuntulinux/ or use the summary below:  sudo apt-get update  sudo apt-get install wget  wget -qO- https://get.docker.com/ | sh  sudo usermod -aG docker  username  sudo service docker start  newgrp docker    Set up your dockerhost address  Edit your /etc/hosts file to include the following line  127.0.0.1 dockerhost    Install build essentials  apt-get install build-essential    Download Go (version 1.4.2 or 1.5.1. Final release bits are built with 1.4.2) from http://golang.org/dl/  Set up your Go workspace and add Go to the PATH  mkdir ~/go  Add the following to your ~/.bashrc  export GOPATH=$HOME/go  export GOROOT=/usr/local/go  export PATH=$PATH:$GOROOT/bin  ulimit -n 8096 \n    If you don't increase the file handle limit you may see some weird build issues with browserify or npm.    Reload your bashrc  source ~/.bashrc    Install Node.js  Download the newest version of the Node.js sources from https://nodejs.org/en/download/  Extract the contents of the package and cd into the extracted files  Compile and install Node.js  ./configure  make  make install    Install Ruby and Compass  apt-get install ruby  apt-get install ruby-dev  gem install compass  Download Mattermost  cd ~/go  mkdir -p src/github.com/mattermost  cd src/github.com/mattermost  git clone https://github.com/mattermost/platform.git  cd platform  Run unit tests on Mattermost using  make test  to make sure the installation was successful  If tests passed, you can now run Mattermost using  make run   Any issues? Please let us know on our forums at: http://forum.mattermost.org", 
            "title": "Developer Machine Setup"
        }, 
        {
            "location": "/developer/Style-Guide/index.html", 
            "text": "Mattermost Style Guide\n\n\n\n\nGo\n\n\nJavascript\n\n\nReact-JSX\n\n\n\n\nGo\n\n\nAll go code must follow the golang official \nStyle Guide\n\n\nIn addition all code must be run though the official go formatter tool \ngofmt\n\n\nJavascript\n\n\nPart of the build process is running ESLint. ESLint is the final authority on all style issues. PRs will not be accepted unless there are no errors running ESLint. The ESLint configuration file can be found in: \nweb/react/.eslintrc\n\n\nInstructions on how to use ESLint with your favourite editor can be found here: \nhttp://eslint.org/docs/user-guide/integrations\n\n\nYou can run eslint using the makefile by using \nmake check\n\n\nThe following is a subset of what ESLint checks for. ESLint is always the authority. \n\n\nWhitespace\n\n\n\n\nIndentation is four spaces.\n\n\nUse a space before the leading brace.\n\n\nUse one space between the comma and the next argument in a bracketed list. No other space.\n\n\nUse whitespace to make code more readable.\n\n\nDo not use more than one newline to separate code blocks. \n\n\nDo not use a newline as the first line of a function\n\n\n\n\n// Correct\nfunction myFunction(parm1, parm2) {\n    stuff...;\n\n    morestuff;\n}\n\n// Incorrect\nfunction myFunction ( parm1, parm2 ){\n  stuff...;\n\n\n  morestuff;\n}\n\n\n\n\n\nSemicolons\n\n\n\n\nYou must use them always.\n\n\n\n\n// Correct\nlet x = 1;\n\n// Incorrect\nlet x = 1\n\n\n\n\nVariables\n\n\n\n\nDeclarations must always use var, let or const.\n\n\nPrefer let or const over var.\n\n\ncamelCase for all variable names.\n\n\n\n\n// Correct\nlet myVariable = 4;\n\n// OK\nvar myVariable = 4;\n\n// Incorrect\nmyVariable = 4;\nvar my_variable = 4;\n\n\n\n\nBlocks\n\n\n\n\nBraces must be used on all blocks.\n\n\nBraces must start on the same line as the statement starting the block.\n\n\nElse and else if must be on the same line as the if block closing brace.\n\n\n\n\n// Correct\nif (something) {\n    stuff...;\n} else if (otherthing) {\n    stuff...;\n}\n\n// Incorrect\nif (something)\n{\n    stuff...;\n}\nelse\n{\n    stuff...;\n}\n\n// Incorrect\nif (something) stuff...;\nif (something)\n    stuff...;\n\n\n\n\n\nStrings\n\n\n\n\nUse of template strings is preferred instead of concatenation.\n\n\n\n\n// Correct\nfunction getStr(stuff) {\n    return \nThis is the ${stuff} string\n;\n}\n\n// Incorrect\nfunction wrongGetStr(stuff) {\n    return \nThis is the \n + stuff + \n string\n;\n}\n\n\n\n\nReact-JSX\n\n\nPart of the build process is running ESLint. ESLint is the final authority on all style issues. PRs will not be accepted unless there are no errors running ESLint. The ESLint configuration file can be found in: \nweb/react/.eslintrc\n\n\nInstructions on how to use ESLint with your favourite editor can be found here: \nhttp://eslint.org/docs/user-guide/integrations\n\n\nYou can run eslint using the makefile by using \nmake check\n\n\nThe following is a subset of what ESLint checks for. ESLint is always the authority. \n\n\nGeneral\n\n\n\n\nInclude only one React component per file.\n\n\nUse class \\\nname> extends React.Component over React.createClass unless you need mixins\n\n\nFilenames should be the component name.\n\n\n\n\nAlignment\n\n\n\n\nFollow alignment styles shown below:\n\n\n\n\n// Correct\n\nTag\n    propertyOne=\n1\n\n    propertyTwo=\n2\n\n\n\n  \nChild /\n\n\n/Tag\n\n\n// Correct\n\nTag propertyOne=\n1\n /\n\n\n\n\n\nNaming\n\n\n\n\nProperty names use camelCase.\n\n\nReact component names use CapitalCamelCase.\n\n\nDo not use an underscore for internal methods in a react component. \n\n\n\n\n// Correct\n\nReactComponent propertyOne=\nvalue\n /", 
            "title": "Style Guide"
        }, 
        {
            "location": "/developer/Style-Guide/index.html#mattermost-style-guide", 
            "text": "Go  Javascript  React-JSX", 
            "title": "Mattermost Style Guide"
        }, 
        {
            "location": "/developer/Style-Guide/index.html#go", 
            "text": "All go code must follow the golang official  Style Guide  In addition all code must be run though the official go formatter tool  gofmt", 
            "title": "Go"
        }, 
        {
            "location": "/developer/Style-Guide/index.html#javascript", 
            "text": "Part of the build process is running ESLint. ESLint is the final authority on all style issues. PRs will not be accepted unless there are no errors running ESLint. The ESLint configuration file can be found in:  web/react/.eslintrc  Instructions on how to use ESLint with your favourite editor can be found here:  http://eslint.org/docs/user-guide/integrations  You can run eslint using the makefile by using  make check  The following is a subset of what ESLint checks for. ESLint is always the authority.   Whitespace   Indentation is four spaces.  Use a space before the leading brace.  Use one space between the comma and the next argument in a bracketed list. No other space.  Use whitespace to make code more readable.  Do not use more than one newline to separate code blocks.   Do not use a newline as the first line of a function   // Correct\nfunction myFunction(parm1, parm2) {\n    stuff...;\n\n    morestuff;\n}\n\n// Incorrect\nfunction myFunction ( parm1, parm2 ){\n  stuff...;\n\n\n  morestuff;\n}  Semicolons   You must use them always.   // Correct\nlet x = 1;\n\n// Incorrect\nlet x = 1  Variables   Declarations must always use var, let or const.  Prefer let or const over var.  camelCase for all variable names.   // Correct\nlet myVariable = 4;\n\n// OK\nvar myVariable = 4;\n\n// Incorrect\nmyVariable = 4;\nvar my_variable = 4;  Blocks   Braces must be used on all blocks.  Braces must start on the same line as the statement starting the block.  Else and else if must be on the same line as the if block closing brace.   // Correct\nif (something) {\n    stuff...;\n} else if (otherthing) {\n    stuff...;\n}\n\n// Incorrect\nif (something)\n{\n    stuff...;\n}\nelse\n{\n    stuff...;\n}\n\n// Incorrect\nif (something) stuff...;\nif (something)\n    stuff...;  Strings   Use of template strings is preferred instead of concatenation.   // Correct\nfunction getStr(stuff) {\n    return  This is the ${stuff} string ;\n}\n\n// Incorrect\nfunction wrongGetStr(stuff) {\n    return  This is the   + stuff +   string ;\n}", 
            "title": "Javascript"
        }, 
        {
            "location": "/developer/Style-Guide/index.html#react-jsx", 
            "text": "Part of the build process is running ESLint. ESLint is the final authority on all style issues. PRs will not be accepted unless there are no errors running ESLint. The ESLint configuration file can be found in:  web/react/.eslintrc  Instructions on how to use ESLint with your favourite editor can be found here:  http://eslint.org/docs/user-guide/integrations  You can run eslint using the makefile by using  make check  The following is a subset of what ESLint checks for. ESLint is always the authority.   General   Include only one React component per file.  Use class \\ name> extends React.Component over React.createClass unless you need mixins  Filenames should be the component name.   Alignment   Follow alignment styles shown below:   // Correct Tag\n    propertyOne= 1 \n    propertyTwo= 2  \n   Child /  /Tag \n\n// Correct Tag propertyOne= 1  /   Naming   Property names use camelCase.  React component names use CapitalCamelCase.  Do not use an underscore for internal methods in a react component.    // Correct ReactComponent propertyOne= value  /", 
            "title": "React-JSX"
        }, 
        {
            "location": "/developer/tests/test-emoticons/index.html", 
            "text": "Emoticon Testing\n\n\nThe below text can be used to check for regressions in changes to text processing. Paste the below text into messages and check that emoticons continue to render after text processing changes. \n\n\n# Emoticon - Punctuation \n\n:) :-) \n;) ;-)\n:o :O\n:-o :-O\n:] :-]\n:d :-D\nx-d x-D\n:p :-P\n:@\n:( :-( \n:'(\n:* :-*\n:/ :-/\n:s :-s\n:| :-|\n:$ :-$\n:-x\n\n3\n:+1:\n:-1:\n\n\n\n\n# Emoticons - People\n\n:bowtie:\n:smile:\n:laughing:\n:blush:\n:smiley:\n:relaxed:\n:smirk:\n:heart_eyes:\n:kissing_heart:\n:kissing_closed_eyes:\n:flushed:\n:relieved:\n:satisfied:\n:grin:\n:wink:\n:stuck_out_tongue_winking_eye:\n:stuck_out_tongue_closed_eyes:\n:grinning:\n:kissing:\n:kissing_smiling_eyes:\n:stuck_out_tongue:\n:sleeping:\n:worried:\n:frowning:\n:anguished:\n:open_mouth:\n:grimacing:\n:confused:\n:hushed:\n:expressionless:\n:unamused:\n:sweat_smile:\n:sweat:\n:disappointed_relieved:\n:weary:\n:pensive:\n:disappointed:\n:confounded:\n:fearful:\n:cold_sweat:\n:persevere:\n:cry:\n:sob:\n:joy:\n:astonished:\n:scream:\n:neckbeard:\n:tired_face:\n:angry:\n:rage:\n:triumph:\n:sleepy:\n:yum:\n:mask:\n:sunglasses:\n:dizzy_face:\n:imp:\n:smiling_imp:\n:neutral_face:\n:no_mouth:\n:innocent:\n:alien:\n:yellow_heart:\n:blue_heart:\n:purple_heart:\n:heart:\n:green_heart:\n:broken_heart:\n:heartbeat:\n:heartpulse:\n:two_hearts:\n:revolving_hearts:\n:cupid:\n:sparkling_heart:\n:sparkles:\n:star:\n:star2:\n:dizzy:\n:boom:\n:collision:\n:anger:\n:exclamation:\n:question:\n:grey_exclamation:\n:grey_question:\n:zzz:\n:dash:\n:sweat_drops:\n:notes:\n:musical_note:\n:fire:\n:hankey:\n:poop:\n:shit:\n:+1:\n:thumbsup:\n:-1:\n:thumbsdown:\n:ok_hand:\n:punch:\n:facepunch:\n:fist:\n:v:\n:wave:\n:hand:\n:raised_hand:\n:open_hands:\n:point_up:\n:point_down:\n:point_left:\n:point_right:\n:raised_hands:\n:pray:\n:point_up_2:\n:clap:\n:muscle:\n:metal:\n:fu:\n:runner:\n:running:\n:couple:\n:family:\n:two_men_holding_hands:\n:two_women_holding_hands:\n:dancer:\n:dancers:\n:ok_woman:\n:no_good:\n:information_desk_person:\n:raising_hand:\n:bride_with_veil:\n:person_with_pouting_face:\n:person_frowning:\n:bow:\n:couplekiss:\n:couple_with_heart:\n:massage:\n:haircut:\n:nail_care:\n:boy:\n:girl:\n:woman:\n:man:\n:baby:\n:older_woman:\n:older_man:\n:person_with_blond_hair:\n:man_with_gua_pi_mao:\n:man_with_turban:\n:construction_worker:\n:cop:\n:angel:\n:princess:\n:smiley_cat:\n:smile_cat:\n:heart_eyes_cat:\n:kissing_cat:\n:smirk_cat:\n:scream_cat:\n:crying_cat_face:\n:joy_cat:\n:pouting_cat:\n:japanese_ogre:\n:japanese_goblin:\n:see_no_evil:\n:hear_no_evil:\n:speak_no_evil:\n:guardsman:\n:skull:\n:feet:\n:lips:\n:kiss:\n:droplet:\n:ear:\n:eyes:\n:nose:\n:tongue:\n:love_letter:\n:bust_in_silhouette:\n:busts_in_silhouette:\n:speech_balloon:\n:thought_balloon:\n:feelsgood:\n:finnadie:\n:goberserk:\n:godmode:\n:hurtrealbad:\n:rage1:\n:rage2:\n:rage3:\n:rage4:\n:suspect:\n:trollface:\n\n\n\n\n# Emoticons - Nature\n\n:sunny:\n:umbrella:\n:cloud:\n:snowflake:\n:snowman:\n:zap:\n:cyclone:\n:foggy:\n:ocean:\n:cat:\n:dog:\n:mouse:\n:hamster:\n:rabbit:\n:wolf:\n:frog:\n:tiger:\n:koala:\n:bear:\n:pig:\n:pig_nose:\n:cow:\n:boar:\n:monkey_face:\n:monkey:\n:horse:\n:racehorse:\n:camel:\n:sheep:\n:elephant:\n:panda_face:\n:snake:\n:bird:\n:baby_chick:\n:hatched_chick:\n:hatching_chick:\n:chicken:\n:penguin:\n:turtle:\n:bug:\n:honeybee:\n:ant:\n:beetle:\n:snail:\n:octopus:\n:tropical_fish:\n:fish:\n:whale:\n:whale2:\n:dolphin:\n:cow2:\n:ram:\n:rat:\n:water_buffalo:\n:tiger2:\n:rabbit2:\n:dragon:\n:goat:\n:rooster:\n:dog2:\n:pig2:\n:mouse2:\n:ox:\n:dragon_face:\n:blowfish:\n:crocodile:\n:dromedary_camel:\n:leopard:\n:cat2:\n:poodle:\n:paw_prints:\n:bouquet:\n:cherry_blossom:\n:tulip:\n:four_leaf_clover:\n:rose:\n:sunflower:\n:hibiscus:\n:maple_leaf:\n:leaves:\n:fallen_leaf:\n:herb:\n:mushroom:\n:cactus:\n:palm_tree:\n:evergreen_tree:\n:deciduous_tree:\n:chestnut:\n:seedling:\n:blossom:\n:ear_of_rice:\n:shell:\n:globe_with_meridians:\n:sun_with_face:\n:full_moon_with_face:\n:new_moon_with_face:\n:new_moon:\n:waxing_crescent_moon:\n:first_quarter_moon:\n:waxing_gibbous_moon:\n:full_moon:\n:waning_gibbous_moon:\n:last_quarter_moon:\n:waning_crescent_moon:\n:last_quarter_moon_with_face:\n:first_quarter_moon_with_face:\n:crescent_moon:\n:earth_africa:\n:earth_americas:\n:earth_asia:\n:volcano:\n:milky_way:\n:partly_sunny:\n:octocat:\n:squirrel:\n\n\n\n\n# Emoticons - Objects\n\n:bamboo:\n:gift_heart:\n:dolls:\n:school_satchel:\n:mortar_board:\n:flags:\n:fireworks:\n:sparkler:\n:wind_chime:\n:rice_scene:\n:jack_o_lantern:\n:ghost:\n:santa:\n:christmas_tree:\n:gift:\n:bell:\n:no_bell:\n:tanabata_tree:\n:tada:\n:confetti_ball:\n:balloon:\n:crystal_ball:\n:cd:\n:dvd:\n:floppy_disk:\n:camera:\n:video_camera:\n:movie_camera:\n:computer:\n:tv:\n:iphone:\n:phone:\n:telephone:\n:telephone_receiver:\n:pager:\n:fax:\n:minidisc:\n:vhs:\n:sound:\n:speaker:\n:mute:\n:loudspeaker:\n:mega:\n:hourglass:\n:hourglass_flowing_sand:\n:alarm_clock:\n:watch:\n:radio:\n:satellite:\n:loop:\n:mag:\n:mag_right:\n:unlock:\n:lock:\n:lock_with_ink_pen:\n:closed_lock_with_key:\n:key:\n:bulb:\n:flashlight:\n:high_brightness:\n:low_brightness:\n:electric_plug:\n:battery:\n:calling:\n:email:\n:mailbox:\n:postbox:\n:bath:\n:bathtub:\n:shower:\n:toilet:\n:wrench:\n:nut_and_bolt:\n:hammer:\n:seat:\n:moneybag:\n:yen:\n:dollar:\n:pound:\n:euro:\n:credit_card:\n:money_with_wings:\n:e-mail:\n:inbox_tray:\n:outbox_tray:\n:envelope:\n:incoming_envelope:\n:postal_horn:\n:mailbox_closed:\n:mailbox_with_mail:\n:mailbox_with_no_mail:\n:package:\n:door:\n:smoking:\n:bomb:\n:gun:\n:hocho:\n:pill:\n:syringe:\n:page_facing_up:\n:page_with_curl:\n:bookmark_tabs:\n:bar_chart:\n:chart_with_upwards_trend:\n:chart_with_downwards_trend:\n:scroll:\n:clipboard:\n:calendar:\n:date:\n:card_index:\n:file_folder:\n:open_file_folder:\n:scissors:\n:pushpin:\n:paperclip:\n:black_nib:\n:pencil2:\n:straight_ruler:\n:triangular_ruler:\n:closed_book:\n:green_book:\n:blue_book:\n:orange_book:\n:notebook:\n:notebook_with_decorative_cover:\n:ledger:\n:books:\n:bookmark:\n:name_badge:\n:microscope:\n:telescope:\n:newspaper:\n:football:\n:basketball:\n:soccer:\n:baseball:\n:tennis:\n:8ball:\n:8ball:\n:rugby_football:\n:bowling:\n:golf:\n:mountain_bicyclist:\n:bicyclist:\n:horse_racing:\n:snowboarder:\n:swimmer:\n:surfer:\n:ski:\n:spades:\n:hearts:\n:clubs:\n:diamonds:\n:gem:\n:ring:\n:trophy:\n:musical_score:\n:musical_keyboard:\n:violin:\n:space_invader:\n:video_game:\n:black_joker:\n:flower_playing_cards:\n:game_die:\n:dart:\n:mahjong:\n:clapper:\n:memo:\n:pencil:\n:book:\n:art:\n:microphone:\n:headphones:\n:trumpet:\n:saxophone:\n:guitar:\n:shoe:\n:sandal:\n:high_heel:\n:lipstick:\n:boot:\n:shirt:\n:tshirt:\n:necktie:\n:womans_clothes:\n:dress:\n:running_shirt_with_sash:\n:jeans:\n:kimono:\n:bikini:\n:ribbon:\n:tophat:\n:crown:\n:womans_hat:\n:mans_shoe:\n:closed_umbrella:\n:briefcase:\n:handbag:\n:pouch:\n:purse:\n:eyeglasses:\n:fishing_pole_and_fish:\n:coffee:\n:tea:\n:sake:\n:baby_bottle:\n:beer:\n:beers:\n:cocktail:\n:tropical_drink:\n:wine_glass:\n:fork_and_knife:\n:pizza:\n:hamburger:\n:fries:\n:poultry_leg:\n:meat_on_bone:\n:spaghetti:\n:curry:\n:fried_shrimp:\n:bento:\n:sushi:\n:fish_cake:\n:rice_ball:\n:rice_cracker:\n:rice:\n:ramen:\n:stew:\n:oden:\n:dango:\n:egg:\n:bread:\n:doughnut:\n:custard:\n:icecream:\n:ice_cream:\n:shaved_ice:\n:birthday:\n:cake:\n:cookie:\n:chocolate_bar:\n:candy:\n:lollipop:\n:honey_pot:\n:apple:\n:green_apple:\n:tangerine:\n:lemon:\n:cherries:\n:grapes:\n:watermelon:\n:strawberry:\n:peach:\n:melon:\n:banana:\n:pear:\n:pineapple:\n:sweet_potato:\n:eggplant:\n:tomato:\n:corn:\n\n\n\n\n# Emoticons - Places\n\n:house:\n:house_with_garden:\n:school:\n:office:\n:post_office:\n:hospital:\n:bank:\n:convenience_store:\n:love_hotel:\n:hotel:\n:wedding:\n:church:\n:department_store:\n:european_post_office:\n:city_sunrise:\n:city_sunset:\n:japanese_castle:\n:european_castle:\n:tent:\n:factory:\n:tokyo_tower:\n:japan:\n:mount_fuji:\n:sunrise_over_mountains:\n:sunrise:\n:stars:\n:statue_of_liberty:\n:bridge_at_night:\n:carousel_horse:\n:rainbow:\n:ferris_wheel:\n:fountain:\n:roller_coaster:\n:ship:\n:speedboat:\n:boat:\n:sailboat:\n:rowboat:\n:anchor:\n:rocket:\n:airplane:\n:helicopter:\n:steam_locomotive:\n:tram:\n:mountain_railway:\n:bike:\n:aerial_tramway:\n:suspension_railway:\n:mountain_cableway:\n:tractor:\n:blue_car:\n:oncoming_automobile:\n:car:\n:red_car:\n:taxi:\n:oncoming_taxi:\n:articulated_lorry:\n:bus:\n:oncoming_bus:\n:rotating_light:\n:police_car:\n:oncoming_police_car:\n:fire_engine:\n:ambulance:\n:minibus:\n:truck:\n:train:\n:station:\n:train2:\n:bullettrain_front:\n:bullettrain_side:\n:light_rail:\n:monorail:\n:railway_car:\n:trolleybus:\n:ticket:\n:fuelpump:\n:vertical_traffic_light:\n:traffic_light:\n:warning:\n:construction:\n:beginner:\n:atm:\n:slot_machine:\n:busstop:\n:barber:\n:hotsprings:\n:checkered_flag:\n:crossed_flags:\n:izakaya_lantern:\n:moyai:\n:circus_tent:\n:performing_arts:\n:round_pushpin:\n:triangular_flag_on_post:\n:jp:\n:kr:\n:cn:\n:us:\n:fr:\n:es:\n:it:\n:ru:\n:gb:\n:uk:\n:de:\n\n\n\n\n# Emoticons - Symbols\n\n:one:\n:two:\n:three:\n:four:\n:five:\n:six:\n:seven:\n:eight:\n:nine:\n:keycap_ten:\n:1234:\n:zero:\n:hash:\n:symbols:\n:arrow_backward:\n:arrow_down:\n:arrow_forward:\n:arrow_left:\n:capital_abcd:\n:abcd:\n:abc:\n:arrow_lower_left:\n:arrow_lower_right:\n:arrow_right:\n:arrow_up:\n:arrow_upper_left:\n:arrow_upper_right:\n:arrow_double_down:\n:arrow_double_up:\n:arrow_down_small:\n:arrow_heading_down:\n:arrow_heading_up:\n:leftwards_arrow_with_hook:\n:arrow_right_hook:\n:left_right_arrow:\n:arrow_up_down:\n:arrow_up_small:\n:arrows_clockwise:\n:arrows_counterclockwise:\n:rewind:\n:fast_forward:\n:information_source:\n:ok:\n:twisted_rightwards_arrows:\n:repeat:\n:repeat_one:\n:new:\n:top:\n:up:\n:cool:\n:free:\n:ng:\n:cinema:\n:koko:\n:signal_strength:\n:u5272:\n:u5408:\n:u55b6:\n:u6307:\n:u6708:\n:u6709:\n:u6e80:\n:u7121:\n:u7533:\n:u7a7a:\n:u7981:\n:sa:\n:restroom:\n:mens:\n:womens:\n:baby_symbol:\n:no_smoking:\n:parking:\n:wheelchair:\n:metro:\n:baggage_claim:\n:accept:\n:wc:\n:potable_water:\n:put_litter_in_its_place:\n:secret:\n:congratulations:\n:m:\n:passport_control:\n:left_luggage:\n:customs:\n:ideograph_advantage:\n:cl:\n:sos:\n:id:\n:no_entry_sign:\n:underage:\n:no_mobile_phones:\n:do_not_litter:\n:non-potable_water:\n:no_bicycles:\n:no_pedestrians:\n:children_crossing:\n:no_entry:\n:eight_spoked_asterisk:\n:sparkle:\n:eight_pointed_black_star:\n:heart_decoration:\n:vs:\n:vibration_mode:\n:mobile_phone_off:\n:chart:\n:currency_exchange:\n:aries:\n:taurus:\n:gemini:\n:cancer:\n:leo:\n:virgo:\n:libra:\n:scorpius:\n:sagittarius:\n:capricorn:\n:aquarius:\n:pisces:\n:ophiuchus:\n:six_pointed_star:\n:negative_squared_cross_mark:\n:a:\n:b:\n:ab:\n:o2:\n:diamond_shape_with_a_dot_inside:\n:recycle:\n:end:\n:back:\n:on:\n:soon:\n:clock1:\n:clock130:\n:clock10:\n:clock1030:\n:clock11:\n:clock1130:\n:clock12:\n:clock1230:\n:clock2:\n:clock230:\n:clock3:\n:clock330:\n:clock4:\n:clock430:\n:clock5:\n:clock530:\n:clock6:\n:clock630:\n:clock7:\n:clock730:\n:clock8:\n:clock830:\n:clock9:\n:clock930:\n:heavy_dollar_sign:\n:copyright:\n:registered:\n:tm:\n:x:\n:heavy_exclamation_mark:\n:bangbang:\n:interrobang:\n:o:\n:heavy_multiplication_x:\n:heavy_plus_sign:\n:heavy_minus_sign:\n:heavy_division_sign:\n:white_flower:\n:100:\n:heavy_check_mark:\n:ballot_box_with_check:\n:radio_button:\n:link:\n:curly_loop:\n:wavy_dash:\n:part_alternation_mark:\n:trident:\n:black_small_square:\n:white_small_square:\n:black_medium_small_square:\n:white_medium_small_square:\n:black_medium_square:\n:white_medium_square:\n:black_large_square:\n:white_large_square:\n:white_check_mark:\n:black_square_button:\n:white_square_button:\n:black_circle:\n:white_circle:\n:red_circle:\n:large_blue_circle:\n:large_blue_diamond:\n:large_orange_diamond:\n:small_blue_diamond:\n:small_orange_diamond:\n:small_red_triangle:\n:small_red_triangle_down:\n:shipit:", 
            "title": "Test emoticons"
        }, 
        {
            "location": "/developer/tests/test-emoticons/index.html#emoticon-testing", 
            "text": "The below text can be used to check for regressions in changes to text processing. Paste the below text into messages and check that emoticons continue to render after text processing changes.   # Emoticon - Punctuation \n\n:) :-) \n;) ;-)\n:o :O\n:-o :-O\n:] :-]\n:d :-D\nx-d x-D\n:p :-P\n:@\n:( :-( \n:'(\n:* :-*\n:/ :-/\n:s :-s\n:| :-|\n:$ :-$\n:-x 3\n:+1:\n:-1:  # Emoticons - People\n\n:bowtie:\n:smile:\n:laughing:\n:blush:\n:smiley:\n:relaxed:\n:smirk:\n:heart_eyes:\n:kissing_heart:\n:kissing_closed_eyes:\n:flushed:\n:relieved:\n:satisfied:\n:grin:\n:wink:\n:stuck_out_tongue_winking_eye:\n:stuck_out_tongue_closed_eyes:\n:grinning:\n:kissing:\n:kissing_smiling_eyes:\n:stuck_out_tongue:\n:sleeping:\n:worried:\n:frowning:\n:anguished:\n:open_mouth:\n:grimacing:\n:confused:\n:hushed:\n:expressionless:\n:unamused:\n:sweat_smile:\n:sweat:\n:disappointed_relieved:\n:weary:\n:pensive:\n:disappointed:\n:confounded:\n:fearful:\n:cold_sweat:\n:persevere:\n:cry:\n:sob:\n:joy:\n:astonished:\n:scream:\n:neckbeard:\n:tired_face:\n:angry:\n:rage:\n:triumph:\n:sleepy:\n:yum:\n:mask:\n:sunglasses:\n:dizzy_face:\n:imp:\n:smiling_imp:\n:neutral_face:\n:no_mouth:\n:innocent:\n:alien:\n:yellow_heart:\n:blue_heart:\n:purple_heart:\n:heart:\n:green_heart:\n:broken_heart:\n:heartbeat:\n:heartpulse:\n:two_hearts:\n:revolving_hearts:\n:cupid:\n:sparkling_heart:\n:sparkles:\n:star:\n:star2:\n:dizzy:\n:boom:\n:collision:\n:anger:\n:exclamation:\n:question:\n:grey_exclamation:\n:grey_question:\n:zzz:\n:dash:\n:sweat_drops:\n:notes:\n:musical_note:\n:fire:\n:hankey:\n:poop:\n:shit:\n:+1:\n:thumbsup:\n:-1:\n:thumbsdown:\n:ok_hand:\n:punch:\n:facepunch:\n:fist:\n:v:\n:wave:\n:hand:\n:raised_hand:\n:open_hands:\n:point_up:\n:point_down:\n:point_left:\n:point_right:\n:raised_hands:\n:pray:\n:point_up_2:\n:clap:\n:muscle:\n:metal:\n:fu:\n:runner:\n:running:\n:couple:\n:family:\n:two_men_holding_hands:\n:two_women_holding_hands:\n:dancer:\n:dancers:\n:ok_woman:\n:no_good:\n:information_desk_person:\n:raising_hand:\n:bride_with_veil:\n:person_with_pouting_face:\n:person_frowning:\n:bow:\n:couplekiss:\n:couple_with_heart:\n:massage:\n:haircut:\n:nail_care:\n:boy:\n:girl:\n:woman:\n:man:\n:baby:\n:older_woman:\n:older_man:\n:person_with_blond_hair:\n:man_with_gua_pi_mao:\n:man_with_turban:\n:construction_worker:\n:cop:\n:angel:\n:princess:\n:smiley_cat:\n:smile_cat:\n:heart_eyes_cat:\n:kissing_cat:\n:smirk_cat:\n:scream_cat:\n:crying_cat_face:\n:joy_cat:\n:pouting_cat:\n:japanese_ogre:\n:japanese_goblin:\n:see_no_evil:\n:hear_no_evil:\n:speak_no_evil:\n:guardsman:\n:skull:\n:feet:\n:lips:\n:kiss:\n:droplet:\n:ear:\n:eyes:\n:nose:\n:tongue:\n:love_letter:\n:bust_in_silhouette:\n:busts_in_silhouette:\n:speech_balloon:\n:thought_balloon:\n:feelsgood:\n:finnadie:\n:goberserk:\n:godmode:\n:hurtrealbad:\n:rage1:\n:rage2:\n:rage3:\n:rage4:\n:suspect:\n:trollface:  # Emoticons - Nature\n\n:sunny:\n:umbrella:\n:cloud:\n:snowflake:\n:snowman:\n:zap:\n:cyclone:\n:foggy:\n:ocean:\n:cat:\n:dog:\n:mouse:\n:hamster:\n:rabbit:\n:wolf:\n:frog:\n:tiger:\n:koala:\n:bear:\n:pig:\n:pig_nose:\n:cow:\n:boar:\n:monkey_face:\n:monkey:\n:horse:\n:racehorse:\n:camel:\n:sheep:\n:elephant:\n:panda_face:\n:snake:\n:bird:\n:baby_chick:\n:hatched_chick:\n:hatching_chick:\n:chicken:\n:penguin:\n:turtle:\n:bug:\n:honeybee:\n:ant:\n:beetle:\n:snail:\n:octopus:\n:tropical_fish:\n:fish:\n:whale:\n:whale2:\n:dolphin:\n:cow2:\n:ram:\n:rat:\n:water_buffalo:\n:tiger2:\n:rabbit2:\n:dragon:\n:goat:\n:rooster:\n:dog2:\n:pig2:\n:mouse2:\n:ox:\n:dragon_face:\n:blowfish:\n:crocodile:\n:dromedary_camel:\n:leopard:\n:cat2:\n:poodle:\n:paw_prints:\n:bouquet:\n:cherry_blossom:\n:tulip:\n:four_leaf_clover:\n:rose:\n:sunflower:\n:hibiscus:\n:maple_leaf:\n:leaves:\n:fallen_leaf:\n:herb:\n:mushroom:\n:cactus:\n:palm_tree:\n:evergreen_tree:\n:deciduous_tree:\n:chestnut:\n:seedling:\n:blossom:\n:ear_of_rice:\n:shell:\n:globe_with_meridians:\n:sun_with_face:\n:full_moon_with_face:\n:new_moon_with_face:\n:new_moon:\n:waxing_crescent_moon:\n:first_quarter_moon:\n:waxing_gibbous_moon:\n:full_moon:\n:waning_gibbous_moon:\n:last_quarter_moon:\n:waning_crescent_moon:\n:last_quarter_moon_with_face:\n:first_quarter_moon_with_face:\n:crescent_moon:\n:earth_africa:\n:earth_americas:\n:earth_asia:\n:volcano:\n:milky_way:\n:partly_sunny:\n:octocat:\n:squirrel:  # Emoticons - Objects\n\n:bamboo:\n:gift_heart:\n:dolls:\n:school_satchel:\n:mortar_board:\n:flags:\n:fireworks:\n:sparkler:\n:wind_chime:\n:rice_scene:\n:jack_o_lantern:\n:ghost:\n:santa:\n:christmas_tree:\n:gift:\n:bell:\n:no_bell:\n:tanabata_tree:\n:tada:\n:confetti_ball:\n:balloon:\n:crystal_ball:\n:cd:\n:dvd:\n:floppy_disk:\n:camera:\n:video_camera:\n:movie_camera:\n:computer:\n:tv:\n:iphone:\n:phone:\n:telephone:\n:telephone_receiver:\n:pager:\n:fax:\n:minidisc:\n:vhs:\n:sound:\n:speaker:\n:mute:\n:loudspeaker:\n:mega:\n:hourglass:\n:hourglass_flowing_sand:\n:alarm_clock:\n:watch:\n:radio:\n:satellite:\n:loop:\n:mag:\n:mag_right:\n:unlock:\n:lock:\n:lock_with_ink_pen:\n:closed_lock_with_key:\n:key:\n:bulb:\n:flashlight:\n:high_brightness:\n:low_brightness:\n:electric_plug:\n:battery:\n:calling:\n:email:\n:mailbox:\n:postbox:\n:bath:\n:bathtub:\n:shower:\n:toilet:\n:wrench:\n:nut_and_bolt:\n:hammer:\n:seat:\n:moneybag:\n:yen:\n:dollar:\n:pound:\n:euro:\n:credit_card:\n:money_with_wings:\n:e-mail:\n:inbox_tray:\n:outbox_tray:\n:envelope:\n:incoming_envelope:\n:postal_horn:\n:mailbox_closed:\n:mailbox_with_mail:\n:mailbox_with_no_mail:\n:package:\n:door:\n:smoking:\n:bomb:\n:gun:\n:hocho:\n:pill:\n:syringe:\n:page_facing_up:\n:page_with_curl:\n:bookmark_tabs:\n:bar_chart:\n:chart_with_upwards_trend:\n:chart_with_downwards_trend:\n:scroll:\n:clipboard:\n:calendar:\n:date:\n:card_index:\n:file_folder:\n:open_file_folder:\n:scissors:\n:pushpin:\n:paperclip:\n:black_nib:\n:pencil2:\n:straight_ruler:\n:triangular_ruler:\n:closed_book:\n:green_book:\n:blue_book:\n:orange_book:\n:notebook:\n:notebook_with_decorative_cover:\n:ledger:\n:books:\n:bookmark:\n:name_badge:\n:microscope:\n:telescope:\n:newspaper:\n:football:\n:basketball:\n:soccer:\n:baseball:\n:tennis:\n:8ball:\n:8ball:\n:rugby_football:\n:bowling:\n:golf:\n:mountain_bicyclist:\n:bicyclist:\n:horse_racing:\n:snowboarder:\n:swimmer:\n:surfer:\n:ski:\n:spades:\n:hearts:\n:clubs:\n:diamonds:\n:gem:\n:ring:\n:trophy:\n:musical_score:\n:musical_keyboard:\n:violin:\n:space_invader:\n:video_game:\n:black_joker:\n:flower_playing_cards:\n:game_die:\n:dart:\n:mahjong:\n:clapper:\n:memo:\n:pencil:\n:book:\n:art:\n:microphone:\n:headphones:\n:trumpet:\n:saxophone:\n:guitar:\n:shoe:\n:sandal:\n:high_heel:\n:lipstick:\n:boot:\n:shirt:\n:tshirt:\n:necktie:\n:womans_clothes:\n:dress:\n:running_shirt_with_sash:\n:jeans:\n:kimono:\n:bikini:\n:ribbon:\n:tophat:\n:crown:\n:womans_hat:\n:mans_shoe:\n:closed_umbrella:\n:briefcase:\n:handbag:\n:pouch:\n:purse:\n:eyeglasses:\n:fishing_pole_and_fish:\n:coffee:\n:tea:\n:sake:\n:baby_bottle:\n:beer:\n:beers:\n:cocktail:\n:tropical_drink:\n:wine_glass:\n:fork_and_knife:\n:pizza:\n:hamburger:\n:fries:\n:poultry_leg:\n:meat_on_bone:\n:spaghetti:\n:curry:\n:fried_shrimp:\n:bento:\n:sushi:\n:fish_cake:\n:rice_ball:\n:rice_cracker:\n:rice:\n:ramen:\n:stew:\n:oden:\n:dango:\n:egg:\n:bread:\n:doughnut:\n:custard:\n:icecream:\n:ice_cream:\n:shaved_ice:\n:birthday:\n:cake:\n:cookie:\n:chocolate_bar:\n:candy:\n:lollipop:\n:honey_pot:\n:apple:\n:green_apple:\n:tangerine:\n:lemon:\n:cherries:\n:grapes:\n:watermelon:\n:strawberry:\n:peach:\n:melon:\n:banana:\n:pear:\n:pineapple:\n:sweet_potato:\n:eggplant:\n:tomato:\n:corn:  # Emoticons - Places\n\n:house:\n:house_with_garden:\n:school:\n:office:\n:post_office:\n:hospital:\n:bank:\n:convenience_store:\n:love_hotel:\n:hotel:\n:wedding:\n:church:\n:department_store:\n:european_post_office:\n:city_sunrise:\n:city_sunset:\n:japanese_castle:\n:european_castle:\n:tent:\n:factory:\n:tokyo_tower:\n:japan:\n:mount_fuji:\n:sunrise_over_mountains:\n:sunrise:\n:stars:\n:statue_of_liberty:\n:bridge_at_night:\n:carousel_horse:\n:rainbow:\n:ferris_wheel:\n:fountain:\n:roller_coaster:\n:ship:\n:speedboat:\n:boat:\n:sailboat:\n:rowboat:\n:anchor:\n:rocket:\n:airplane:\n:helicopter:\n:steam_locomotive:\n:tram:\n:mountain_railway:\n:bike:\n:aerial_tramway:\n:suspension_railway:\n:mountain_cableway:\n:tractor:\n:blue_car:\n:oncoming_automobile:\n:car:\n:red_car:\n:taxi:\n:oncoming_taxi:\n:articulated_lorry:\n:bus:\n:oncoming_bus:\n:rotating_light:\n:police_car:\n:oncoming_police_car:\n:fire_engine:\n:ambulance:\n:minibus:\n:truck:\n:train:\n:station:\n:train2:\n:bullettrain_front:\n:bullettrain_side:\n:light_rail:\n:monorail:\n:railway_car:\n:trolleybus:\n:ticket:\n:fuelpump:\n:vertical_traffic_light:\n:traffic_light:\n:warning:\n:construction:\n:beginner:\n:atm:\n:slot_machine:\n:busstop:\n:barber:\n:hotsprings:\n:checkered_flag:\n:crossed_flags:\n:izakaya_lantern:\n:moyai:\n:circus_tent:\n:performing_arts:\n:round_pushpin:\n:triangular_flag_on_post:\n:jp:\n:kr:\n:cn:\n:us:\n:fr:\n:es:\n:it:\n:ru:\n:gb:\n:uk:\n:de:  # Emoticons - Symbols\n\n:one:\n:two:\n:three:\n:four:\n:five:\n:six:\n:seven:\n:eight:\n:nine:\n:keycap_ten:\n:1234:\n:zero:\n:hash:\n:symbols:\n:arrow_backward:\n:arrow_down:\n:arrow_forward:\n:arrow_left:\n:capital_abcd:\n:abcd:\n:abc:\n:arrow_lower_left:\n:arrow_lower_right:\n:arrow_right:\n:arrow_up:\n:arrow_upper_left:\n:arrow_upper_right:\n:arrow_double_down:\n:arrow_double_up:\n:arrow_down_small:\n:arrow_heading_down:\n:arrow_heading_up:\n:leftwards_arrow_with_hook:\n:arrow_right_hook:\n:left_right_arrow:\n:arrow_up_down:\n:arrow_up_small:\n:arrows_clockwise:\n:arrows_counterclockwise:\n:rewind:\n:fast_forward:\n:information_source:\n:ok:\n:twisted_rightwards_arrows:\n:repeat:\n:repeat_one:\n:new:\n:top:\n:up:\n:cool:\n:free:\n:ng:\n:cinema:\n:koko:\n:signal_strength:\n:u5272:\n:u5408:\n:u55b6:\n:u6307:\n:u6708:\n:u6709:\n:u6e80:\n:u7121:\n:u7533:\n:u7a7a:\n:u7981:\n:sa:\n:restroom:\n:mens:\n:womens:\n:baby_symbol:\n:no_smoking:\n:parking:\n:wheelchair:\n:metro:\n:baggage_claim:\n:accept:\n:wc:\n:potable_water:\n:put_litter_in_its_place:\n:secret:\n:congratulations:\n:m:\n:passport_control:\n:left_luggage:\n:customs:\n:ideograph_advantage:\n:cl:\n:sos:\n:id:\n:no_entry_sign:\n:underage:\n:no_mobile_phones:\n:do_not_litter:\n:non-potable_water:\n:no_bicycles:\n:no_pedestrians:\n:children_crossing:\n:no_entry:\n:eight_spoked_asterisk:\n:sparkle:\n:eight_pointed_black_star:\n:heart_decoration:\n:vs:\n:vibration_mode:\n:mobile_phone_off:\n:chart:\n:currency_exchange:\n:aries:\n:taurus:\n:gemini:\n:cancer:\n:leo:\n:virgo:\n:libra:\n:scorpius:\n:sagittarius:\n:capricorn:\n:aquarius:\n:pisces:\n:ophiuchus:\n:six_pointed_star:\n:negative_squared_cross_mark:\n:a:\n:b:\n:ab:\n:o2:\n:diamond_shape_with_a_dot_inside:\n:recycle:\n:end:\n:back:\n:on:\n:soon:\n:clock1:\n:clock130:\n:clock10:\n:clock1030:\n:clock11:\n:clock1130:\n:clock12:\n:clock1230:\n:clock2:\n:clock230:\n:clock3:\n:clock330:\n:clock4:\n:clock430:\n:clock5:\n:clock530:\n:clock6:\n:clock630:\n:clock7:\n:clock730:\n:clock8:\n:clock830:\n:clock9:\n:clock930:\n:heavy_dollar_sign:\n:copyright:\n:registered:\n:tm:\n:x:\n:heavy_exclamation_mark:\n:bangbang:\n:interrobang:\n:o:\n:heavy_multiplication_x:\n:heavy_plus_sign:\n:heavy_minus_sign:\n:heavy_division_sign:\n:white_flower:\n:100:\n:heavy_check_mark:\n:ballot_box_with_check:\n:radio_button:\n:link:\n:curly_loop:\n:wavy_dash:\n:part_alternation_mark:\n:trident:\n:black_small_square:\n:white_small_square:\n:black_medium_small_square:\n:white_medium_small_square:\n:black_medium_square:\n:white_medium_square:\n:black_large_square:\n:white_large_square:\n:white_check_mark:\n:black_square_button:\n:white_square_button:\n:black_circle:\n:white_circle:\n:red_circle:\n:large_blue_circle:\n:large_blue_diamond:\n:large_orange_diamond:\n:small_blue_diamond:\n:small_orange_diamond:\n:small_red_triangle:\n:small_red_triangle_down:\n:shipit:", 
            "title": "Emoticon Testing"
        }, 
        {
            "location": "/install/Administration/index.html", 
            "text": "Administration\n\n\nThis document provides instructions for common administrator tasks\n\n\nImportant notes\n\n\nDO NOT manipulate the Mattermost database\n\n\n\n\nIn particular, DO NOT delete data from the database, as Mattermost is designed to stop working if data integrity has been compromised. The system is designed to archive content continously and generally assumes data is never deleted. \n\n\n\n\nCommon Tasks\n\n\nCreating System Administrator account from commandline\n\n\n\n\nIf the System Administrator account becomes unavailable, a person leaving the organization for example, you can set a new system admin from the commandline using \n./platform -assign_role -team_name=\"yourteam\" -email=\"you@example.com\" -role=\"system_admin\"\n. \n\n\nAfter assigning the role the user needs to log out and log back in before the System Administrator role is applied.\n\n\n\n\nDeactivating a user\n\n\n\n\nTeam Admin or System Admin can go to \nMain Menu\n \n \nManage Members\n \n \nMake Inactive\n to deactivate a user, which removes them from the team. \n\n\nTo preserve audit history, users are never deleted from the system. It is highly recommended that System Administrators do not attempt to delete users manually from the database, as this may compromise system integrity and ability to upgrade in future.", 
            "title": "Administration"
        }, 
        {
            "location": "/install/Administration/index.html#administration", 
            "text": "This document provides instructions for common administrator tasks  Important notes  DO NOT manipulate the Mattermost database   In particular, DO NOT delete data from the database, as Mattermost is designed to stop working if data integrity has been compromised. The system is designed to archive content continously and generally assumes data is never deleted.    Common Tasks  Creating System Administrator account from commandline   If the System Administrator account becomes unavailable, a person leaving the organization for example, you can set a new system admin from the commandline using  ./platform -assign_role -team_name=\"yourteam\" -email=\"you@example.com\" -role=\"system_admin\" .   After assigning the role the user needs to log out and log back in before the System Administrator role is applied.   Deactivating a user   Team Admin or System Admin can go to  Main Menu     Manage Members     Make Inactive  to deactivate a user, which removes them from the team.   To preserve audit history, users are never deleted from the system. It is highly recommended that System Administrators do not attempt to delete users manually from the database, as this may compromise system integrity and ability to upgrade in future.", 
            "title": "Administration"
        }, 
        {
            "location": "/install/Amazon-Elastic-Beanstalk/index.html", 
            "text": "AWS Elastic Beanstalk Setup (Docker)\n\n\nThese instructions will guide you through the process of setting up Mattermost for product evaluation using an EBS Docker single-container application using \nDockerrun.aws.zip\n.\n\n\n\n\nFrom your \nAWS console\n select \nElastic Beanstalk\n under the Compute section.\n\n\nSelect \nCreate New Application\n from the top right.\n\n\nName your Elastic Beanstalk application and click \nNext\n, \n\n\nSelect \nCreate web server\n on the New Enviroment page.\n\n\nIf asked, select \nCreate an IAM role and instance profile\n, then click \nNext\n.\n\n\nOn the Enviroment Type page,\n\n\nSet Predefined Configuration to \nDocker\n under the generic heading in the drop-down list. \n\n\nSet Environment Type to \nSingle instance\n in the drop-down list.\n\n\nClick \nNext\n.\n\n\n\n\n\n\nFor Application Source, select \nUpload your own\n and upload the \nDockerrun.aws.zip\n file, then click \nNext\n.\n\n\nType an Environment Name and URL. Make sure the URL is available by clicking \nCheck availability\n, then click \nNext\n.\n\n\nThe options on the Additional Resources page may be left at default unless you wish to change them. Click \nNext\n.\n\n\nOn the Configuration Details page, \n\n\nSelect an Instance Type of \nt2.small\n or larger.\n\n\nThe remaining options may be left at their default values unless you wish to change them. Click \nNext\n.\n\n\n\n\n\n\nEnvironment tags may be left blank. Click \nNext\n.\n\n\nYou will be asked to review your information, then click \nLaunch\n.\n\n\nIt may take a few minutes for beanstalk to launch your environment. If the launch is successful, you will see a see a large green checkmark and the Health status should change to \u201cGreen\u201d. \n\n\nTest your environment by clicking the domain link next to your application name at the top of the dashboard. Alternatively, enter the domain into your browser in the form \nhttp://\nyour-ebs-application-url\n.elasticbeanstalk.com\n. You can also map your own domain if you wish. If everything is working correctly, the domain should navigate you to the Mattermost signup page. Enjoy exploring Mattermost!\n\n\n\n\n(Recommended) Enable Email\n\n\nThe default single-container Docker instance for Mattermost is designed for product evaluation, and sets \nSendEmailNotifications=false\n so the product can function without enabling email. To see the product's full functionality, \nenabling SMTP email is recommended\n.", 
            "title": "Amazon Elastic Beanstalk"
        }, 
        {
            "location": "/install/Amazon-Elastic-Beanstalk/index.html#aws-elastic-beanstalk-setup-docker", 
            "text": "These instructions will guide you through the process of setting up Mattermost for product evaluation using an EBS Docker single-container application using  Dockerrun.aws.zip .   From your  AWS console  select  Elastic Beanstalk  under the Compute section.  Select  Create New Application  from the top right.  Name your Elastic Beanstalk application and click  Next ,   Select  Create web server  on the New Enviroment page.  If asked, select  Create an IAM role and instance profile , then click  Next .  On the Enviroment Type page,  Set Predefined Configuration to  Docker  under the generic heading in the drop-down list.   Set Environment Type to  Single instance  in the drop-down list.  Click  Next .    For Application Source, select  Upload your own  and upload the  Dockerrun.aws.zip  file, then click  Next .  Type an Environment Name and URL. Make sure the URL is available by clicking  Check availability , then click  Next .  The options on the Additional Resources page may be left at default unless you wish to change them. Click  Next .  On the Configuration Details page,   Select an Instance Type of  t2.small  or larger.  The remaining options may be left at their default values unless you wish to change them. Click  Next .    Environment tags may be left blank. Click  Next .  You will be asked to review your information, then click  Launch .  It may take a few minutes for beanstalk to launch your environment. If the launch is successful, you will see a see a large green checkmark and the Health status should change to \u201cGreen\u201d.   Test your environment by clicking the domain link next to your application name at the top of the dashboard. Alternatively, enter the domain into your browser in the form  http:// your-ebs-application-url .elasticbeanstalk.com . You can also map your own domain if you wish. If everything is working correctly, the domain should navigate you to the Mattermost signup page. Enjoy exploring Mattermost!   (Recommended) Enable Email  The default single-container Docker instance for Mattermost is designed for product evaluation, and sets  SendEmailNotifications=false  so the product can function without enabling email. To see the product's full functionality,  enabling SMTP email is recommended .", 
            "title": "AWS Elastic Beanstalk Setup (Docker)"
        }, 
        {
            "location": "/install/Configuration-Settings/index.html", 
            "text": "System Console Settings\n\n\nThe System Console user interface lets system administrators manage a Mattermost server and multiple teams from a web-based user interface. The first user added to a new Mattermost install is assigned the system administrator role and can access the System Console from the main menu of any team. Setting changes in the System Console are stored in \nconfig.json\n. \n\n\nService Settings\n\n\nGeneral settings to configure the listening address, login security, testing, webhooks and service integration of Mattermost. \n\n\nSystem\n\n\n\"ListenAddress\": \":8065\"\n\nThe IP address on which to listen and the port on which to bind. Entering \":8065\" will bind to all interfaces or you can choose one like \"127.0.0.1:8065\". Changing this will require a server restart before taking effect.\n\n\n\"MaximumLoginAttempts\": 10\n\nFailed login attempts allowed before a user is locked out and required to reset their password via email.\n\n\n\"SegmentDeveloperKey\": \"\"\n\nFor users running SaaS services, signup for a key at Segment.com to track metrics.\n\n\n\"GoogleDeveloperKey\": \"\"\n\nSet this key to enable embedding of YouTube video previews based on hyperlinks appearing in messages or comments. Instructions to obtain a key available at https://www.youtube.com/watch?v=Im69kzhpR3I. Leaving the field blank disables the automatic generation of YouTube video previews from links.\n\n\n\"EnableTesting\": false\n\n\"true\": \n/loadtest\n slash command is enabled to load test accounts and test data.\n\n\n\"EnableSecurityFixAlert\": true\n\n\u201dtrue\u201d: System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.\n\n\nWebhooks\n\n\n\"EnableIncomingWebhooks\": true\n\nDevelopers building integrations can create webhook URLs for channels and private groups. Please see http://mattermost.org/webhooks to learn about creating webhooks, view samples, and to let the community know about integrations you have built. \"true\": Incoming webhooks will be allowed. To manage incoming webhooks, go to Account Settings -\n Integrations. The webhook URLs created in Account Settings can be used by external applications to create posts in any channels or private groups that you have access to; \u201cfalse\u201d: The Integrations tab of Account Settings is hidden and incoming webhooks are disabled.\n\n\nSecurity note: By enabling this feature, users may be able to perform \nphishing attacks\n by attempting to impersonate other users. To combat these attacks, a BOT tag appears next to all posts from a webhook. Enable at your own risk.\n\n\n\"EnablePostUsernameOverride\": false\n\n\"true\": Webhooks will be allowed to change the username they are posting as; \u201cfalse\u201d: Webhooks can only post as the username they were set up with. See http://mattermost.org/webhooks for more details.\n\n\n\"EnablePostIconOverride\": false\n\n\"true\": Webhooks will be allowed to change the icon they post with; \u201cfalse\u201d: Webhooks can only post with the profile picture of the account they were set up with. See http://mattermost.org/webhooks for more details.\n\n\nTeam Settings\n\n\nSettings to configure the appearance, size, and access options for teams.\n\n\n\"SiteName\": \"Mattermost\"\n\nName of service shown in login screens and UI.\n\n\n\"MaxUsersPerTeam\": 50\n\nMaximum number of users per team, including both active and inactive users.\n\n\n\"EnableTeamCreation\": true\n\n\"true\": Ability to create a new team is enabled for all users; \u201cfalse\u201d: the ability to create teams is disabled. The Create A New Team button is hidden in the main menu UI.\n\n\n\"EnableUserCreation\": true\n\n\"true\": Ability to create new accounts is enabled via inviting new members or sharing the team invite link; \u201cfalse\u201d: the ability to create accounts is disabled. The create account button displays an error when trying to signup via an email invite or team invite link.\n\n\n\"RestrictCreationToDomains\": \"\"\n\nTeams can only be created by a verified email from this list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\").\n\n\nSQL Settings\n\n\nSettings to configure the data sources, connections, and encryption of SQL databases. Changing properties in this section will require a server restart before taking effect. \n\n\n\"DriverName\": \"mysql\"\n\n\"mysql\": enables driver to MySQL database; \"postgres\": enables driver to PostgreSQL database. This setting can only be changed from config.json file, it cannot be changed from the System Console user interface.\n\n\n\"DataSource\": \"mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8\"\n\nThis is the connection string to the master database. When \nDriverName\n=\"postgres\" then use a connection string in the form \u201cpostgres://mmuser:password@localhost:5432/mattermost_test?sslmode=disable\nconnect_timeout=10\u201d. This setting can only be changed from config.json file, it cannot be changed from the System Console user interface.\n\n\n\"DataSourceReplicas\": []\n\nThis is a list of connection strings pointing to read replicas of MySQL or PostgreSQL database.  If running a single server, set to DataSource. This setting can only be changed from config.json file, it cannot be changed from the System Console user interface.\n\n\n\"MaxIdleConns\": 10\n\nMaximum number of idle connections held open to the database.\n\n\n\"MaxOpenConns\": 10\n\nMaximum number of open connections held open to the database.\n\n\n\"Trace\": false\n\n\"true\": Executing SQL statements are written to the log for development.\n\n\n\"AtRestEncryptKey\": \"7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QVg\"\n\n32-character (to be randomly generated via Admin Console) salt available to encrypt and decrypt sensitive fields in database.\n\n\nEmail Settings\n\n\nSettings to configure email signup, notifications, security, and SMTP options. \n\n\nSignup\n\n\n\"EnableSignUpWithEmail\": true\n\n\"true\": Allow team creation and account signup using email and password; \u201cfalse\u201d: Email signup is disabled and users are not able to invite new members. This limits signup to single-sign-on services like OAuth or LDAP.\n\n\nNotifications\n\n\n\"SendEmailNotifications\": false\n\n\"true\": Enables sending of email notifications. \u201cfalse\u201d: Disables email notifications for developers who may want to skip email setup for faster development.\n\n\n\"RequireEmailVerification\": false\n\n\"true\": Require email verification after account creation prior to allowing login; \u201cfalse\u201d: Users do not need to verify their email address prior to login. Developers may set this field to false so skip sending verification emails for faster development.\n\n\n\"FeedbackName\": \"\"\n\nName displayed on email account used when sending notification emails from Mattermost system.\n\n\n\"FeedbackEmail\": \"\"\n\nAddress displayed on email account used when sending notification emails from Mattermost system.\n\n\nSMTP\n\n\n\"SMTPUsername\": \"\"\n\nObtain this credential from the administrator setting up your email server.\n\n\n\"SMTPPassword\": \"\"\n\nObtain this credential from the administrator setting up your email server.\n\n\n\"SMTPServer\": \"\"\n\nLocation of SMTP email server.\n\n\n\"SMTPPort\": \"\"\n\nPort of SMTP email server.\n\n\nSecurity\n\n\n\"ConnectionSecurity\": \"\"\n\n\"none\": Send email over an unsecure connection; \"TLS\": Communication between Mattermost and your email server is encrypted; \u201cSTARTTLS\u201d: Attempts to upgrade an existing insecure connection to a secure connection using TLS.\n\n\n\"InviteSalt\": \"bjlSR4QqkXFBr7TP4oDzlfZmcNuH9YoS\"\n\n32-character (to be randomly generated via Admin Console) salt added to signing of email invites.\n\n\n\"PasswordResetSalt\": \"vZ4DcKyVVRlKHHJpexcuXzojkE5PZ5eL\"\n\n32-character (to be randomly generated via Admin Console) salt added to signing of password reset emails.\n\n\nFile Settings\n\n\nSettings to configure storage, appearance, and security of files and images.\n\n\nFile Storage\n\n\n\"DriverName\": \"local\"\n\nSystem used for file storage. \u201clocal\u201d: Files and images are stored on the local file system. \u201camazons3\u201d: Files and images are stored on Amazon S3 based on the provided access key, bucket and region fields.\n\n\n\"Directory\": \"./data/\"\n\nDirectory to which files are written. If blank, directory will be set to ./data/.\n\n\n\"AmazonS3AccessKeyId\": \"\"\n\nObtain this credential from your Amazon EC2 administrator.\n\n\n\"AmazonS3SecretAccessKey\": \"\"\n\nObtain this credential from your Amazon EC2 administrator.\n\n\n\"AmazonS3Bucket\": \"\"\n\nName you selected for your S3 bucket in AWS.\n\n\n\"AmazonS3Region\": \"\"\n\nAWS region you selected for creating your S3 bucket. Refer to \nAWS Reference Documentation\n and choose this variable from the Region column.\n\n\nImage Settings\n\n\n\"ThumbnailWidth\": 120\n\nWidth of thumbnails generated from uploaded images. Updating this value changes how thumbnail images render in future, but does not change images created in the past.\n\n\n\"ThumbnailHeight\": 100\n\nHeight of thumbnails generated from uploaded images. Updating this value changes how thumbnail images render in future, but does not change images created in the past.\n\n\n\"PreviewWidth\": 1024\n\nMaximum width of preview image. Updating this value changes how preview images render in future, but does not change images created in the past.\n\n\n\"PreviewHeight\": 0\n\nMaximum height of preview image (\"0\": Sets to auto-size). Updating this value changes how preview images render in future, but does not change images created in the past.\n\n\n\"ProfileWidth\": 128\n\nThe width to which profile pictures are resized after being uploaded via Account Settings.\n\n\n\"ProfileHeight\": 128\n\nThe height to which profile pictures are resized after being uploaded via Account Settings.\n\n\n\"EnablePublicLink\": true\n\n\u201dtrue\u201d: Allow users to share public links to files and images when previewing; \u201cfalse\u201d: The Get Public Link option is hidden from the image preview user interface.\n\n\n\"PublicLinkSalt\": \"A705AklYF8MFDOfcwh3I488G8vtLlVip\"\n\n32-character (to be randomly generated via Admin Console) salt added to signing of public image links.\n\n\nLog Settings\n\n\nSettings to configure the console and log file output, detail level, format and location of error messages.\n\n\nConsole Settings\n\n\n\"EnableConsole\": true\n\n\u201ctrue\u201d: Output log messages to the console based on \nConsoleLevel\n option. The server writes messages to the standard output stream (stdout).\n\n\n\"ConsoleLevel\": \"DEBUG\"\n\nLevel of detail at which log events are written to the console when \nEnableConsole\n=true. \u201dERROR\u201d: Outputs only error messages; \u201cINFO\u201d: Outputs error messages and information around startup and initialization; \u201cDEBUG\u201d: Prints high detail for developers debugging issues.\n\n\nLog File Settings\n\n\n\"EnableFile\": true\n\n\u201dtrue\u201d:  Log files are written to files specified in \nFileLocation\n.\n\n\n\"FileLevel\": \"INFO\"\n\nLevel of detail at which log events are written to log files when \nEnableFile\n=true. \u201cERROR\u201d: Outputs only error messages; \u201cINFO\u201d: Outputs error messages and information around startup and initialization; \u201cDEBUG\u201d: Prints high detail for developers debugging issues.\n\n\n\"FileFormat\": \"\"\n\nFormat of log message output. If blank, \nFileFormat\n = \"[%D %T] [%L] (%S) %M\", where: \n\n\n%T      Time (15:04:05 MST) \n%t      Time (15:04) \n%D      Date (2006/01/02) \n%d      Date (01/02/06) \n%L      Level (FNST, FINE, DEBG, TRAC, WARN, EROR, CRIT) \n%S      Source \n%M      Message\n\n\n\n\"FileLocation\": \"\"\n\nDirectory to which log files are written. If blank, log files write to ./logs/mattermost/mattermost.log. Log rotation is enabled and every 10,000 lines of log information is written to new files stored in the same directory, for example mattermost.2015-09-23.001, mattermost.2015-09-23.002, and so forth.\n\n\nRate Limit Settings\n\n\nSettings to enable API rate limiting and configure requests per second, user sessions and variables for rate limiting. Changing properties in this section will require a server restart before taking effect.\n\n\n\"EnableRateLimiter\": true\n\n\u201dtrue\u201d: APIs are throttled at the rate specified by \nPerSec\n.\n\n\n\"PerSec\": 10\n\nThrottle API at this number of requests per second if \nEnableRateLimiter\n=true.\n\n\n\"MemoryStoreSize\": 10000\n\nMaximum number of user sessions connected to the system as determined by \nVaryByRemoteAddr\n and \nVaryByHeader\n variables.\n\n\n\"VaryByRemoteAddr\": true\n\n\"true\": Rate limit API access by IP address.\n\n\n\"VaryByHeader\": \"\"\n\nVary rate limiting by HTTP header field specified (e.g. when configuring Ngnix set to \"X-Real-IP\", when configuring AmazonELB set to \"X-Forwarded-For\").\n\n\nPrivacy Settings\n\n\nSettings to configure the name and email privacy of users on your system.  \n\n\n\"ShowEmailAddress\": true\n\n\u201ctrue\u201d: Show email address of all users; \"false\": Hide email address of users from other users in the user interface, including team owners and team administrators. This is designed for managing teams where users choose to keep their contact information private.\n\n\n\"ShowFullName\": true\n\n\u201dtrue\u201d: Show full name of all users; \u201cfalse\u201d: hide full name of users from other users including team owner and team administrators.\n\n\nGitLab Settings\n\n\nSettings to configure account and team creation using GitLab OAuth.\n\n\n\"Enable\": false\n\n\u201ctrue\u201d: Allow team creation and account signup using GitLab OAuth. To configure, input the \nSecret\n and \nId\n credentials. \n\n\n\"Secret\": \"\"\n\nObtain this value by logging into your GitLab account. Go to Profile Settings -\n Applications -\n New Application, enter a Name, then enter Redirect URLs \"https://\n/login/gitlab/complete\" (example: https://example.com:8065/login/gitlab/complete) and \"https://\n/signup/gitlab/complete\".\n\n\n\"Id\": \"\"\n\nObtain this value by logging into your GitLab account. Go to Profile Settings -\n Applications -\n New Application, enter a Name, then enter Redirect URLs \"https://\n/login/gitlab/complete\" (example: https://example.com:8065/login/gitlab/complete) and \"https://\n/signup/gitlab/complete\".\n\n\n\"AuthEndpoint\": \"\"\n\nEnter https://\n/oauth/authorize (example: https://example.com:3000/oauth/authorize). Use HTTP or HTTPS depending on how your server is configured.\n\n\n\"TokenEndpoint\": \"\"\n\nEnter https://\n/oauth/authorize (example: https://example.com:3000/oauth/token). Use HTTP or HTTPS depending on how your server is configured.\n\n\n\"UserApiEndpoint\": \"\"\n\nEnter https://\n/oauth/authorize (example: https://example.com:3000/api/v3/user). Use HTTP or HTTPS depending on how your server is configured.\n\n\nConfig.json Settings Not in System Console\n\n\nSystem Console allows an IT Admin to update settings defined in \nconfig.json\n. However there are a number of settings in \nconfig.json\n unavailable in the System Console and require update from the file itself. We describe them here: \n\n\nService Settings\n\n\n\"EnableOAuthServiceProvider\": false\n\n\u201dtrue\u201d: Allow Mattermost to function as an OAuth provider, allowing 3rd party apps access to your user store for authentication.\n\n\nPush Notification Settings\n\n\n\"ApplePushServer\": \"\"\n\nSetting for features in development.\n\n\n\"ApplePushCertPublic\": \"\"\n\nSetting for features in development.\n\n\n\"ApplePushCertPrivate\": \"\"\n\nSetting for features in development.\n\n\nFile Settings\n\n\n\"InitialFont\": \"luximbi.ttf\"\n\nFont used in auto-generated profile pics with colored backgrounds.\n\n\nGitLab Settings\n\n\n\"Scope\": \"\"\n\nStandard setting for OAuth to determine the scope of information shared with OAuth client. Not currently supported by GitLab OAuth.", 
            "title": "Configuration Settings"
        }, 
        {
            "location": "/install/Configuration-Settings/index.html#system-console-settings", 
            "text": "The System Console user interface lets system administrators manage a Mattermost server and multiple teams from a web-based user interface. The first user added to a new Mattermost install is assigned the system administrator role and can access the System Console from the main menu of any team. Setting changes in the System Console are stored in  config.json .   Service Settings  General settings to configure the listening address, login security, testing, webhooks and service integration of Mattermost.   System  \"ListenAddress\": \":8065\" \nThe IP address on which to listen and the port on which to bind. Entering \":8065\" will bind to all interfaces or you can choose one like \"127.0.0.1:8065\". Changing this will require a server restart before taking effect.  \"MaximumLoginAttempts\": 10 \nFailed login attempts allowed before a user is locked out and required to reset their password via email.  \"SegmentDeveloperKey\": \"\" \nFor users running SaaS services, signup for a key at Segment.com to track metrics.  \"GoogleDeveloperKey\": \"\" \nSet this key to enable embedding of YouTube video previews based on hyperlinks appearing in messages or comments. Instructions to obtain a key available at https://www.youtube.com/watch?v=Im69kzhpR3I. Leaving the field blank disables the automatic generation of YouTube video previews from links.  \"EnableTesting\": false \n\"true\":  /loadtest  slash command is enabled to load test accounts and test data.  \"EnableSecurityFixAlert\": true \n\u201dtrue\u201d: System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.  Webhooks  \"EnableIncomingWebhooks\": true \nDevelopers building integrations can create webhook URLs for channels and private groups. Please see http://mattermost.org/webhooks to learn about creating webhooks, view samples, and to let the community know about integrations you have built. \"true\": Incoming webhooks will be allowed. To manage incoming webhooks, go to Account Settings -  Integrations. The webhook URLs created in Account Settings can be used by external applications to create posts in any channels or private groups that you have access to; \u201cfalse\u201d: The Integrations tab of Account Settings is hidden and incoming webhooks are disabled.  Security note: By enabling this feature, users may be able to perform  phishing attacks  by attempting to impersonate other users. To combat these attacks, a BOT tag appears next to all posts from a webhook. Enable at your own risk.  \"EnablePostUsernameOverride\": false \n\"true\": Webhooks will be allowed to change the username they are posting as; \u201cfalse\u201d: Webhooks can only post as the username they were set up with. See http://mattermost.org/webhooks for more details.  \"EnablePostIconOverride\": false \n\"true\": Webhooks will be allowed to change the icon they post with; \u201cfalse\u201d: Webhooks can only post with the profile picture of the account they were set up with. See http://mattermost.org/webhooks for more details.  Team Settings  Settings to configure the appearance, size, and access options for teams.  \"SiteName\": \"Mattermost\" \nName of service shown in login screens and UI.  \"MaxUsersPerTeam\": 50 \nMaximum number of users per team, including both active and inactive users.  \"EnableTeamCreation\": true \n\"true\": Ability to create a new team is enabled for all users; \u201cfalse\u201d: the ability to create teams is disabled. The Create A New Team button is hidden in the main menu UI.  \"EnableUserCreation\": true \n\"true\": Ability to create new accounts is enabled via inviting new members or sharing the team invite link; \u201cfalse\u201d: the ability to create accounts is disabled. The create account button displays an error when trying to signup via an email invite or team invite link.  \"RestrictCreationToDomains\": \"\" \nTeams can only be created by a verified email from this list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\").  SQL Settings  Settings to configure the data sources, connections, and encryption of SQL databases. Changing properties in this section will require a server restart before taking effect.   \"DriverName\": \"mysql\" \n\"mysql\": enables driver to MySQL database; \"postgres\": enables driver to PostgreSQL database. This setting can only be changed from config.json file, it cannot be changed from the System Console user interface.  \"DataSource\": \"mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8\" \nThis is the connection string to the master database. When  DriverName =\"postgres\" then use a connection string in the form \u201cpostgres://mmuser:password@localhost:5432/mattermost_test?sslmode=disable connect_timeout=10\u201d. This setting can only be changed from config.json file, it cannot be changed from the System Console user interface.  \"DataSourceReplicas\": [] \nThis is a list of connection strings pointing to read replicas of MySQL or PostgreSQL database.  If running a single server, set to DataSource. This setting can only be changed from config.json file, it cannot be changed from the System Console user interface.  \"MaxIdleConns\": 10 \nMaximum number of idle connections held open to the database.  \"MaxOpenConns\": 10 \nMaximum number of open connections held open to the database.  \"Trace\": false \n\"true\": Executing SQL statements are written to the log for development.  \"AtRestEncryptKey\": \"7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QVg\" \n32-character (to be randomly generated via Admin Console) salt available to encrypt and decrypt sensitive fields in database.  Email Settings  Settings to configure email signup, notifications, security, and SMTP options.   Signup  \"EnableSignUpWithEmail\": true \n\"true\": Allow team creation and account signup using email and password; \u201cfalse\u201d: Email signup is disabled and users are not able to invite new members. This limits signup to single-sign-on services like OAuth or LDAP.  Notifications  \"SendEmailNotifications\": false \n\"true\": Enables sending of email notifications. \u201cfalse\u201d: Disables email notifications for developers who may want to skip email setup for faster development.  \"RequireEmailVerification\": false \n\"true\": Require email verification after account creation prior to allowing login; \u201cfalse\u201d: Users do not need to verify their email address prior to login. Developers may set this field to false so skip sending verification emails for faster development.  \"FeedbackName\": \"\" \nName displayed on email account used when sending notification emails from Mattermost system.  \"FeedbackEmail\": \"\" \nAddress displayed on email account used when sending notification emails from Mattermost system.  SMTP  \"SMTPUsername\": \"\" \nObtain this credential from the administrator setting up your email server.  \"SMTPPassword\": \"\" \nObtain this credential from the administrator setting up your email server.  \"SMTPServer\": \"\" \nLocation of SMTP email server.  \"SMTPPort\": \"\" \nPort of SMTP email server.  Security  \"ConnectionSecurity\": \"\" \n\"none\": Send email over an unsecure connection; \"TLS\": Communication between Mattermost and your email server is encrypted; \u201cSTARTTLS\u201d: Attempts to upgrade an existing insecure connection to a secure connection using TLS.  \"InviteSalt\": \"bjlSR4QqkXFBr7TP4oDzlfZmcNuH9YoS\" \n32-character (to be randomly generated via Admin Console) salt added to signing of email invites.  \"PasswordResetSalt\": \"vZ4DcKyVVRlKHHJpexcuXzojkE5PZ5eL\" \n32-character (to be randomly generated via Admin Console) salt added to signing of password reset emails.  File Settings  Settings to configure storage, appearance, and security of files and images.  File Storage  \"DriverName\": \"local\" \nSystem used for file storage. \u201clocal\u201d: Files and images are stored on the local file system. \u201camazons3\u201d: Files and images are stored on Amazon S3 based on the provided access key, bucket and region fields.  \"Directory\": \"./data/\" \nDirectory to which files are written. If blank, directory will be set to ./data/.  \"AmazonS3AccessKeyId\": \"\" \nObtain this credential from your Amazon EC2 administrator.  \"AmazonS3SecretAccessKey\": \"\" \nObtain this credential from your Amazon EC2 administrator.  \"AmazonS3Bucket\": \"\" \nName you selected for your S3 bucket in AWS.  \"AmazonS3Region\": \"\" \nAWS region you selected for creating your S3 bucket. Refer to  AWS Reference Documentation  and choose this variable from the Region column.  Image Settings  \"ThumbnailWidth\": 120 \nWidth of thumbnails generated from uploaded images. Updating this value changes how thumbnail images render in future, but does not change images created in the past.  \"ThumbnailHeight\": 100 \nHeight of thumbnails generated from uploaded images. Updating this value changes how thumbnail images render in future, but does not change images created in the past.  \"PreviewWidth\": 1024 \nMaximum width of preview image. Updating this value changes how preview images render in future, but does not change images created in the past.  \"PreviewHeight\": 0 \nMaximum height of preview image (\"0\": Sets to auto-size). Updating this value changes how preview images render in future, but does not change images created in the past.  \"ProfileWidth\": 128 \nThe width to which profile pictures are resized after being uploaded via Account Settings.  \"ProfileHeight\": 128 \nThe height to which profile pictures are resized after being uploaded via Account Settings.  \"EnablePublicLink\": true \n\u201dtrue\u201d: Allow users to share public links to files and images when previewing; \u201cfalse\u201d: The Get Public Link option is hidden from the image preview user interface.  \"PublicLinkSalt\": \"A705AklYF8MFDOfcwh3I488G8vtLlVip\" \n32-character (to be randomly generated via Admin Console) salt added to signing of public image links.  Log Settings  Settings to configure the console and log file output, detail level, format and location of error messages.  Console Settings  \"EnableConsole\": true \n\u201ctrue\u201d: Output log messages to the console based on  ConsoleLevel  option. The server writes messages to the standard output stream (stdout).  \"ConsoleLevel\": \"DEBUG\" \nLevel of detail at which log events are written to the console when  EnableConsole =true. \u201dERROR\u201d: Outputs only error messages; \u201cINFO\u201d: Outputs error messages and information around startup and initialization; \u201cDEBUG\u201d: Prints high detail for developers debugging issues.  Log File Settings  \"EnableFile\": true \n\u201dtrue\u201d:  Log files are written to files specified in  FileLocation .  \"FileLevel\": \"INFO\" \nLevel of detail at which log events are written to log files when  EnableFile =true. \u201cERROR\u201d: Outputs only error messages; \u201cINFO\u201d: Outputs error messages and information around startup and initialization; \u201cDEBUG\u201d: Prints high detail for developers debugging issues.  \"FileFormat\": \"\" \nFormat of log message output. If blank,  FileFormat  = \"[%D %T] [%L] (%S) %M\", where:   %T      Time (15:04:05 MST) \n%t      Time (15:04) \n%D      Date (2006/01/02) \n%d      Date (01/02/06) \n%L      Level (FNST, FINE, DEBG, TRAC, WARN, EROR, CRIT) \n%S      Source \n%M      Message  \"FileLocation\": \"\" \nDirectory to which log files are written. If blank, log files write to ./logs/mattermost/mattermost.log. Log rotation is enabled and every 10,000 lines of log information is written to new files stored in the same directory, for example mattermost.2015-09-23.001, mattermost.2015-09-23.002, and so forth.  Rate Limit Settings  Settings to enable API rate limiting and configure requests per second, user sessions and variables for rate limiting. Changing properties in this section will require a server restart before taking effect.  \"EnableRateLimiter\": true \n\u201dtrue\u201d: APIs are throttled at the rate specified by  PerSec .  \"PerSec\": 10 \nThrottle API at this number of requests per second if  EnableRateLimiter =true.  \"MemoryStoreSize\": 10000 \nMaximum number of user sessions connected to the system as determined by  VaryByRemoteAddr  and  VaryByHeader  variables.  \"VaryByRemoteAddr\": true \n\"true\": Rate limit API access by IP address.  \"VaryByHeader\": \"\" \nVary rate limiting by HTTP header field specified (e.g. when configuring Ngnix set to \"X-Real-IP\", when configuring AmazonELB set to \"X-Forwarded-For\").  Privacy Settings  Settings to configure the name and email privacy of users on your system.    \"ShowEmailAddress\": true \n\u201ctrue\u201d: Show email address of all users; \"false\": Hide email address of users from other users in the user interface, including team owners and team administrators. This is designed for managing teams where users choose to keep their contact information private.  \"ShowFullName\": true \n\u201dtrue\u201d: Show full name of all users; \u201cfalse\u201d: hide full name of users from other users including team owner and team administrators.  GitLab Settings  Settings to configure account and team creation using GitLab OAuth.  \"Enable\": false \n\u201ctrue\u201d: Allow team creation and account signup using GitLab OAuth. To configure, input the  Secret  and  Id  credentials.   \"Secret\": \"\" \nObtain this value by logging into your GitLab account. Go to Profile Settings -  Applications -  New Application, enter a Name, then enter Redirect URLs \"https:// /login/gitlab/complete\" (example: https://example.com:8065/login/gitlab/complete) and \"https:// /signup/gitlab/complete\".  \"Id\": \"\" \nObtain this value by logging into your GitLab account. Go to Profile Settings -  Applications -  New Application, enter a Name, then enter Redirect URLs \"https:// /login/gitlab/complete\" (example: https://example.com:8065/login/gitlab/complete) and \"https:// /signup/gitlab/complete\".  \"AuthEndpoint\": \"\" \nEnter https:// /oauth/authorize (example: https://example.com:3000/oauth/authorize). Use HTTP or HTTPS depending on how your server is configured.  \"TokenEndpoint\": \"\" \nEnter https:// /oauth/authorize (example: https://example.com:3000/oauth/token). Use HTTP or HTTPS depending on how your server is configured.  \"UserApiEndpoint\": \"\" \nEnter https:// /oauth/authorize (example: https://example.com:3000/api/v3/user). Use HTTP or HTTPS depending on how your server is configured.", 
            "title": "System Console Settings"
        }, 
        {
            "location": "/install/Configuration-Settings/index.html#configjson-settings-not-in-system-console", 
            "text": "System Console allows an IT Admin to update settings defined in  config.json . However there are a number of settings in  config.json  unavailable in the System Console and require update from the file itself. We describe them here:   Service Settings  \"EnableOAuthServiceProvider\": false \n\u201dtrue\u201d: Allow Mattermost to function as an OAuth provider, allowing 3rd party apps access to your user store for authentication.  Push Notification Settings  \"ApplePushServer\": \"\" \nSetting for features in development.  \"ApplePushCertPublic\": \"\" \nSetting for features in development.  \"ApplePushCertPrivate\": \"\" \nSetting for features in development.  File Settings  \"InitialFont\": \"luximbi.ttf\" \nFont used in auto-generated profile pics with colored backgrounds.  GitLab Settings  \"Scope\": \"\" \nStandard setting for OAuth to determine the scope of information shared with OAuth client. Not currently supported by GitLab OAuth.", 
            "title": "Config.json Settings Not in System Console"
        }, 
        {
            "location": "/install/Docker-Single-Container/index.html", 
            "text": "Local Machine Setup and Upgrade\n\n\nThe following install instructions are for single-container installs of Mattermost using Docker for exploring product functionality and upgrading to newer versions.\n\n\nOne-line Docker Install\n\n\nIf you have Docker set up, Mattermost installs in one-line:\n\n\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform\n\n\nOtherwise, see step-by-step available: \n\n\nMac OSX\n\n\n\n\nInstall Docker Toolbox using instructions at: http://docs.docker.com/installation/mac/  \n\n\nStart Docker Toolbox from the command line and run: \ndocker-machine create -d virtualbox dev\n  \n\n\n\n\n\n\nGet your Docker IP address with: \ndocker-machine ip dev\n\n\nUse \nsudo nano /etc/hosts\n to add \nDocker IP\n dockerhost\n to your /etc/hosts file \n\n\nRun: \ndocker-machine env dev\n and copy the export statements to your ~/.bash_profile by running \nsudo nano ~/.bash_profile\n. Then run: \nsource ~/.bash_profile\n\n\nRun: \ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform\n\n\nWhen docker is done fetching the image, open http://dockerhost:8065/ in your browser.\n\n\n\n\nUbuntu\n\n\n\n\n\n\nFollow the instructions at https://docs.docker.com/installation/ubuntulinux/ or use the summary below:\n\n\nbash\nsudo apt-get update\nsudo apt-get install wget\nwget -qO- https://get.docker.com/ | sh\nsudo usermod -aG docker \nusername\n\nsudo service docker start\nnewgrp docker\n\n\n\n\n\n\nStart docker container:\n\n\nbash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform\n\n\n\n\n\n\nWhen docker is done fetching the image, open http://localhost:8065/ in your browser.\n\n\n\n\n\n\nArch\n\n\n\n\n\n\nInstall Docker using the following commands:\n\n\nbash\npacman -S docker\nsystemctl enable docker.service\nsystemctl start docker.service\ngpasswd -a \nusername\n docker\nnewgrp docker\n\n\n\n\n\n\nStart Docker container:\n\n\nbash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform\n\n\n\n\n\n\nWhen Docker is done fetching the image, open http://localhost:8065/ in your browser.\n\n\n\n\n\n\nAdditional Notes\n\n\n\n\n\n\nIf you want to work with the latest master from the repository (i.e. not a stable release) you can run the cmd:  \n\n\nbash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform:dev\n\n\n\n\n\n\nInstructions on how to update your Docker image are found below. \n\n\n\n\n\n\nIf you wish to remove mattermost-dev use:   \n\n\nbash\ndocker stop mattermost-dev\ndocker rm -v mattermost-dev\n\n\n\n\n\n\nIf you wish to gain access to a shell on the container use:  \n\n\nbash\ndocker exec -ti mattermost-dev /bin/bash\n\n\n\n\n\n\nConfiguration Settings\n\n\nThere are a few configuration settings you might want to adjust when setting up your instance of Mattermost. You can edit them in \nconfig.json\n or \nconfig_docker.json\n if you're running a Docker instance.\n\n\n\n\nEmailSettings\n:\nByPassEmail\n - If this is set to true, then users on the system will not need to verify their email addresses when signing up. In addition, no emails will ever be sent.  \n\n\nServiceSettings\n:\nUseLocalStorage\n - If this is set to true, then your Mattermost server will store uploaded files in the storage directory specified by \nStorageDirectory\n. \nStorageDirectory\n must be set if \nUseLocalStorage\n is set to true.  \n\n\nServiceSettings\n:\nStorageDirectory\n - The file path where files will be stored locally if \nUseLocalStorage\n is set to true. The operating system user that is running the Mattermost application must have read and write privileges to this directory.  \n\n\nAWSSettings\n:\nS3\n* - If \nUseLocalStorage\n is set to false, and the S3 settings are configured here, then Mattermost will store files in the provided S3 bucket.\n\n\n\n\n(Recommended) Enable Email\n\n\nThe default single-container Docker instance for Mattermost is designed for product evaluation, and sets \nByPassEmail=true\n so the product can run without enabling email, when doing so maybe difficult. \n\n\nTo see the product's full functionality, \nenabling SMTP email is recommended\n.\n\n\nUpgrading Mattermost\n\n\nDocker\n\n\nTo upgrade your Docker image to a preview of the latest stable release (NOTE: this will erase all data in the Docker container, including the database):\n\n\n\n\n\n\nStop your Docker container by running: \n\n\nbash\ndocker stop mattermost-dev\n\n2. Delete your Docker container by running:\n\n\nbash\ndocker rm mattermost-dev\n\n3. Update your Docker image by running:\n\n\nbash\ndocker pull mattermost/platform\n\n4. Start your Docker container by running:\n\n\nbash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform\n\n\n\n\n\n\nTo upgrade to the latest development build on master from the repository replace \nmattermost/platform\n with \nmattermost/platform:dev\n in the instructions 3) and 4) above.", 
            "title": "Docker Single Container"
        }, 
        {
            "location": "/install/Docker-Single-Container/index.html#local-machine-setup-and-upgrade", 
            "text": "The following install instructions are for single-container installs of Mattermost using Docker for exploring product functionality and upgrading to newer versions.  One-line Docker Install  If you have Docker set up, Mattermost installs in one-line:  docker run --name mattermost-dev -d --publish 8065:80 mattermost/platform  Otherwise, see step-by-step available:   Mac OSX   Install Docker Toolbox using instructions at: http://docs.docker.com/installation/mac/    Start Docker Toolbox from the command line and run:  docker-machine create -d virtualbox dev       Get your Docker IP address with:  docker-machine ip dev  Use  sudo nano /etc/hosts  to add  Docker IP  dockerhost  to your /etc/hosts file   Run:  docker-machine env dev  and copy the export statements to your ~/.bash_profile by running  sudo nano ~/.bash_profile . Then run:  source ~/.bash_profile  Run:  docker run --name mattermost-dev -d --publish 8065:80 mattermost/platform  When docker is done fetching the image, open http://dockerhost:8065/ in your browser.   Ubuntu    Follow the instructions at https://docs.docker.com/installation/ubuntulinux/ or use the summary below:  bash\nsudo apt-get update\nsudo apt-get install wget\nwget -qO- https://get.docker.com/ | sh\nsudo usermod -aG docker  username \nsudo service docker start\nnewgrp docker    Start docker container:  bash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform    When docker is done fetching the image, open http://localhost:8065/ in your browser.    Arch    Install Docker using the following commands:  bash\npacman -S docker\nsystemctl enable docker.service\nsystemctl start docker.service\ngpasswd -a  username  docker\nnewgrp docker    Start Docker container:  bash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform    When Docker is done fetching the image, open http://localhost:8065/ in your browser.    Additional Notes    If you want to work with the latest master from the repository (i.e. not a stable release) you can run the cmd:    bash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform:dev    Instructions on how to update your Docker image are found below.     If you wish to remove mattermost-dev use:     bash\ndocker stop mattermost-dev\ndocker rm -v mattermost-dev    If you wish to gain access to a shell on the container use:    bash\ndocker exec -ti mattermost-dev /bin/bash", 
            "title": "Local Machine Setup and Upgrade"
        }, 
        {
            "location": "/install/Docker-Single-Container/index.html#configuration-settings", 
            "text": "There are a few configuration settings you might want to adjust when setting up your instance of Mattermost. You can edit them in  config.json  or  config_docker.json  if you're running a Docker instance.   EmailSettings : ByPassEmail  - If this is set to true, then users on the system will not need to verify their email addresses when signing up. In addition, no emails will ever be sent.    ServiceSettings : UseLocalStorage  - If this is set to true, then your Mattermost server will store uploaded files in the storage directory specified by  StorageDirectory .  StorageDirectory  must be set if  UseLocalStorage  is set to true.    ServiceSettings : StorageDirectory  - The file path where files will be stored locally if  UseLocalStorage  is set to true. The operating system user that is running the Mattermost application must have read and write privileges to this directory.    AWSSettings : S3 * - If  UseLocalStorage  is set to false, and the S3 settings are configured here, then Mattermost will store files in the provided S3 bucket.   (Recommended) Enable Email  The default single-container Docker instance for Mattermost is designed for product evaluation, and sets  ByPassEmail=true  so the product can run without enabling email, when doing so maybe difficult.   To see the product's full functionality,  enabling SMTP email is recommended .", 
            "title": "Configuration Settings"
        }, 
        {
            "location": "/install/Docker-Single-Container/index.html#upgrading-mattermost", 
            "text": "Docker  To upgrade your Docker image to a preview of the latest stable release (NOTE: this will erase all data in the Docker container, including the database):    Stop your Docker container by running:   bash\ndocker stop mattermost-dev \n2. Delete your Docker container by running:  bash\ndocker rm mattermost-dev \n3. Update your Docker image by running:  bash\ndocker pull mattermost/platform \n4. Start your Docker container by running:  bash\ndocker run --name mattermost-dev -d --publish 8065:80 mattermost/platform    To upgrade to the latest development build on master from the repository replace  mattermost/platform  with  mattermost/platform:dev  in the instructions 3) and 4) above.", 
            "title": "Upgrading Mattermost"
        }, 
        {
            "location": "/install/Production-Debian/index.html", 
            "text": "(Community Guide) Production Installation on Debian Jessie (x64)\n\n\nNote: This install guide has been generously contributed by the Mattermost community. It has not yet been tested by the core. We have \nan open ticket\n requesting community help testing and improving this guide. Once the community has confirmed we have multiple deployments on these instructions, we can update the text here. If you're installing on Debian anyway, please let us know any issues or instruciton improvements? https://github.com/mattermost/platform/issues/1185\n\n\nInstall Debian Jessie (x64)\n\n\n\n\nSet up 3 machines with Debian Jessie with 2GB of RAM or more.  The servers will be used for the Load Balancer, Mattermost (this must be x64 to use pre-built binaries), and Database.\n\n\nThis can also be set up all on a single server for small teams:\n\n\nI have a Mattermost instance running on a single Debian Jessie server with 1GB of ram and 30 GB SSD\n\n\nThis has been working in production for ~20 users without issue.\n\n\nThe only difference in the below instructions for this method is to do everything on the same server\n\n\nMake sure the system is up to date with the most recent security patches.\n\n\nsudo apt-get update\n\n\nsudo apt-get upgrade\n\n\n\n\nSet up Database Server\n\n\n\n\nFor the purposes of this guide we will assume this server has an IP address of 10.10.10.1\n\n\nInstall PostgreSQL 9.3+ (or MySQL 5.6+)\n\n\nsudo apt-get install postgresql postgresql-contrib\n\n\nPostgreSQL created a user account called \npostgres\n.  You will need to log into that account with:\n\n\nsudo -i -u postgres\n\n\nYou can get a PostgreSQL prompt by typing:\n\n\npsql\n\n\nCreate the Mattermost database by typing:\n\n\npostgres=# CREATE DATABASE mattermost;\n\n\nCreate the Mattermost user by typing:\n\n\npostgres=# CREATE USER mmuser WITH PASSWORD 'mmuser_password';\n\n\nGrant the user access to the Mattermost database by typing:\n\n\npostgres=# GRANT ALL PRIVILEGES ON DATABASE mattermost to mmuser;\n\n\nYou can exit out of PostgreSQL by typing:\n\n\npostgre=# \\q\n\n\nYou can exit the postgres account by typing:\n\n\nexit\n\n\n\n\nSet up Mattermost Server\n\n\n\n\nFor the purposes of this guide we will assume this server has an IP address of 10.10.10.2\n\n\nDownload the latest Mattermost Server by typing:\n\n\nwget https://github.com/mattermost/platform/releases/download/v1.1.0/mattermost.tar.gz\n\n\nInstall Mattermost under /opt\n\n\ncd /opt\n\n\nUnzip the Mattermost Server by typing:\n\n\ntar -xvzf mattermost.tar.gz\n\n\nCreate the storage directory for files.  We assume you will have attached a large drive for storage of images and files.  For this setup we will assume the directory is located at \n/mattermost/data\n.\n\n\nCreate the directory by typing:\n\n\nsudo mkdir -p /opt/mattermost/data\n\n\nCreate a system user and group called mattermost that will run this service\n\n\nuseradd -r mattermost -U\n\n\nSet the mattermost account as the directory owner by typing:\n\n\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n\nAdd yourself to the mattermost group to ensure you can edit these files:\n\n\nsudo usermod -aG mattermost USERNAME\n\n\nConfigure Mattermost Server by editing the config.json file at /opt/mattermost/config\n\n\ncd /opt/mattermost/config\n\n\nEdit the file by typing:\n\n\nvi config.json\n\n\nreplace \nDriverName\": \"mysql\"\n with \nDriverName\": \"postgres\"\n\n\nreplace \n\"DataSource\": \"mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8\"\n with \n\"DataSource\": \"postgres://mmuser:mmuser_password@10.10.10.1:5432/mattermost?sslmode=disable\nconnect_timeout=10\"\n\n\nOptionally you may continue to edit configuration settings in \nconfig.json\n or use the System Console described in a later section to finish the configuration.\n\n\nTest the Mattermost Server\n\n\ncd /opt/mattermost/bin\n\n\nRun the Mattermost Server by typing:\n\n\n./platform\n\n\nYou should see a console log like \nServer is listening on :8065\n letting you know the service is running.\n\n\nStop the server for now by typing \nctrl-c\n\n\nSetup Mattermost to use the systemd init daemon which handles supervision of the  Mattermost process\n\n\nsudo touch /etc/init.d/mattermost\n\n\nsudo vi /etc/init.d/mattermost\n\n\nCopy the following lines into \n/etc/init.d/mattermost\n\n\n\n\n#! /bin/sh\n### BEGIN INIT INFO\n# Provides:          mattermost\n# Required-Start:    $network $syslog\n# Required-Stop:     $network $syslog\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Mattermost Group Chat\n# Description:       Mattermost: An open-source Slack\n### END INIT INFO\n\nPATH=/sbin:/usr/sbin:/bin:/usr/bin\nDESC=\nMattermost\n\nNAME=mattermost\nMATTERMOST_ROOT=/opt/mattermost\nMATTERMOST_GROUP=mattermost\nMATTERMOST_USER=mattermost\nDAEMON=\n$MATTERMOST_ROOT/bin/platform\n\nPIDFILE=/var/run/$NAME.pid\nSCRIPTNAME=/etc/init.d/$NAME\n\n. /lib/lsb/init-functions\n\ndo_start() {\n    # Return\n    #   0 if daemon has been started\n    #   1 if daemon was already running\n    #   2 if daemon could not be started\n    start-stop-daemon --start --quiet \\\n        --chuid $MATTERMOST_USER:$MATTERMOST_GROUP --chdir $MATTERMOST_ROOT --background \\\n        --pidfile $PIDFILE --exec $DAEMON --test \n /dev/null \\\n        || return 1\n    start-stop-daemon --start --quiet \\\n        --chuid $MATTERMOST_USER:$MATTERMOST_GROUP --chdir $MATTERMOST_ROOT --background \\\n        --make-pidfile --pidfile $PIDFILE --exec $DAEMON \\\n        || return 2\n}\n\n#\n# Function that stops the daemon/service\n#\ndo_stop() {\n    # Return\n    #   0 if daemon has been stopped\n    #   1 if daemon was already stopped\n    #   2 if daemon could not be stopped\n    #   other if a failure occurred\n    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n        --pidfile $PIDFILE --exec $DAEMON\n    RETVAL=\n$?\n\n    [ \n$RETVAL\n = 2 ] \n return 2\n    # Wait for children to finish too if this is a daemon that forks\n    # and if the daemon is only ever run from this initscript.\n    # If the above conditions are not satisfied then add some other code\n    # that waits for the process to drop all resources that could be\n    # needed by services started subsequently.  A last resort is to\n    # sleep for some time.\n    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 \\\n        --exec $DAEMON\n    [ \n$?\n = 2 ] \n return 2\n    # Many daemons don't delete their pidfiles when they exit.\n    rm -f $PIDFILE\n    return \n$RETVAL\n\n}\n\ncase \n$1\n in\nstart)\n        [ \n$VERBOSE\n != no ] \n log_daemon_msg \nStarting $DESC\n \n$NAME\n\n        do_start\n        case \n$?\n in\n                0|1) [ \n$VERBOSE\n != no ] \n log_end_msg 0 ;;\n                2) [ \n$VERBOSE\n != no ] \n log_end_msg 1 ;;\n        esac\n        ;;\nstop)\n        [ \n$VERBOSE\n != no ] \n log_daemon_msg \nStopping $DESC\n \n$NAME\n\n        do_stop\n        case \n$?\n in\n                0|1) [ \n$VERBOSE\n != no ] \n log_end_msg 0 ;;\n                2) [ \n$VERBOSE\n != no ] \n log_end_msg 1 ;;\n        esac\n        ;;\nstatus)\n    status_of_proc \n$DAEMON\n \n$NAME\n \n exit 0 || exit $?\n    ;;\nrestart|force-reload)\n        #\n        # If the \nreload\n option is implemented then remove the\n        # 'force-reload' alias\n        #\n        log_daemon_msg \nRestarting $DESC\n \n$NAME\n\n        do_stop\n        case \n$?\n in\n        0|1)\n                do_start\n                case \n$?\n in\n                        0) log_end_msg 0 ;;\n                        1) log_end_msg 1 ;; # Old process is still running\n                        *) log_end_msg 1 ;; # Failed to start\n                esac\n                ;;\n        *)\n                # Failed to stop\n                log_end_msg 1\n                ;;\n        esac\n        ;;\n*)\n        echo \nUsage: $SCRIPTNAME {start|stop|status|restart|force-reload}\n \n2\n        exit 3\n        ;;\nesac\n\nexit 0\n\n\n\n\n\n\nMake sure that /etc/init.d/mattermost is executable\n\n\nchmod +x /etc/init.d/mattermost\n\n\nOn reboot, systemd will generate a unit file from the headers in this init script and install it in \n/run/systemd/generator.late/\n\n\n\n\nSet up Nginx Server\n\n\n\n\nFor the purposes of this guide we will assume this server has an IP address of 10.10.10.3\n\n\nWe use Nginx for proxying request to the Mattermost Server.  The main benefits are:\n\n\nSSL termination\n\n\nhttp to https redirect\n\n\nPort mapping :80 to :8065\n\n\nStandard request logs\n\n\nInstall Nginx on Debian with\n\n\nsudo apt-get install nginx\n\n\nVerify Nginx is running\n\n\ncurl http://10.10.10.3\n\n\nYou should see a \nWelcome to nginx!\n page\n\n\nYou can manage Nginx with the following commands\n\n\nsudo service nginx stop\n\n\nsudo service nginx start\n\n\nsudo service nginx restart\n\n\nMap a FQDN (fully qualified domain name) like \nmattermost.example.com\n to point to the Nginx server.\n\n\nConfigure Nginx to proxy connections from the internet to the Mattermost Server\n\n\nCreate a configuration for Mattermost\n\n\nsudo touch /etc/nginx/sites-available/mattermost\n\n\nBelow is a sample configuration with the minimum settings required to configure Mattermost\n ```\n   server {\n      server_name mattermost.example.com;\n      location / {\n          client_max_body_size 50M;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection \"upgrade\";\n          proxy_set_header Host $http_host;\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n          proxy_set_header X-Forwarded-Proto $scheme;\n          proxy_set_header   X-Frame-Options   SAMEORIGIN;\n          proxy_pass http://localhost:8065;\n      }\n    }\n\n\n\n\n  * Remove the existing file with\n  * ``` sudo rm /etc/nginx/sites-enabled/default```\n  * Link the mattermost config by typing:\n  * ```sudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost```\n  * Restart Nginx by typing:\n  * ``` sudo service nginx restart```\n  * Verify you can see Mattermost thru the proxy by typing:\n  * ``` curl http://localhost```\n  * You should see a page titles *Mattermost - Signup*\n\n## Set up Nginx with SSL (Recommended)\n1. You will need a SSL cert from a certificate authority.\n1. For simplicity we will generate a test certificate.\n  * ``` mkdir ~/cert```\n  * ``` cd ~/cert```\n  * ``` sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mattermost.key -out mattermost.crt```\n  * Input the following info \n\n\n\n\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:California\nLocality Name (eg, city) []:Palo Alto\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Example LLC\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:mattermost.example.com\nEmail Address []:admin@mattermost.example.com\n\n\n\n1. Modify the file at `/etc/nginx/sites-available/mattermost` and add the following lines\n  * \n\n\n\n\nserver {\n       listen         80;\n       server_name    mattermost.example.com;\n       return         301 https://$server_name$request_uri;\n  }\n\n\nserver {\n        listen 443 ssl;\n        server_name mattermost.example.com;\n\n\n    ssl on;\n    ssl_certificate /home/mattermost/cert/mattermost.crt;\n    ssl_certificate_key /home/mattermost/cert/mattermost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\";\n    ssl_prefer_server_ciphers on;\n\n    # add to location / above\n    location / {\n        gzip off;\n        proxy_set_header X-Forwarded-Ssl on;\n\n\n\n```\n\n\nFinish Mattermost Server setup\n\n\n\n\nNavigate to https://mattermost.example.com and create a team and user.\n\n\nThe first user in the system is automatically granted the \nsystem_admin\n role, which gives you access to the System Console.\n\n\nFrom the \ntown-square\n channel click the dropdown and choose the \nSystem Console\n option\n\n\nUpdate Email Settings.  We recommend using an email sending service.  The example below assumes AmazonSES.\n\n\nSet \nSend Email Notifications\n to true\n\n\nSet \nRequire Email Verification\n to true\n\n\nSet \nFeedback Name\n to \nNo-Reply\n\n\nSet \nFeedback Email\n to \nmattermost@example.com\n\n\nSet \nSMTP Username\n to \nAFIADTOVDKDLGERR\n\n\nSet \nSMTP Password\n to \nDFKJoiweklsjdflkjOIGHLSDFJewiskdjf\n\n\nSet \nSMTP Server\n to \nemail-smtp.us-east-1.amazonaws.com\n\n\nSet \nSMTP Port\n to \n465\n\n\nSet \nConnection Security\n to \nTLS\n\n\nSave the Settings\n\n\nUpdate File Settings\n\n\nChange \nLocal Directory Location\n from \n./data/\n to \n/mattermost/data\n\n\nUpdate Log Settings.\n\n\nSet \nLog to The Console\n to false  \n\n\nUpdate Rate Limit Settings.\n\n\nSet \nVary By Remote Address\n to false\n\n\nSet \nVary By HTTP Header\n to X-Real-IP\n\n\nFeel free to modify other settings.\n\n\nRestart the Mattermost Service by typing:\n\n\nsudo restart mattermost", 
            "title": "Production Debian"
        }, 
        {
            "location": "/install/Production-Debian/index.html#community-guide-production-installation-on-debian-jessie-x64", 
            "text": "Note: This install guide has been generously contributed by the Mattermost community. It has not yet been tested by the core. We have  an open ticket  requesting community help testing and improving this guide. Once the community has confirmed we have multiple deployments on these instructions, we can update the text here. If you're installing on Debian anyway, please let us know any issues or instruciton improvements? https://github.com/mattermost/platform/issues/1185", 
            "title": "(Community Guide) Production Installation on Debian Jessie (x64)"
        }, 
        {
            "location": "/install/Production-Debian/index.html#install-debian-jessie-x64", 
            "text": "Set up 3 machines with Debian Jessie with 2GB of RAM or more.  The servers will be used for the Load Balancer, Mattermost (this must be x64 to use pre-built binaries), and Database.  This can also be set up all on a single server for small teams:  I have a Mattermost instance running on a single Debian Jessie server with 1GB of ram and 30 GB SSD  This has been working in production for ~20 users without issue.  The only difference in the below instructions for this method is to do everything on the same server  Make sure the system is up to date with the most recent security patches.  sudo apt-get update  sudo apt-get upgrade", 
            "title": "Install Debian Jessie (x64)"
        }, 
        {
            "location": "/install/Production-Debian/index.html#set-up-database-server", 
            "text": "For the purposes of this guide we will assume this server has an IP address of 10.10.10.1  Install PostgreSQL 9.3+ (or MySQL 5.6+)  sudo apt-get install postgresql postgresql-contrib  PostgreSQL created a user account called  postgres .  You will need to log into that account with:  sudo -i -u postgres  You can get a PostgreSQL prompt by typing:  psql  Create the Mattermost database by typing:  postgres=# CREATE DATABASE mattermost;  Create the Mattermost user by typing:  postgres=# CREATE USER mmuser WITH PASSWORD 'mmuser_password';  Grant the user access to the Mattermost database by typing:  postgres=# GRANT ALL PRIVILEGES ON DATABASE mattermost to mmuser;  You can exit out of PostgreSQL by typing:  postgre=# \\q  You can exit the postgres account by typing:  exit", 
            "title": "Set up Database Server"
        }, 
        {
            "location": "/install/Production-Debian/index.html#set-up-mattermost-server", 
            "text": "For the purposes of this guide we will assume this server has an IP address of 10.10.10.2  Download the latest Mattermost Server by typing:  wget https://github.com/mattermost/platform/releases/download/v1.1.0/mattermost.tar.gz  Install Mattermost under /opt  cd /opt  Unzip the Mattermost Server by typing:  tar -xvzf mattermost.tar.gz  Create the storage directory for files.  We assume you will have attached a large drive for storage of images and files.  For this setup we will assume the directory is located at  /mattermost/data .  Create the directory by typing:  sudo mkdir -p /opt/mattermost/data  Create a system user and group called mattermost that will run this service  useradd -r mattermost -U  Set the mattermost account as the directory owner by typing:  sudo chown -R mattermost:mattermost /opt/mattermost  Add yourself to the mattermost group to ensure you can edit these files:  sudo usermod -aG mattermost USERNAME  Configure Mattermost Server by editing the config.json file at /opt/mattermost/config  cd /opt/mattermost/config  Edit the file by typing:  vi config.json  replace  DriverName\": \"mysql\"  with  DriverName\": \"postgres\"  replace  \"DataSource\": \"mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8\"  with  \"DataSource\": \"postgres://mmuser:mmuser_password@10.10.10.1:5432/mattermost?sslmode=disable connect_timeout=10\"  Optionally you may continue to edit configuration settings in  config.json  or use the System Console described in a later section to finish the configuration.  Test the Mattermost Server  cd /opt/mattermost/bin  Run the Mattermost Server by typing:  ./platform  You should see a console log like  Server is listening on :8065  letting you know the service is running.  Stop the server for now by typing  ctrl-c  Setup Mattermost to use the systemd init daemon which handles supervision of the  Mattermost process  sudo touch /etc/init.d/mattermost  sudo vi /etc/init.d/mattermost  Copy the following lines into  /etc/init.d/mattermost   #! /bin/sh\n### BEGIN INIT INFO\n# Provides:          mattermost\n# Required-Start:    $network $syslog\n# Required-Stop:     $network $syslog\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Mattermost Group Chat\n# Description:       Mattermost: An open-source Slack\n### END INIT INFO\n\nPATH=/sbin:/usr/sbin:/bin:/usr/bin\nDESC= Mattermost \nNAME=mattermost\nMATTERMOST_ROOT=/opt/mattermost\nMATTERMOST_GROUP=mattermost\nMATTERMOST_USER=mattermost\nDAEMON= $MATTERMOST_ROOT/bin/platform \nPIDFILE=/var/run/$NAME.pid\nSCRIPTNAME=/etc/init.d/$NAME\n\n. /lib/lsb/init-functions\n\ndo_start() {\n    # Return\n    #   0 if daemon has been started\n    #   1 if daemon was already running\n    #   2 if daemon could not be started\n    start-stop-daemon --start --quiet \\\n        --chuid $MATTERMOST_USER:$MATTERMOST_GROUP --chdir $MATTERMOST_ROOT --background \\\n        --pidfile $PIDFILE --exec $DAEMON --test   /dev/null \\\n        || return 1\n    start-stop-daemon --start --quiet \\\n        --chuid $MATTERMOST_USER:$MATTERMOST_GROUP --chdir $MATTERMOST_ROOT --background \\\n        --make-pidfile --pidfile $PIDFILE --exec $DAEMON \\\n        || return 2\n}\n\n#\n# Function that stops the daemon/service\n#\ndo_stop() {\n    # Return\n    #   0 if daemon has been stopped\n    #   1 if daemon was already stopped\n    #   2 if daemon could not be stopped\n    #   other if a failure occurred\n    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n        --pidfile $PIDFILE --exec $DAEMON\n    RETVAL= $? \n    [  $RETVAL  = 2 ]   return 2\n    # Wait for children to finish too if this is a daemon that forks\n    # and if the daemon is only ever run from this initscript.\n    # If the above conditions are not satisfied then add some other code\n    # that waits for the process to drop all resources that could be\n    # needed by services started subsequently.  A last resort is to\n    # sleep for some time.\n    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 \\\n        --exec $DAEMON\n    [  $?  = 2 ]   return 2\n    # Many daemons don't delete their pidfiles when they exit.\n    rm -f $PIDFILE\n    return  $RETVAL \n}\n\ncase  $1  in\nstart)\n        [  $VERBOSE  != no ]   log_daemon_msg  Starting $DESC   $NAME \n        do_start\n        case  $?  in\n                0|1) [  $VERBOSE  != no ]   log_end_msg 0 ;;\n                2) [  $VERBOSE  != no ]   log_end_msg 1 ;;\n        esac\n        ;;\nstop)\n        [  $VERBOSE  != no ]   log_daemon_msg  Stopping $DESC   $NAME \n        do_stop\n        case  $?  in\n                0|1) [  $VERBOSE  != no ]   log_end_msg 0 ;;\n                2) [  $VERBOSE  != no ]   log_end_msg 1 ;;\n        esac\n        ;;\nstatus)\n    status_of_proc  $DAEMON   $NAME    exit 0 || exit $?\n    ;;\nrestart|force-reload)\n        #\n        # If the  reload  option is implemented then remove the\n        # 'force-reload' alias\n        #\n        log_daemon_msg  Restarting $DESC   $NAME \n        do_stop\n        case  $?  in\n        0|1)\n                do_start\n                case  $?  in\n                        0) log_end_msg 0 ;;\n                        1) log_end_msg 1 ;; # Old process is still running\n                        *) log_end_msg 1 ;; # Failed to start\n                esac\n                ;;\n        *)\n                # Failed to stop\n                log_end_msg 1\n                ;;\n        esac\n        ;;\n*)\n        echo  Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}   2\n        exit 3\n        ;;\nesac\n\nexit 0   Make sure that /etc/init.d/mattermost is executable  chmod +x /etc/init.d/mattermost  On reboot, systemd will generate a unit file from the headers in this init script and install it in  /run/systemd/generator.late/", 
            "title": "Set up Mattermost Server"
        }, 
        {
            "location": "/install/Production-Debian/index.html#set-up-nginx-server", 
            "text": "For the purposes of this guide we will assume this server has an IP address of 10.10.10.3  We use Nginx for proxying request to the Mattermost Server.  The main benefits are:  SSL termination  http to https redirect  Port mapping :80 to :8065  Standard request logs  Install Nginx on Debian with  sudo apt-get install nginx  Verify Nginx is running  curl http://10.10.10.3  You should see a  Welcome to nginx!  page  You can manage Nginx with the following commands  sudo service nginx stop  sudo service nginx start  sudo service nginx restart  Map a FQDN (fully qualified domain name) like  mattermost.example.com  to point to the Nginx server.  Configure Nginx to proxy connections from the internet to the Mattermost Server  Create a configuration for Mattermost  sudo touch /etc/nginx/sites-available/mattermost  Below is a sample configuration with the minimum settings required to configure Mattermost\n ```\n   server {\n      server_name mattermost.example.com;\n      location / {\n          client_max_body_size 50M;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection \"upgrade\";\n          proxy_set_header Host $http_host;\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n          proxy_set_header X-Forwarded-Proto $scheme;\n          proxy_set_header   X-Frame-Options   SAMEORIGIN;\n          proxy_pass http://localhost:8065;\n      }\n    }     * Remove the existing file with\n  * ``` sudo rm /etc/nginx/sites-enabled/default```\n  * Link the mattermost config by typing:\n  * ```sudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost```\n  * Restart Nginx by typing:\n  * ``` sudo service nginx restart```\n  * Verify you can see Mattermost thru the proxy by typing:\n  * ``` curl http://localhost```\n  * You should see a page titles *Mattermost - Signup*\n\n## Set up Nginx with SSL (Recommended)\n1. You will need a SSL cert from a certificate authority.\n1. For simplicity we will generate a test certificate.\n  * ``` mkdir ~/cert```\n  * ``` cd ~/cert```\n  * ``` sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mattermost.key -out mattermost.crt```\n  * Input the following info   Country Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:California\nLocality Name (eg, city) []:Palo Alto\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Example LLC\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:mattermost.example.com\nEmail Address []:admin@mattermost.example.com  1. Modify the file at `/etc/nginx/sites-available/mattermost` and add the following lines\n  *   server {\n       listen         80;\n       server_name    mattermost.example.com;\n       return         301 https://$server_name$request_uri;\n  }  server {\n        listen 443 ssl;\n        server_name mattermost.example.com;      ssl on;\n    ssl_certificate /home/mattermost/cert/mattermost.crt;\n    ssl_certificate_key /home/mattermost/cert/mattermost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\";\n    ssl_prefer_server_ciphers on;\n\n    # add to location / above\n    location / {\n        gzip off;\n        proxy_set_header X-Forwarded-Ssl on;  ```", 
            "title": "Set up Nginx Server"
        }, 
        {
            "location": "/install/Production-Debian/index.html#finish-mattermost-server-setup", 
            "text": "Navigate to https://mattermost.example.com and create a team and user.  The first user in the system is automatically granted the  system_admin  role, which gives you access to the System Console.  From the  town-square  channel click the dropdown and choose the  System Console  option  Update Email Settings.  We recommend using an email sending service.  The example below assumes AmazonSES.  Set  Send Email Notifications  to true  Set  Require Email Verification  to true  Set  Feedback Name  to  No-Reply  Set  Feedback Email  to  mattermost@example.com  Set  SMTP Username  to  AFIADTOVDKDLGERR  Set  SMTP Password  to  DFKJoiweklsjdflkjOIGHLSDFJewiskdjf  Set  SMTP Server  to  email-smtp.us-east-1.amazonaws.com  Set  SMTP Port  to  465  Set  Connection Security  to  TLS  Save the Settings  Update File Settings  Change  Local Directory Location  from  ./data/  to  /mattermost/data  Update Log Settings.  Set  Log to The Console  to false    Update Rate Limit Settings.  Set  Vary By Remote Address  to false  Set  Vary By HTTP Header  to X-Real-IP  Feel free to modify other settings.  Restart the Mattermost Service by typing:  sudo restart mattermost", 
            "title": "Finish Mattermost Server setup"
        }, 
        {
            "location": "/install/Production-Ubuntu/index.html", 
            "text": "Production Installation on Ubuntu 14.04 LTS\n\n\nInstall Ubuntu Server (x64) 14.04 LTS\n\n\n\n\nSet up 3 machines with Ubuntu 14.04 with 2GB of RAM or more.  The servers will be used for the Load Balancer, Mattermost (this must be x64 to use pre-built binaries), and Database.\n\n\nMake sure the system is up to date with the most recent security patches.\n\n\nsudo apt-get update\n\n\nsudo apt-get upgrade\n\n\n\n\nSet up Database Server\n\n\n\n\nFor the purposes of this guide we will assume this server has an IP address of 10.10.10.1\n\n\nInstall PostgreSQL 9.3+ (or MySQL 5.6+)\n\n\nsudo apt-get install postgresql postgresql-contrib\n\n\nPostgreSQL created a user account called \npostgres\n.  You will need to log into that account with:\n\n\nsudo -i -u postgres\n\n\nYou can get a PostgreSQL prompt by typing:\n\n\npsql\n\n\nCreate the Mattermost database by typing:\n\n\npostgres=# CREATE DATABASE mattermost;\n\n\nCreate the Mattermost user by typing:\n\n\npostgres=# CREATE USER mmuser WITH PASSWORD 'mmuser_password';\n\n\nGrant the user access to the Mattermost database by typing:\n\n\npostgres=# GRANT ALL PRIVILEGES ON DATABASE mattermost to mmuser;\n\n\nYou can exit out of PostgreSQL by typing:\n\n\npostgre=# \\q\n\n\nYou can exit the postgres account by typing:\n\n\nexit\n\n\n\n\nSet up Mattermost Server\n\n\n\n\nFor the purposes of this guide we will assume this server has an IP address of 10.10.10.2\n\n\nDownload the latest Mattermost Server by typing:\n\n\nwget https://github.com/mattermost/platform/releases/download/v1.1.0/mattermost.tar.gz\n\n\nUnzip the Mattermost Server by typing:\n\n\ntar -xvzf mattermost.tar.gz\n\n\nFor the sake of making this guide simple we located the files at \n/home/ubuntu/mattermost\n. In the future we will give guidance for storing under \n/opt\n.\n\n\nWe have also elected to run the Mattermost Server as the \nubuntu\n account for simplicity.  We recommend setting up and running the service under a \nmattermost\n user account with limited permissions.\n\n\nCreate the storage directory for files.  We assume you will have attached a large drive for storage of images and files.  For this setup we will assume the directory is located at \n/mattermost/data\n.\n\n\nCreate the directory by typing:\n\n\nsudo mkdir -p /mattermost/data\n\n\nSet the ubuntu account as the directory owner by typing:\n\n\nsudo chown -R ubuntu /mattermost\n\n\nConfigure Mattermost Server by editing the config.json file at /home/ubuntu/mattermost/config`\n\n\ncd ~/mattermost/config\n\n\nEdit the file by typing:\n\n\nvi config.json\n\n\nreplace \nDriverName\": \"mysql\"\n with \nDriverName\": \"postgres\"\n\n\nreplace \n\"DataSource\": \"mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8\"\n with \n\"DataSource\": \"postgres://mmuser:mmuser_password@10.10.10.1:5432/mattermost?sslmode=disable\nconnect_timeout=10\"\n\n\nOptionally you may continue to edit configuration settings in \nconfig.json\n or use the System Console described in a later section to finish the configuration.\n\n\nTest the Mattermost Server\n\n\ncd ~/mattermost/bin\n\n\nRun the Mattermost Server by typing:\n\n\n./platform\n\n\nYou should see a console log like \nServer is listening on :8065\n letting you know the service is running.\n\n\nStop the server for now by typing \nctrl-c\n\n\nSetup Mattermost to use the Ubuntu Upstart daemon which handles supervision of the Mattermost process.\n\n\nsudo touch /etc/init/mattermost.conf\n\n\nsudo vi /etc/init/mattermost.conf\n\n\nCopy the following lines into \n/etc/init/mattermost.conf\n\n\n\n\nstart on runlevel [2345]\nstop on runlevel [016]\nrespawn\nchdir /home/ubuntu/mattermost\nsetuid ubuntu\nexec bin/platform\n\n\n\n\n\n\nYou can manage the process by typing:\n\n\nsudo start mattermost\n\n\nVerify the service is running by typing:\n\n\ncurl http://10.10.10.2:8065\n\n\nYou should see a page titles \nMattermost - Signup\n\n\nYou can also stop the process by running the command \nsudo stop mattermost\n, but we will skip this step for now.\n\n\n\n\nSet up Nginx Server\n\n\n\n\nFor the purposes of this guide we will assume this server has an IP address of 10.10.10.3\n\n\nWe use Nginx for proxying request to the Mattermost Server.  The main benefits are:\n\n\nSSL termination\n\n\nhttp to https redirect\n\n\nPort mapping :80 to :8065\n\n\nStandard request logs\n\n\nInstall Nginx on Ubuntu with\n\n\nsudo apt-get install nginx\n\n\nVerify Nginx is running\n\n\ncurl http://10.10.10.3\n\n\nYou should see a \nWelcome to nginx!\n page\n\n\nYou can manage Nginx with the following commands\n\n\nsudo service nginx stop\n\n\nsudo service nginx start\n\n\nsudo service nginx restart\n\n\nMap a FQDN (fully qualified domain name) like \nmattermost.example.com\n to point to the Nginx server.\n\n\nConfigure Nginx to proxy connections from the internet to the Mattermost Server\n\n\nCreate a configuration for Mattermost\n\n\nsudo touch /etc/nginx/sites-available/mattermost\n\n\nBelow is a sample configuration with the minimum settings required to configure Mattermost\n ```\n   server {\n      server_name mattermost.example.com;\n      location / {\n          client_max_body_size 50M;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection \"upgrade\";\n          proxy_set_header Host $http_host;\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n          proxy_set_header X-Forwarded-Proto $scheme;\n          proxy_set_header   X-Frame-Options   SAMEORIGIN;\n          proxy_pass http://10.10.10.2:8065;\n      }\n    }\n\n\n\n\n  * Remove the existing file with\n  * ``` sudo rm /etc/nginx/sites-enabled/default```\n  * Link the mattermost config by typing:\n  * ```sudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost```\n  * Restart Nginx by typing:\n  * ``` sudo service nginx restart```\n  * Verify you can see Mattermost thru the proxy by typing:\n  * ``` curl http://localhost```\n  * You should see a page titles *Mattermost - Signup*\n\n## Set up Nginx with SSL (Recommended)\n1. You will need a SSL cert from a certificate authority.\n2. For simplicity we will generate a test certificate.\n  * ``` mkdir ~/cert```\n  * ``` cd ~/cert```\n  * ``` sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mattermost.key -out mattermost.crt```\n  * Input the following info \n\n\n\n\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:California\nLocality Name (eg, city) []:Palo Alto\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Example LLC\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:mattermost.example.com\nEmail Address []:admin@mattermost.example.com\n\n\n\n3. Run `openssl dhparam -out dhparam.pem 4096` (it will take some time).\n4. Modify the file at `/etc/nginx/sites-available/mattermost` and add the following lines:\n\n\n\n\nserver {\n       listen         80;\n       server_name    mattermost.example.com;\n       return         301 https://$server_name$request_uri;\n  }\n\n\nserver {\n        listen 443 ssl;\n        server_name mattermost.example.com;\n\n\n    ssl on;\n    ssl_certificate /home/ubuntu/cert/mattermost.crt;\n    ssl_certificate_key /home/ubuntu/cert/mattermost.key;\n    ssl_dhparam /home/ubuntu/cert/dhparam.pem;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n    ssl_prefer_server_ciphers on;\n\n    # add to location / above\n    location / {\n        gzip off;\n        proxy_set_header X-Forwarded-Ssl on;\n\n\n\n```\n\n\nFinish Mattermost Server setup\n\n\n\n\nNavigate to https://mattermost.example.com and create a team and user.\n\n\nThe first user in the system is automatically granted the \nsystem_admin\n role, which gives you access to the System Console.\n\n\nFrom the \ntown-square\n channel click the dropdown and choose the \nSystem Console\n option\n\n\nUpdate Email Settings.  We recommend using an email sending service.  The example shows how an Amazon SES setup might look (sample credentials shown below are not real).\n\n\nSet \nSend Email Notifications\n to true\n\n\nSet \nRequire Email Verification\n to true\n\n\nSet \nFeedback Name\n to \nNo-Reply\n\n\nSet \nFeedback Email\n to \nmattermost@example.com\n\n\nSet \nSMTP Username\n to \nAFIADTOVDKDLGERR\n\n\nSet \nSMTP Password\n to \nDFKJoiweklsjdflkjOIGHLSDFJewiskdjf\n\n\nSet \nSMTP Server\n to \nemail-smtp.us-east-1.amazonaws.com\n\n\nSet \nSMTP Port\n to \n465\n\n\nSet \nConnection Security\n to \nTLS\n\n\nSave the Settings\n\n\nUpdate File Settings\n\n\nChange \nLocal Directory Location\n from \n./data/\n to \n/mattermost/data\n\n\nUpdate Log Settings.\n\n\nSet \nLog to The Console\n to false  \n\n\nUpdate Rate Limit Settings.\n\n\nSet \nVary By Remote Address\n to false\n\n\nSet \nVary By HTTP Header\n to X-Real-IP\n\n\nFeel free to modify other settings.\n\n\nRestart the Mattermost Service by typing:\n\n\nsudo restart mattermost", 
            "title": "Production Ubuntu"
        }, 
        {
            "location": "/install/Production-Ubuntu/index.html#production-installation-on-ubuntu-1404-lts", 
            "text": "", 
            "title": "Production Installation on Ubuntu 14.04 LTS"
        }, 
        {
            "location": "/install/Production-Ubuntu/index.html#install-ubuntu-server-x64-1404-lts", 
            "text": "Set up 3 machines with Ubuntu 14.04 with 2GB of RAM or more.  The servers will be used for the Load Balancer, Mattermost (this must be x64 to use pre-built binaries), and Database.  Make sure the system is up to date with the most recent security patches.  sudo apt-get update  sudo apt-get upgrade", 
            "title": "Install Ubuntu Server (x64) 14.04 LTS"
        }, 
        {
            "location": "/install/Production-Ubuntu/index.html#set-up-database-server", 
            "text": "For the purposes of this guide we will assume this server has an IP address of 10.10.10.1  Install PostgreSQL 9.3+ (or MySQL 5.6+)  sudo apt-get install postgresql postgresql-contrib  PostgreSQL created a user account called  postgres .  You will need to log into that account with:  sudo -i -u postgres  You can get a PostgreSQL prompt by typing:  psql  Create the Mattermost database by typing:  postgres=# CREATE DATABASE mattermost;  Create the Mattermost user by typing:  postgres=# CREATE USER mmuser WITH PASSWORD 'mmuser_password';  Grant the user access to the Mattermost database by typing:  postgres=# GRANT ALL PRIVILEGES ON DATABASE mattermost to mmuser;  You can exit out of PostgreSQL by typing:  postgre=# \\q  You can exit the postgres account by typing:  exit", 
            "title": "Set up Database Server"
        }, 
        {
            "location": "/install/Production-Ubuntu/index.html#set-up-mattermost-server", 
            "text": "For the purposes of this guide we will assume this server has an IP address of 10.10.10.2  Download the latest Mattermost Server by typing:  wget https://github.com/mattermost/platform/releases/download/v1.1.0/mattermost.tar.gz  Unzip the Mattermost Server by typing:  tar -xvzf mattermost.tar.gz  For the sake of making this guide simple we located the files at  /home/ubuntu/mattermost . In the future we will give guidance for storing under  /opt .  We have also elected to run the Mattermost Server as the  ubuntu  account for simplicity.  We recommend setting up and running the service under a  mattermost  user account with limited permissions.  Create the storage directory for files.  We assume you will have attached a large drive for storage of images and files.  For this setup we will assume the directory is located at  /mattermost/data .  Create the directory by typing:  sudo mkdir -p /mattermost/data  Set the ubuntu account as the directory owner by typing:  sudo chown -R ubuntu /mattermost  Configure Mattermost Server by editing the config.json file at /home/ubuntu/mattermost/config`  cd ~/mattermost/config  Edit the file by typing:  vi config.json  replace  DriverName\": \"mysql\"  with  DriverName\": \"postgres\"  replace  \"DataSource\": \"mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8\"  with  \"DataSource\": \"postgres://mmuser:mmuser_password@10.10.10.1:5432/mattermost?sslmode=disable connect_timeout=10\"  Optionally you may continue to edit configuration settings in  config.json  or use the System Console described in a later section to finish the configuration.  Test the Mattermost Server  cd ~/mattermost/bin  Run the Mattermost Server by typing:  ./platform  You should see a console log like  Server is listening on :8065  letting you know the service is running.  Stop the server for now by typing  ctrl-c  Setup Mattermost to use the Ubuntu Upstart daemon which handles supervision of the Mattermost process.  sudo touch /etc/init/mattermost.conf  sudo vi /etc/init/mattermost.conf  Copy the following lines into  /etc/init/mattermost.conf   start on runlevel [2345]\nstop on runlevel [016]\nrespawn\nchdir /home/ubuntu/mattermost\nsetuid ubuntu\nexec bin/platform   You can manage the process by typing:  sudo start mattermost  Verify the service is running by typing:  curl http://10.10.10.2:8065  You should see a page titles  Mattermost - Signup  You can also stop the process by running the command  sudo stop mattermost , but we will skip this step for now.", 
            "title": "Set up Mattermost Server"
        }, 
        {
            "location": "/install/Production-Ubuntu/index.html#set-up-nginx-server", 
            "text": "For the purposes of this guide we will assume this server has an IP address of 10.10.10.3  We use Nginx for proxying request to the Mattermost Server.  The main benefits are:  SSL termination  http to https redirect  Port mapping :80 to :8065  Standard request logs  Install Nginx on Ubuntu with  sudo apt-get install nginx  Verify Nginx is running  curl http://10.10.10.3  You should see a  Welcome to nginx!  page  You can manage Nginx with the following commands  sudo service nginx stop  sudo service nginx start  sudo service nginx restart  Map a FQDN (fully qualified domain name) like  mattermost.example.com  to point to the Nginx server.  Configure Nginx to proxy connections from the internet to the Mattermost Server  Create a configuration for Mattermost  sudo touch /etc/nginx/sites-available/mattermost  Below is a sample configuration with the minimum settings required to configure Mattermost\n ```\n   server {\n      server_name mattermost.example.com;\n      location / {\n          client_max_body_size 50M;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection \"upgrade\";\n          proxy_set_header Host $http_host;\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n          proxy_set_header X-Forwarded-Proto $scheme;\n          proxy_set_header   X-Frame-Options   SAMEORIGIN;\n          proxy_pass http://10.10.10.2:8065;\n      }\n    }     * Remove the existing file with\n  * ``` sudo rm /etc/nginx/sites-enabled/default```\n  * Link the mattermost config by typing:\n  * ```sudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost```\n  * Restart Nginx by typing:\n  * ``` sudo service nginx restart```\n  * Verify you can see Mattermost thru the proxy by typing:\n  * ``` curl http://localhost```\n  * You should see a page titles *Mattermost - Signup*\n\n## Set up Nginx with SSL (Recommended)\n1. You will need a SSL cert from a certificate authority.\n2. For simplicity we will generate a test certificate.\n  * ``` mkdir ~/cert```\n  * ``` cd ~/cert```\n  * ``` sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mattermost.key -out mattermost.crt```\n  * Input the following info   Country Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:California\nLocality Name (eg, city) []:Palo Alto\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Example LLC\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:mattermost.example.com\nEmail Address []:admin@mattermost.example.com  3. Run `openssl dhparam -out dhparam.pem 4096` (it will take some time).\n4. Modify the file at `/etc/nginx/sites-available/mattermost` and add the following lines:  server {\n       listen         80;\n       server_name    mattermost.example.com;\n       return         301 https://$server_name$request_uri;\n  }  server {\n        listen 443 ssl;\n        server_name mattermost.example.com;      ssl on;\n    ssl_certificate /home/ubuntu/cert/mattermost.crt;\n    ssl_certificate_key /home/ubuntu/cert/mattermost.key;\n    ssl_dhparam /home/ubuntu/cert/dhparam.pem;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n    ssl_prefer_server_ciphers on;\n\n    # add to location / above\n    location / {\n        gzip off;\n        proxy_set_header X-Forwarded-Ssl on;  ```", 
            "title": "Set up Nginx Server"
        }, 
        {
            "location": "/install/Production-Ubuntu/index.html#finish-mattermost-server-setup", 
            "text": "Navigate to https://mattermost.example.com and create a team and user.  The first user in the system is automatically granted the  system_admin  role, which gives you access to the System Console.  From the  town-square  channel click the dropdown and choose the  System Console  option  Update Email Settings.  We recommend using an email sending service.  The example shows how an Amazon SES setup might look (sample credentials shown below are not real).  Set  Send Email Notifications  to true  Set  Require Email Verification  to true  Set  Feedback Name  to  No-Reply  Set  Feedback Email  to  mattermost@example.com  Set  SMTP Username  to  AFIADTOVDKDLGERR  Set  SMTP Password  to  DFKJoiweklsjdflkjOIGHLSDFJewiskdjf  Set  SMTP Server  to  email-smtp.us-east-1.amazonaws.com  Set  SMTP Port  to  465  Set  Connection Security  to  TLS  Save the Settings  Update File Settings  Change  Local Directory Location  from  ./data/  to  /mattermost/data  Update Log Settings.  Set  Log to The Console  to false    Update Rate Limit Settings.  Set  Vary By Remote Address  to false  Set  Vary By HTTP Header  to X-Real-IP  Feel free to modify other settings.  Restart the Mattermost Service by typing:  sudo restart mattermost", 
            "title": "Finish Mattermost Server setup"
        }, 
        {
            "location": "/install/Release-Numbering/index.html", 
            "text": "Mattermost Release Schedule and Numbering\n\n\nRelease Schedule\n\n\nMattermost releases stable builds monthly on the 16th in \nbinary form\n\n\nRelease Numbering\n\n\nMattermost numbers its stable releases based on the following format: \n\n\n[Version Number].[Major Build Number].[Minor Build Number]\n\n\nVersion Number:\n\n\n\n\nIndicates a major system release (e.g. 1.x.x, 2.x.x)\n\n\n\n\nMajor Build Number:\n\n\n\n\nIndicates significant new functionality, (e.g. 0.5.x, 0.6.x, 0.7.x)\n\n\n\n\nMinor Build Number:\n\n\n\n\nIndicates a bug fix or security release (e.g. 1.2.5, 1.2.6)", 
            "title": "Release Numbering"
        }, 
        {
            "location": "/install/Release-Numbering/index.html#mattermost-release-schedule-and-numbering", 
            "text": "", 
            "title": "Mattermost Release Schedule and Numbering"
        }, 
        {
            "location": "/install/Release-Numbering/index.html#release-schedule", 
            "text": "Mattermost releases stable builds monthly on the 16th in  binary form", 
            "title": "Release Schedule"
        }, 
        {
            "location": "/install/Release-Numbering/index.html#release-numbering", 
            "text": "Mattermost numbers its stable releases based on the following format:   [Version Number].[Major Build Number].[Minor Build Number]  Version Number:   Indicates a major system release (e.g. 1.x.x, 2.x.x)   Major Build Number:   Indicates significant new functionality, (e.g. 0.5.x, 0.6.x, 0.7.x)   Minor Build Number:   Indicates a bug fix or security release (e.g. 1.2.5, 1.2.6)", 
            "title": "Release Numbering"
        }, 
        {
            "location": "/install/Requirements/index.html", 
            "text": "Software Requirements\n\n\nWeb Client\n\n\nSupported Operating Systems and Browsers for the Mattermost Web Client include: \n\n\n\n\nPC: Windows 7, Windows 8 (Chrome 43+, Firefox 38+, Internet Explorer 10+)  \n\n\nMac: OS 10 (Safari 7, Chrome 43+)  \n\n\nLinux: Arch 4.0.0  (Chrome 43+)  \n\n\niPhone 4s and higher (Safari on iOS 8.3+, Chrome 43+)  \n\n\nAndroid 5 and higher (Chrome 43+)  \n\n\n\n\nEmail Client\n\n\nSupported Email Clients for rendering Mattermost email notifications include:\n\n\nWeb based clients: \n- Gmail\n- Office 365\n- Outlook\n- Yahoo\n- AOL\n\n\nDesktop Clients:\n- Apple Mail version 7+\n- Outlook 2016+\n- Thunderbird 38.2+\n\n\nMobile Clients: \n- Gmail Mobile App (Android, iOS)\n- iOS Mail App (iOS 7+)\n- Blackberry Mail App  (OS version 4+)\n\n\nServer\n\n\nSupported Operating Systems for the Mattermost Server include: \n\n\n\n\nUbuntu\n\n\nDebian\n\n\nCentOS\n\n\nRedHat Enterprise Linux\n\n\nOracle Linux\n\n\n\n\nThe Mattermost roadmap does not currently include production support for Fedora, FreeBSD or Arch Linux. \n\n\nHardware Requirements\n\n\nMattermost offers both real-time communication and file sharing. CPU and Memory requirements are typically driven by the number of concurrent users using real-time messaging. Storage requirements are typically driven by number and size of files shared. \n\n\nThe below guidelines offer estimates based on real world usage of Mattermost in multi-team configurations ranging from 10-100 users per team. \n\n\nCPU\n\n\n\n\n2 cores is the recommended number of cores and supports up to 250 users\n\n\n4 cores supports up to 1,000 users\n\n\n8 cores supports up to 2,500 users\n\n\n16 cores supports up to 5,000 users\n\n\n32 cores supports up to 10,000 users\n\n\n64 cores supports up to 20,000 users\n\n\n\n\nMemory\n\n\n\n\n2GB RAM is the recommended memory size and supports up to 50 users\n\n\n4GB RAM supports up to 500 users\n\n\n8GB RAM supports up to 1,000 users\n\n\n16GB RAM supports up to 2,000 users\n\n\n32GB RAM supports up to 4,000 users\n\n\n64GB RAM supports up to 8,000 users\n\n\n128GB RAM supports up to 16,000 users\n\n\n\n\nStorage\n\n\nTo estimate initial storage requirements, begin with a Mattermost server approximately 600 MB to 800 MB in size including operating system and database, then add the multiplied product of:\n\n\n\n\nEstimated storage per user per month (see below), multipled by 12 months in a year\n\n\nEstimated mean average number of users in a year\n\n\nA 1-2x safety factor\n\n\n\n\nEstimated storage per user per month\n\n\nFile usage per user varies significantly across industries. The below benchmarks are recommended: \n\n\n\n\n\n\nLow usage teams\n (1-5 MB/user/month) - Primarily use text-messages and links to communicate. Examples would include software development teams that heavily use web-based document creation and management tools, and therefore rarely upload files to the server. \n\n\n\n\n\n\nMedium usage teams\n (5-25 MB/user/month) - Use a mix of text-messages as well as shared documents and images to communicate. Examples might include business teams that may commonly drag and drop screenshots, PDFs and Microsoft Office documents into Mattermost for sharing and review. \n\n\n\n\n\n\nHigh usage teams\n - (25-100 MB/user/month) - Heaviest utlization comes from teams uploading a high number of large files into Mattermost on a regular basis. Examples include creative teams who share and store artwork and media with tags and commentary in a pipeline production process. \n\n\n\n\n\n\nExample:\n A 30-person team with medium usage (5-25 MB/user/month) with a safety factor of 2x would require between 300 MB (30 users * 5 MB * 2x safety factor) and 1500 MB (30 users * 25 MB * 2x safety factor) of free space in the next year. \n\n\nIt's recommended to review storage utilization at least quarterly to ensure adequate free space is available.", 
            "title": "Requirements"
        }, 
        {
            "location": "/install/Requirements/index.html#software-requirements", 
            "text": "Web Client  Supported Operating Systems and Browsers for the Mattermost Web Client include:    PC: Windows 7, Windows 8 (Chrome 43+, Firefox 38+, Internet Explorer 10+)    Mac: OS 10 (Safari 7, Chrome 43+)    Linux: Arch 4.0.0  (Chrome 43+)    iPhone 4s and higher (Safari on iOS 8.3+, Chrome 43+)    Android 5 and higher (Chrome 43+)     Email Client  Supported Email Clients for rendering Mattermost email notifications include:  Web based clients: \n- Gmail\n- Office 365\n- Outlook\n- Yahoo\n- AOL  Desktop Clients:\n- Apple Mail version 7+\n- Outlook 2016+\n- Thunderbird 38.2+  Mobile Clients: \n- Gmail Mobile App (Android, iOS)\n- iOS Mail App (iOS 7+)\n- Blackberry Mail App  (OS version 4+)  Server  Supported Operating Systems for the Mattermost Server include:    Ubuntu  Debian  CentOS  RedHat Enterprise Linux  Oracle Linux   The Mattermost roadmap does not currently include production support for Fedora, FreeBSD or Arch Linux.", 
            "title": "Software Requirements"
        }, 
        {
            "location": "/install/Requirements/index.html#hardware-requirements", 
            "text": "Mattermost offers both real-time communication and file sharing. CPU and Memory requirements are typically driven by the number of concurrent users using real-time messaging. Storage requirements are typically driven by number and size of files shared.   The below guidelines offer estimates based on real world usage of Mattermost in multi-team configurations ranging from 10-100 users per team.   CPU   2 cores is the recommended number of cores and supports up to 250 users  4 cores supports up to 1,000 users  8 cores supports up to 2,500 users  16 cores supports up to 5,000 users  32 cores supports up to 10,000 users  64 cores supports up to 20,000 users   Memory   2GB RAM is the recommended memory size and supports up to 50 users  4GB RAM supports up to 500 users  8GB RAM supports up to 1,000 users  16GB RAM supports up to 2,000 users  32GB RAM supports up to 4,000 users  64GB RAM supports up to 8,000 users  128GB RAM supports up to 16,000 users   Storage  To estimate initial storage requirements, begin with a Mattermost server approximately 600 MB to 800 MB in size including operating system and database, then add the multiplied product of:   Estimated storage per user per month (see below), multipled by 12 months in a year  Estimated mean average number of users in a year  A 1-2x safety factor   Estimated storage per user per month  File usage per user varies significantly across industries. The below benchmarks are recommended:     Low usage teams  (1-5 MB/user/month) - Primarily use text-messages and links to communicate. Examples would include software development teams that heavily use web-based document creation and management tools, and therefore rarely upload files to the server.     Medium usage teams  (5-25 MB/user/month) - Use a mix of text-messages as well as shared documents and images to communicate. Examples might include business teams that may commonly drag and drop screenshots, PDFs and Microsoft Office documents into Mattermost for sharing and review.     High usage teams  - (25-100 MB/user/month) - Heaviest utlization comes from teams uploading a high number of large files into Mattermost on a regular basis. Examples include creative teams who share and store artwork and media with tags and commentary in a pipeline production process.     Example:  A 30-person team with medium usage (5-25 MB/user/month) with a safety factor of 2x would require between 300 MB (30 users * 5 MB * 2x safety factor) and 1500 MB (30 users * 25 MB * 2x safety factor) of free space in the next year.   It's recommended to review storage utilization at least quarterly to ensure adequate free space is available.", 
            "title": "Hardware Requirements"
        }, 
        {
            "location": "/install/SMTP-Email-Setup/index.html", 
            "text": "SMTP Email Setup\n\n\nIn product evaluation setups with single-container Docker instances, email is intentionally disabled. This allows account creation and system operation without having to set up email, but it also means email notification and password reset functionality aren't available. \n\n\nHow to enable email\n\n\nTo enable email, configure an SMTP email service as follows: \n\n\n\n\n\n\nSet up an SMTP email sending service\n (if you don't yet have an SMTP service with credentials) \n\n\n\n\nAny SMTP email service can be used, you just need the following information: \nServer Name\n, \nPort\n, \nSMTP Username\n, and \nSMTP Password\n. \n\n\nIf you don't have an SMTP service, here are simple instructions to set one up with \nAmazon Simple Email Service (SES)\n:\n\n\nGo to \nAmazon SES console\n then \nSMTP Settings \n Create My SMTP Credentials\n\n\nCopy the \nServer Name\n, \nPort\n, \nSMTP Username\n, and \nSMTP Password\n for Step 2 below. \n\n\nFrom the \nDomains\n menu set up and verify a new domain, then enable \nGenerate DKIM Settings\n for the domain. \n\n\nWe recommend you set up \nSender Policy Framework\n (SPF)\n and/or \nDomain Keys Identified Mail\n (DKIM)\n for your email domain.\n\n\n\n\n\n\nChoose an sender address like \nmattermost@example.com\n and click \nSend a Test Email\n to verify setup is working correctly. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure SMTP settings\n \n\n\n\n\nOpen the \nSystem Console\n by logging into an existing team and accessing \"System Console\" from the main menu.\n\n\nAlternatively, if a team doesn't yet exist, go to \nhttp://dockerhost:8065/\n in your browser, create a team, then from the main menu click \nSystem Console\n\n\n\n\n\n\nGo to the \nEmail Settings\n tab and configure the following:  \n\n\nAllow Sign Up With Email:\n \ntrue\n\n\nSend Email Notifications:\n \ntrue\n\n\nRequire Email Verification:\n \ntrue\n\n\nNotification Display Name:\n Display name on email account sending notifications\n\n\nNotification Email Address:\n Email address displayed on email account used to send notifications\n\n\nSMTP Username\n: \nSMTP Username\n from Step 1\n\n\nSMTP Password\n: \nSMTP Password\n from Step 1\n\n\nSMTP Server\n: \nSMTP Server\n from Step 1\n\n\nSMTP Port\n: \nSMTP Port\n from Step 1\n\n\nConnection Security\n: \nTLS (Recommended)\n\n\nThen click \nSave\n\n\nThen click \nTest Connection\n\n\nIf the test failed please look in \nOTHER\n \n \nLogs\n for any errors that look like \n[EROR] /api/v1/admin/test_email ...\n\n\n\n\n\n\n\n\n\n\n\n\nKnown Good Sample Settings\n\n\nAmazon SES\n\n\n\n\nSet \nSMTP Username\n to \nAKIASKLDSKDIWEOWE\n\n\nSet \nSMTP Password\n to \nAdskfjAKLSDJShflsdfjkakldADkjkjdfKAJDSlkjweiqQIWEOU\n\n\nSet \nSMTP Server\n to \nemail-smtp.us-east-1.amazonaws.com\n\n\nSet \nSMTP Port\n to \n465\n\n\nSet \nConnection Security\n to \nTLS\n\n\n\n\nPostfix\n\n\n\n\nMake sure Postfix is installed on the machine where Mattermost is installed\n\n\nSet \nSMTP Username\n to \n(empty)\n\n\nSet \nSMTP Password\n to \n(empty)\n\n\nSet \nSMTP Server\n to \nlocalhost\n\n\nSet \nSMTP Port\n to \n25\n\n\nSet \nConnection Security\n to \n(empty)\n\n\n\n\nGmail\n\n\n\n\nSet \nSMTP Username\n to \nyour_email@gmail.com\n\n\nSet \nSMTP Password\n to \nyour_password\n\n\nSet \nSMTP Server\n to \nsmtp.gmail.com\n\n\nSet \nSMTP Port\n to \n587\n\n\nSet \nConnection Security\n to \nTLS\n\n\n\n\nOffice 365\n\n\n\n\nSet \nSMTP Username\n to \nOffice 365 username\n\n\nSet \nSMTP Password\n to \nOffice 365 password\n\n\nSet \nSMTP Server\n to \nsmtp.office365.com\n\n\nSet \nSMTP Port\n to \n587\n\n\nSet \nConnection Security\n to \nTLS\n\n\n\n\nHotmail\n\n\n\n\nSet \nSMTP Username\n to \nyour_email@hotmail.com\n\n\nSet \nSMTP Password\n to \nyour_password\n\n\nSet \nSMTP Server\n to \nsmtp-mail.outlook.com\n\n\nSet \nSMTP Port\n to \n587\n\n\nSet \nConnection Security\n to \nSTARTTLS\n\n\n\n\nTroubleshooting SMTP\n\n\nTip 1\n\n\nIf you fill in \nSMTP Username\n and \nSMTP Password\n then you must set \nConnection Security\n to \nTLS\n or to \nSTARTTLS\n\n\nTip 2\n\n\nIf you have issues with your SMTP install, from your Mattermost team site go to the main menu and open \nSystem Console -\n Logs\n to look for error messages related to your setup. You can do a search for the error code to narrow down the issue. Sometimes ISPs require nuanced setups for SMTP and error codes can hint at how to make the proper adjustments. \n\n\nFor example, if \nSystem Console -\n Logs\n has an error code reading: \n\n\nConnection unsuccessful: Failed to add to email address - 554 5.7.1 \nunknown[IP-ADDRESS]\n: Client host rejected: Access denied\n\n\n\n\nSearch for \n554 5.7.1 error\n and \nClient host rejected: Access denied\n.\n\n\nTip 3\n\n\n\n\nAttempt to telnet to the email service to make sure the server is reachable.\n\n\nYou must run the following commands from the same machine or virtual instance where \nmattermost/bin/platform\n is located.  So if you're running Mattermost from docker you need to \ndocker exec -ti mattermost-dev /bin/bash\n\n\nTelnet to the email server with \ntelnet mail.example.com 25\n.  If the command works you should see something like\n\n\n\n\nTrying 24.121.12.143...\nConnected to mail.example.com.\n220 mail.example.com NO UCE ESMTP\n\n\n\n\n\n\nThen type something like \nHELO \nyour mail server domain\n.  If the command works you should see something like\n\n\n\n\n250-mail.example.com NO UCE\n250-STARTTLS\n250-PIPELINING\n250 8BITMIME", 
            "title": "SMTP Email Setup"
        }, 
        {
            "location": "/install/SMTP-Email-Setup/index.html#smtp-email-setup", 
            "text": "In product evaluation setups with single-container Docker instances, email is intentionally disabled. This allows account creation and system operation without having to set up email, but it also means email notification and password reset functionality aren't available.   How to enable email  To enable email, configure an SMTP email service as follows:     Set up an SMTP email sending service  (if you don't yet have an SMTP service with credentials)    Any SMTP email service can be used, you just need the following information:  Server Name ,  Port ,  SMTP Username , and  SMTP Password .   If you don't have an SMTP service, here are simple instructions to set one up with  Amazon Simple Email Service (SES) :  Go to  Amazon SES console  then  SMTP Settings   Create My SMTP Credentials  Copy the  Server Name ,  Port ,  SMTP Username , and  SMTP Password  for Step 2 below.   From the  Domains  menu set up and verify a new domain, then enable  Generate DKIM Settings  for the domain.   We recommend you set up  Sender Policy Framework  (SPF)  and/or  Domain Keys Identified Mail  (DKIM)  for your email domain.    Choose an sender address like  mattermost@example.com  and click  Send a Test Email  to verify setup is working correctly.          Configure SMTP settings     Open the  System Console  by logging into an existing team and accessing \"System Console\" from the main menu.  Alternatively, if a team doesn't yet exist, go to  http://dockerhost:8065/  in your browser, create a team, then from the main menu click  System Console    Go to the  Email Settings  tab and configure the following:    Allow Sign Up With Email:   true  Send Email Notifications:   true  Require Email Verification:   true  Notification Display Name:  Display name on email account sending notifications  Notification Email Address:  Email address displayed on email account used to send notifications  SMTP Username :  SMTP Username  from Step 1  SMTP Password :  SMTP Password  from Step 1  SMTP Server :  SMTP Server  from Step 1  SMTP Port :  SMTP Port  from Step 1  Connection Security :  TLS (Recommended)  Then click  Save  Then click  Test Connection  If the test failed please look in  OTHER     Logs  for any errors that look like  [EROR] /api/v1/admin/test_email ...       Known Good Sample Settings  Amazon SES   Set  SMTP Username  to  AKIASKLDSKDIWEOWE  Set  SMTP Password  to  AdskfjAKLSDJShflsdfjkakldADkjkjdfKAJDSlkjweiqQIWEOU  Set  SMTP Server  to  email-smtp.us-east-1.amazonaws.com  Set  SMTP Port  to  465  Set  Connection Security  to  TLS   Postfix   Make sure Postfix is installed on the machine where Mattermost is installed  Set  SMTP Username  to  (empty)  Set  SMTP Password  to  (empty)  Set  SMTP Server  to  localhost  Set  SMTP Port  to  25  Set  Connection Security  to  (empty)   Gmail   Set  SMTP Username  to  your_email@gmail.com  Set  SMTP Password  to  your_password  Set  SMTP Server  to  smtp.gmail.com  Set  SMTP Port  to  587  Set  Connection Security  to  TLS   Office 365   Set  SMTP Username  to  Office 365 username  Set  SMTP Password  to  Office 365 password  Set  SMTP Server  to  smtp.office365.com  Set  SMTP Port  to  587  Set  Connection Security  to  TLS   Hotmail   Set  SMTP Username  to  your_email@hotmail.com  Set  SMTP Password  to  your_password  Set  SMTP Server  to  smtp-mail.outlook.com  Set  SMTP Port  to  587  Set  Connection Security  to  STARTTLS   Troubleshooting SMTP  Tip 1  If you fill in  SMTP Username  and  SMTP Password  then you must set  Connection Security  to  TLS  or to  STARTTLS  Tip 2  If you have issues with your SMTP install, from your Mattermost team site go to the main menu and open  System Console -  Logs  to look for error messages related to your setup. You can do a search for the error code to narrow down the issue. Sometimes ISPs require nuanced setups for SMTP and error codes can hint at how to make the proper adjustments.   For example, if  System Console -  Logs  has an error code reading:   Connection unsuccessful: Failed to add to email address - 554 5.7.1  unknown[IP-ADDRESS] : Client host rejected: Access denied  Search for  554 5.7.1 error  and  Client host rejected: Access denied .  Tip 3   Attempt to telnet to the email service to make sure the server is reachable.  You must run the following commands from the same machine or virtual instance where  mattermost/bin/platform  is located.  So if you're running Mattermost from docker you need to  docker exec -ti mattermost-dev /bin/bash  Telnet to the email server with  telnet mail.example.com 25 .  If the command works you should see something like   Trying 24.121.12.143...\nConnected to mail.example.com.\n220 mail.example.com NO UCE ESMTP   Then type something like  HELO  your mail server domain .  If the command works you should see something like   250-mail.example.com NO UCE\n250-STARTTLS\n250-PIPELINING\n250 8BITMIME", 
            "title": "SMTP Email Setup"
        }, 
        {
            "location": "/install/Troubleshooting/index.html", 
            "text": "Mattermost Troubleshooting\n\n\nImportant notes\n\n\nDO NOT manipulate the Mattermost database\n\n\n\n\nIn particular, DO NOT delete data from the database, as Mattermost is designed to stop working if data integrity has been compromised. The system is designed to archive content continously and generally assumes data is never deleted. \n\n\n\n\nCommon Issues\n\n\nLost System Administrator account\n\n\n\n\nIf the System Administrator account becomes unavailable, a person leaving the organization for example, you can set a new system admin from the commandline using \n./platform -assign_role -team_name=\"yourteam\" -email=\"you@example.com\" -role=\"system_admin\"\n. \n\n\nAfter assigning the role the user needs to log out and log back in before the System Administrator role is applied.\n\n\n\n\nError Messages\n\n\nThe following is a list of common error messages and solutions: \n\n\nPlease check connection, Mattermost unreachable. If issue persists, ask administrator to check WebSocket port.\n\n\n\n\nMessage appears in blue bar on team site. \n\n\nSolution:\n Check that \nyour websocket port is properly configured\n. \n\n\n\n\nx509: certificate signed by unknown authority\n in server logs when attempting to sign-up\n\n\n\n\nThis error may appear when attempt to use a self-signed certificate to setup SSL, which is not yet supported by Mattermost. You\n\n\nSolution:\n Set up a load balancer like Ngnix \nper production install guide\n. A ticket exists to \nadd support for self-signed certificates in future\n. \n\n\n\n\npanic: runtime error: invalid memory address or nil pointer dereference\n\n\n\n\nThis error can occur if you have manually manipulated the Mattermost database, typically with deletions. Mattermost is designed to serve as a searchable archive, and manual manipulation of the database elements compromises integrity and may prevent upgrade. \n\n\nSolution:\n Restore from database backup created prior to manual database updates, or reinstall the system.\n\n\n\n\nToken request failed\n\n\n\n\nThis error can appear in the web browser after attempting to create a new team with GitLab SSO enabled\n\n\nSolutions:\n \n\n\nCheck that your SSL settings for the SSO provider match the \nhttp://\n or \nhttps://\n choice selected in \nconfig.json\n under \nGitLabSettings\n\n\nFollow steps 1 to 3 of the manual \nGitLab SSO configuration procedure\n to confirm your \nSecret\n and \nId\n settings in \nconfig.json\n match your GitLab settings, and if they don't, manually update \nconfig.json\n to the correct settings and see if this clears the issue.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/install/Troubleshooting/index.html#mattermost-troubleshooting", 
            "text": "Important notes  DO NOT manipulate the Mattermost database   In particular, DO NOT delete data from the database, as Mattermost is designed to stop working if data integrity has been compromised. The system is designed to archive content continously and generally assumes data is never deleted.    Common Issues  Lost System Administrator account   If the System Administrator account becomes unavailable, a person leaving the organization for example, you can set a new system admin from the commandline using  ./platform -assign_role -team_name=\"yourteam\" -email=\"you@example.com\" -role=\"system_admin\" .   After assigning the role the user needs to log out and log back in before the System Administrator role is applied.   Error Messages  The following is a list of common error messages and solutions:   Please check connection, Mattermost unreachable. If issue persists, ask administrator to check WebSocket port.   Message appears in blue bar on team site.   Solution:  Check that  your websocket port is properly configured .    x509: certificate signed by unknown authority  in server logs when attempting to sign-up   This error may appear when attempt to use a self-signed certificate to setup SSL, which is not yet supported by Mattermost. You  Solution:  Set up a load balancer like Ngnix  per production install guide . A ticket exists to  add support for self-signed certificates in future .    panic: runtime error: invalid memory address or nil pointer dereference   This error can occur if you have manually manipulated the Mattermost database, typically with deletions. Mattermost is designed to serve as a searchable archive, and manual manipulation of the database elements compromises integrity and may prevent upgrade.   Solution:  Restore from database backup created prior to manual database updates, or reinstall the system.   Token request failed   This error can appear in the web browser after attempting to create a new team with GitLab SSO enabled  Solutions:    Check that your SSL settings for the SSO provider match the  http://  or  https://  choice selected in  config.json  under  GitLabSettings  Follow steps 1 to 3 of the manual  GitLab SSO configuration procedure  to confirm your  Secret  and  Id  settings in  config.json  match your GitLab settings, and if they don't, manually update  config.json  to the correct settings and see if this clears the issue.", 
            "title": "Mattermost Troubleshooting"
        }, 
        {
            "location": "/install/Upgrade-Guide/index.html", 
            "text": "Mattermost Upgrade Guide\n\n\nUpgrading Mattermost to Next Major Release\n\n\nEach release of Mattermost contains logic to upgrade it from the previously major build version. For example, version 1.2 upgrades the database and configuration data schema for a Mattermost version 1.1 server. The following procedure outlines how to upgrade Mattermost to the next major release version. \n\n\n\n\nDownload the \nnext major build release\n of your server\n\n\nDetermine the current version of your Mattermost server \n\n\nGo to any team site, opening the main menu at the top right of the left-hand sidebar and selecting \nAbout Mattermost\n\n\n\n\n\n\nIdentify the next major build release of your Mattermost server from the list of \nstable Mattermost releases\n\n\nFor example, if your current version is 1.1.0, you want to select version 1.2.0. \n\n\nIn some cases there will be \nminor build releases\n, such as 1.2.1 and 1.2.2. The minor build number indicates a bug fix or security issue release. Testing on minor build versions is less extensive than on major build versions and it is recommended that you use the minor build only if you need the specific additions included. \n\n\n\n\n\n\nReview Release Notes \n\n\nCheck the release notes for the version of Mattermost you are able to install, and note any setting changes in the \nCompatibility\n section that apply to your deployment\n\n\n\n\n\n\nDownload the \nmattermost.tar.gz\n file with the correct version for your upgrade\n\n\nYou can use \nwget\n to retrieve a specific version. For example, to download v1.1.0 run \nwget https://github.com/mattermost/platform/releases/download/v1.1.0/mattermost.tar.gz\n\n\n\n\n\n\nStop the Mattermost Server\n\n\nAs best practice, consider posting to the Town Square channel of active teams pre-announcing the scheduled downtime to apply these upgrade procedures\n\n\nTo stop the server run \nsudo stop mattermost\n\n\nBackup your data\n\n\nBack up your \nconfig.json\n file, which contains your system configuration. This will be used to restore your current settings after the new version is installed\n\n\nBackup your database using your organization's standard procedures for backing up MySQL or PostgreSQL\n\n\nIf you're using local file storage, back up the location where files are stored\n\n\nDecompress \nmattermost.tar.gz\n and use its contents to replace the current version of Mattermost on disk\n\n\nRun \ntar -xvzf mattermost.tar.gz\n\n\nRestore the state of your server by copying the backed up version of \nconfig.json\n in place of the default \nconfig.json\n \n\n\nStart your server and address any setting changes relevant in the latest version of Mattermost\n\n\nRun \nsudo start mattermost\n\n\nThe server will upgrade your database schema to be compatibile with the new release, as well as upgrade your \nconfig.json\n file to the latest format, using default values for new settings added\n\n\nGo to the System Console to update any settings that have been added or modified based on the \nCompatibility\n documentation in the release notes\n\n\nTest the system is working by going to the URL of an existing team\n\n\n\n\nUpgrading from Mattermost Beta (Version 0.7)\n\n\nThe following instructions apply to updating installations of Mattermost v0.7-Beta to Mattermost 1.1. \n\n\nUpgrading Mattermost in GitLab 8.0 to GitLab 8.1 with omnibus\n\n\nMattermost 0.7.1-beta in GitLab 8.0 was a pre-release of Mattermost and Mattermost v1.1.1 in GitLab 8.1 was \nupdated significantly\n to get to a stable, forwards-compatible platform for Mattermost. \n\n\nThe Mattermost team didn't think it made sense for GitLab omnibus to attempt an automated re-configuration of Mattermost (since 0.7.1-beta was a pre-release) given the scale of change, so we're providing instructions for GitLab users who have customized their Mattermost deployments in 8.0 to move to 8.1: \n\n\n\n\nFollow the \nUpgrading Mattermost v0.7.1-beta to v1.1.1 instructions\n below to identify the settings in Mattermost's \nconfig.json\n file that differ from defaults and need to be updated from GitLab 8.0 to 8.1\n\n\nUpgrade to GitLab 8.1 using omnibus, and allowing it overwrite \nconfig.json\n to the new Mattermost v1.1.1 format\n\n\nManually update \nconfig.json\n to new settings identified in Step 1\n\n\n\n\nOptionally, you can use the new \nSystem Console user interface\n to make changes to your new \nconfig.json\n file.\n\n\nUpgrading Mattermost v0.7.1-beta to v1.1.1\n\n\nNote: \nMattermost v1.1.1\n is a special release of Mattermost v1.1 that upgrades the database to Mattermost v1.1 from EITHER Mattermost v0.7 or Mattermost v1.0. The following instructions are for upgrading from Mattermost v0.7.1-beta to v1.1.1 and skipping the upgrade to Mattermost v1.0.\n\n\nIf you've manually changed Mattermost v0.7.1-beta configuration by updating the \nconfig.json\n file, you'll need to port those changes to Mattermost v1.1.1: \n\n\n\n\n\n\nGo to the \nconfig.json\n file that you manually updated and note any differences from the \ndefault \nconfig.json\n file in Mattermost 0.7\n. \n\n\n\n\n\n\nFor each setting that you changed, check \nthe changelog documentation\n on whether the configuration setting has changed between v0.7 and v1.1.1\n\n\n\n\n\n\nUpdate your new \nconfig.json\n file in Mattermost v1.1\n, based on your preferences and the changelog documentation above\n\n\n\n\n\n\nOptionally, you can use the new \nSystem Console user interface\n to make changes to your new \nconfig.json\n file.", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/install/Upgrade-Guide/index.html#mattermost-upgrade-guide", 
            "text": "Upgrading Mattermost to Next Major Release  Each release of Mattermost contains logic to upgrade it from the previously major build version. For example, version 1.2 upgrades the database and configuration data schema for a Mattermost version 1.1 server. The following procedure outlines how to upgrade Mattermost to the next major release version.    Download the  next major build release  of your server  Determine the current version of your Mattermost server   Go to any team site, opening the main menu at the top right of the left-hand sidebar and selecting  About Mattermost    Identify the next major build release of your Mattermost server from the list of  stable Mattermost releases  For example, if your current version is 1.1.0, you want to select version 1.2.0.   In some cases there will be  minor build releases , such as 1.2.1 and 1.2.2. The minor build number indicates a bug fix or security issue release. Testing on minor build versions is less extensive than on major build versions and it is recommended that you use the minor build only if you need the specific additions included.     Review Release Notes   Check the release notes for the version of Mattermost you are able to install, and note any setting changes in the  Compatibility  section that apply to your deployment    Download the  mattermost.tar.gz  file with the correct version for your upgrade  You can use  wget  to retrieve a specific version. For example, to download v1.1.0 run  wget https://github.com/mattermost/platform/releases/download/v1.1.0/mattermost.tar.gz    Stop the Mattermost Server  As best practice, consider posting to the Town Square channel of active teams pre-announcing the scheduled downtime to apply these upgrade procedures  To stop the server run  sudo stop mattermost  Backup your data  Back up your  config.json  file, which contains your system configuration. This will be used to restore your current settings after the new version is installed  Backup your database using your organization's standard procedures for backing up MySQL or PostgreSQL  If you're using local file storage, back up the location where files are stored  Decompress  mattermost.tar.gz  and use its contents to replace the current version of Mattermost on disk  Run  tar -xvzf mattermost.tar.gz  Restore the state of your server by copying the backed up version of  config.json  in place of the default  config.json    Start your server and address any setting changes relevant in the latest version of Mattermost  Run  sudo start mattermost  The server will upgrade your database schema to be compatibile with the new release, as well as upgrade your  config.json  file to the latest format, using default values for new settings added  Go to the System Console to update any settings that have been added or modified based on the  Compatibility  documentation in the release notes  Test the system is working by going to the URL of an existing team   Upgrading from Mattermost Beta (Version 0.7)  The following instructions apply to updating installations of Mattermost v0.7-Beta to Mattermost 1.1.   Upgrading Mattermost in GitLab 8.0 to GitLab 8.1 with omnibus  Mattermost 0.7.1-beta in GitLab 8.0 was a pre-release of Mattermost and Mattermost v1.1.1 in GitLab 8.1 was  updated significantly  to get to a stable, forwards-compatible platform for Mattermost.   The Mattermost team didn't think it made sense for GitLab omnibus to attempt an automated re-configuration of Mattermost (since 0.7.1-beta was a pre-release) given the scale of change, so we're providing instructions for GitLab users who have customized their Mattermost deployments in 8.0 to move to 8.1:    Follow the  Upgrading Mattermost v0.7.1-beta to v1.1.1 instructions  below to identify the settings in Mattermost's  config.json  file that differ from defaults and need to be updated from GitLab 8.0 to 8.1  Upgrade to GitLab 8.1 using omnibus, and allowing it overwrite  config.json  to the new Mattermost v1.1.1 format  Manually update  config.json  to new settings identified in Step 1   Optionally, you can use the new  System Console user interface  to make changes to your new  config.json  file.  Upgrading Mattermost v0.7.1-beta to v1.1.1  Note:  Mattermost v1.1.1  is a special release of Mattermost v1.1 that upgrades the database to Mattermost v1.1 from EITHER Mattermost v0.7 or Mattermost v1.0. The following instructions are for upgrading from Mattermost v0.7.1-beta to v1.1.1 and skipping the upgrade to Mattermost v1.0.  If you've manually changed Mattermost v0.7.1-beta configuration by updating the  config.json  file, you'll need to port those changes to Mattermost v1.1.1:     Go to the  config.json  file that you manually updated and note any differences from the  default  config.json  file in Mattermost 0.7 .     For each setting that you changed, check  the changelog documentation  on whether the configuration setting has changed between v0.7 and v1.1.1    Update your new  config.json  file in Mattermost v1.1 , based on your preferences and the changelog documentation above    Optionally, you can use the new  System Console user interface  to make changes to your new  config.json  file.", 
            "title": "Mattermost Upgrade Guide"
        }, 
        {
            "location": "/integrations/Single-Sign-On/Gitlab/index.html", 
            "text": "Configuring GitLab Single-Sign-On\n\n\nFollow these steps to configure Mattermost to use GitLab as a single-sign-on (SSO) service for team creation, account creation and sign-in.\n\n\n\n\nLogin to your GitLab account and go to the Applications section either in Profile Settings or Admin Area.\n\n\nAdd a new application called \"Mattermost\" with the following as Redirect URIs:\n\n\nyour-mattermost-url\n/login/gitlab/complete\n (example: http://localhost:8065/login/gitlab/complete)\n\n\nyour-mattermost-url\n/signup/gitlab/complete\n\n\n\n\n(Note: If your GitLab instance is set up to use SSL, your URIs must begin with https://. Otherwise, use http://).\n\n\n\n\n\n\nSubmit the application and copy the given \nId\n and \nSecret\n into the appropriate \nSSOSettings\n fields in config/config.json\n\n\n\n\n\n\nAlso in config/config.json, set \nEnable\n to \ntrue\n for the \ngitlab\n section, leave \nScope\n blank and use the following for the endpoints:\n\n\n\n\nAuthEndpoint\n: \nhttps://\nyour-gitlab-url\n/oauth/authorize\n (example https://example.com/oauth/authorize)  \n\n\nTokenEndpoint\n: \nhttps://\nyour-gitlab-url\n/oauth/token\n  \n\n\nUserApiEndpoint\n: \nhttps://\nyour-gitlab-url\n/api/v3/user\n  \n\n\n\n\nNote: Make sure your \nHTTPS\n or \nHTTP\n prefix for endpoint URLs matches your server configuration. \n\n\n\n\n\n\n(Optional) If you would like to force all users to sign-up with GitLab only, in the \nServiceSettings\n section of config/config.json set \nDisableEmailSignUp\n to \ntrue\n.\n\n\n\n\n\n\nRestart your Mattermost server to see the changes take effect.", 
            "title": "Gitlab"
        }, 
        {
            "location": "/integrations/Single-Sign-On/Gitlab/index.html#configuring-gitlab-single-sign-on", 
            "text": "Follow these steps to configure Mattermost to use GitLab as a single-sign-on (SSO) service for team creation, account creation and sign-in.   Login to your GitLab account and go to the Applications section either in Profile Settings or Admin Area.  Add a new application called \"Mattermost\" with the following as Redirect URIs:  your-mattermost-url /login/gitlab/complete  (example: http://localhost:8065/login/gitlab/complete)  your-mattermost-url /signup/gitlab/complete   (Note: If your GitLab instance is set up to use SSL, your URIs must begin with https://. Otherwise, use http://).    Submit the application and copy the given  Id  and  Secret  into the appropriate  SSOSettings  fields in config/config.json    Also in config/config.json, set  Enable  to  true  for the  gitlab  section, leave  Scope  blank and use the following for the endpoints:   AuthEndpoint :  https:// your-gitlab-url /oauth/authorize  (example https://example.com/oauth/authorize)    TokenEndpoint :  https:// your-gitlab-url /oauth/token     UserApiEndpoint :  https:// your-gitlab-url /api/v3/user      Note: Make sure your  HTTPS  or  HTTP  prefix for endpoint URLs matches your server configuration.     (Optional) If you would like to force all users to sign-up with GitLab only, in the  ServiceSettings  section of config/config.json set  DisableEmailSignUp  to  true .    Restart your Mattermost server to see the changes take effect.", 
            "title": "Configuring GitLab Single-Sign-On"
        }, 
        {
            "location": "/integrations/webhooks/Incoming-Webhooks/index.html", 
            "text": "Incoming Webhooks\n\n\nIncoming webhooks allow external applications, written in the programming language of your choice--to post messages into Mattermost channels and private groups by sending a specifically formatted JSON payload via HTTP POST request to a secret Mattermost URL generated specifically for each application.\n\n\nA couple key points:\n\n\n\n\nMattermost incoming webhooks are Slack-compatible.\n If you've used Slack's incoming webhooks to create integrations, you can copy and paste that code to create Mattermost integrations. Mattermost automatically translates Slack's proprietary JSON payload format into markdown to render in Mattermost messages\n\n\nMattermost incoming webhooks support full markdown.\n A rich range of formatting unavailable in Slack is made possible through \nmarkdown support\n in Mattermost, including headings, formatted fonts, tables, inline images and other options supported by [Mattermost Markdown]\n\n\n\n\nExample:\n\n\nSuppose you wanted to create a notification of the status of a daily build, with a table of total tests run and total tests failed by component category, with links to failed tests by category. You could create the following JSON payload to post to a Mattermost channel using webhooks:\n\n\npayload={\ntext\n: \n\n---\n##### Build Break - Project X - December 12, 2015 - 15:32 GMT +0\n| Component  | Tests Run   | Tests Failed                                   |\n|:-----------|:------------|:-----------------------------------------------|\n| Server     | 948         | :white_check_mark: 0                           |\n| Web Client | 123         | :warning: [2 (see details)](http://linktologs) |\n| iOS Client | 78          | :warning: [3 (see details)](http://linktologs) |\n---\n\n}\n\n\n\n\nWhich would render in a Mattermost message as follows:\n\n\n\n\nBuild Break - Project X - December 12, 2015 - 15:32 GMT +0\n\n\n\n\n\n\n\n\nComponent\n\n\nTests Run\n\n\nTests Failed\n\n\n\n\n\n\n\n\n\n\nServer\n\n\n948\n\n\n:white_check_mark: 0\n\n\n\n\n\n\nWeb Client\n\n\n123\n\n\n:warning: \n2 (see details)\n\n\n\n\n\n\niOS Client\n\n\n78\n\n\n:warning: \n3 (see details)\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\nEnabling Incoming Webhooks\n\n\nIncoming webhooks should be enabled on your Mattermost instance by default, but if they are not you'll need to get your system administrator to enable them. If you are the system administrator you can enable them by doing the following:\n\n\n\n\nLogin to your Mattermost team account that has the system administrator role\n\n\nEnable incoming webhooks from \nSystem Console -\n Service Settings\n\n\n(Optional) Configure the \nEnable Overriding of Usernames from Webhooks\n option to allow external applications to post messages under any name. If not enabled, the username of the creator of the webhook URL is used to post messages\n\n\n(Optional) Configure the \nEnable Overriding of Icon from Webhooks\n option to allow external applciations to change the icon of the account posting messages. If not enabled, the icon of the creator of the webhook URL is used to post messages\n\n\n\n\nSetting Up Existing Integrations\n\n\nIf you've already found or built an integration and are just looking to hook it up, then you should just need to follow the specific instructions of that integration. If the integration is using Mattermost incoming webhooks, then at some point in the instructions it will ask for a webhook URL. You can get this URL by following the first step in the next section \nCreating Integrations using Incoming Webhooks\n.\n\n\nCreating Integrations using Incoming Webhooks\n\n\nYou can create a webhook integration to post into Mattermost channels and private groups using these steps:\n\n\nNote: Incoming webhooks must be enabled. Only your Mattermost system administrator can enable incoming webhooks if they are currently disabled.\n\n\n\n\nCreate a Mattermost Incoming Webhook URL\n\n\nLogin to your Mattermost team site and go to \nAccount Settings -\n Integrations\n\n\nNext to \nIncoming Webhooks\n click \nEdit\n\n\nSelect the channel or private group to receive webhook payloads, then click \nAdd\n to create the webhook\n\n\n\n\nTo see your new webhook in action, try a curl command from your terminal or command-line to send a JSON string as the \npayload\n parameter in a HTTP POST request\n\n\n\n\nExample:\n \ncurl -i -X POST -d 'payload={\"text\": \"Hello, this is some text.\"}' http://yourmattermost.com/hooks/xxx-generatedkey-xxx\n\n\n\n\n\n\n\n\nBuild your integration in the programming language of your choice\n\n\n\n\nMost integrations will be used to translate some sort of output from another system to an appropriately formatted input that will be passed into the Mattermost webhook URL. For example, an integration could take events generated by \nGitLab outgoing webhooks\n and parse them into a JSON body to post into Mattermost\n\n\nTo get the message posted into Mattermost, your integration will need to create an HTTP POST request that will submit to the incoming webhook URL you created before. The body of the request must have a \npayload\n that contains a JSON object that specifies a \ntext\n parameter. For example, \npayload={\"text\": \"Hello, this is some text.\"}\n is a valid body for a request\n\n\nSet up your integration running on Heroku, an AWS server or a server of your own to start sending real time updates to Mattermost channels and private groups\n\n\n\n\nAdditional Notes:\n\n\n\n\n\n\nFor the HTTP request body, if \nContent-Type\n is specified as \napplication/json\n in the headers of the HTTP request then the body of the request can be direct JSON. For example, \n{\"text\": \"Hello, this is some text.\"}\n\n\n\n\n\n\nYou can override the channel specified in the webhook definition by specifying a \nchannel\n parameter in your payload. For example, you might have a single webhook created for \nTown Square\n, but you can use \npayload={\"channel\": \"off-topic\", \"text\": \"Hello, this is some text.\"}\n to send a message to the \nOff-Topic\n channel using the same webhook URL\n\n\n\n\n\n\nIn addition, with \nEnable Overriding of Usernames from Webhooks\n turned on,  you can also override the username the message posts as by providing a \nusername\n parameter in your JSON payload. For example, you might want your message looking like it came from a robot so you can use \npayload={\"username\": \"robot\", \"text\": \"Hello, this is some text.\"}\n to change the username of the post to robot. Note, to combat any malicious users from trying to use this to perform \nphishing attacks\n a \nBOT\n indicator appears next to posts coming from webhooks\n\n\n\n\n\n\nWith \nEnable Overriding of Icon from Webhooks\n turned on, you can similarly change the icon the message posts with by providing a link to an image in the \nicon_url\n parameter of your payload. For example, \npayload={\"icon_url\": \"http://somewebsite.com/somecoolimage.jpg\", \"text\": \"Hello, this is some text.\"}\n will post using whatever image is located at \nhttp://somewebsite.com/somecoolimage.jpg\n as the icon for the post\n\n\n\n\n\n\nAlso, as mentioned previously, \nmarkdown\n can be used to create richly formatted payloads, for example: \npayload={\"text\": \"# A Header\\nThe _text_ below **the** header.\"}\n creates a messages with a header, a carriage return and bold text for \"the\"\n\n\n\n\n\n\nJust like regular posts, the text will be limited to 4000 characters at maximum\n\n\n\n\n\n\nSlack Compatibility\n\n\nAs mentioned above, Mattermost makes it easy to take integrations written for Slack's proprietary JSON payload format and repurpose them to become Mattermost integrations. The following automatic translations are supported:\n\n\n\n\nPayloads designed for Slack using \n to note the need to hyperlink a URL, such as \npayload={\"text\": \"\nhttp://www.mattermost.com/\n\"}\n, are translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack\n\n\nSimiliarly, payloads designed for Slack using \n|\n within a \n to define linked text, such as \npayload={\"text\": \"Click \nhttp://www.mattermost.com/|here\n for a link.\"}\n, are also translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack\n\n\nLike Slack, by overriding the channel name with an @username, such as payload={\"text\": \"Hi\", channel: \"@jim\"}, you can send the message to a user through your direct message chat\n\n\nChannel names can be prepended with a #, like they are in Slack incoming webhooks, and the message will still be sent to the correct channel\n\n\n\n\nTo see samples and community contributions, please visit \nhttp://mattermost.org/webhooks\n.\n\n\nKnown Issues in v1.1\n\n\n\n\nThe \nattachments\n payload used in Slack is not yet supported\n\n\nOverriding of usernames does not yet apply to notifications (fixed on master) \n\n\nCannot supply \nicon_emoji\n to override the message icon\n\n\nWebhook UI fails when connected to deleted channel (fixed on master)", 
            "title": "Incoming Webhooks"
        }, 
        {
            "location": "/integrations/webhooks/Incoming-Webhooks/index.html#incoming-webhooks", 
            "text": "Incoming webhooks allow external applications, written in the programming language of your choice--to post messages into Mattermost channels and private groups by sending a specifically formatted JSON payload via HTTP POST request to a secret Mattermost URL generated specifically for each application.  A couple key points:   Mattermost incoming webhooks are Slack-compatible.  If you've used Slack's incoming webhooks to create integrations, you can copy and paste that code to create Mattermost integrations. Mattermost automatically translates Slack's proprietary JSON payload format into markdown to render in Mattermost messages  Mattermost incoming webhooks support full markdown.  A rich range of formatting unavailable in Slack is made possible through  markdown support  in Mattermost, including headings, formatted fonts, tables, inline images and other options supported by [Mattermost Markdown]   Example:  Suppose you wanted to create a notification of the status of a daily build, with a table of total tests run and total tests failed by component category, with links to failed tests by category. You could create the following JSON payload to post to a Mattermost channel using webhooks:  payload={ text :  \n---\n##### Build Break - Project X - December 12, 2015 - 15:32 GMT +0\n| Component  | Tests Run   | Tests Failed                                   |\n|:-----------|:------------|:-----------------------------------------------|\n| Server     | 948         | :white_check_mark: 0                           |\n| Web Client | 123         | :warning: [2 (see details)](http://linktologs) |\n| iOS Client | 78          | :warning: [3 (see details)](http://linktologs) |\n--- }  Which would render in a Mattermost message as follows:   Build Break - Project X - December 12, 2015 - 15:32 GMT +0     Component  Tests Run  Tests Failed      Server  948  :white_check_mark: 0    Web Client  123  :warning:  2 (see details)    iOS Client  78  :warning:  3 (see details)    ---       Enabling Incoming Webhooks  Incoming webhooks should be enabled on your Mattermost instance by default, but if they are not you'll need to get your system administrator to enable them. If you are the system administrator you can enable them by doing the following:   Login to your Mattermost team account that has the system administrator role  Enable incoming webhooks from  System Console -  Service Settings  (Optional) Configure the  Enable Overriding of Usernames from Webhooks  option to allow external applications to post messages under any name. If not enabled, the username of the creator of the webhook URL is used to post messages  (Optional) Configure the  Enable Overriding of Icon from Webhooks  option to allow external applciations to change the icon of the account posting messages. If not enabled, the icon of the creator of the webhook URL is used to post messages   Setting Up Existing Integrations  If you've already found or built an integration and are just looking to hook it up, then you should just need to follow the specific instructions of that integration. If the integration is using Mattermost incoming webhooks, then at some point in the instructions it will ask for a webhook URL. You can get this URL by following the first step in the next section  Creating Integrations using Incoming Webhooks .  Creating Integrations using Incoming Webhooks  You can create a webhook integration to post into Mattermost channels and private groups using these steps:  Note: Incoming webhooks must be enabled. Only your Mattermost system administrator can enable incoming webhooks if they are currently disabled.   Create a Mattermost Incoming Webhook URL  Login to your Mattermost team site and go to  Account Settings -  Integrations  Next to  Incoming Webhooks  click  Edit  Select the channel or private group to receive webhook payloads, then click  Add  to create the webhook   To see your new webhook in action, try a curl command from your terminal or command-line to send a JSON string as the  payload  parameter in a HTTP POST request   Example:\n  curl -i -X POST -d 'payload={\"text\": \"Hello, this is some text.\"}' http://yourmattermost.com/hooks/xxx-generatedkey-xxx     Build your integration in the programming language of your choice   Most integrations will be used to translate some sort of output from another system to an appropriately formatted input that will be passed into the Mattermost webhook URL. For example, an integration could take events generated by  GitLab outgoing webhooks  and parse them into a JSON body to post into Mattermost  To get the message posted into Mattermost, your integration will need to create an HTTP POST request that will submit to the incoming webhook URL you created before. The body of the request must have a  payload  that contains a JSON object that specifies a  text  parameter. For example,  payload={\"text\": \"Hello, this is some text.\"}  is a valid body for a request  Set up your integration running on Heroku, an AWS server or a server of your own to start sending real time updates to Mattermost channels and private groups   Additional Notes:    For the HTTP request body, if  Content-Type  is specified as  application/json  in the headers of the HTTP request then the body of the request can be direct JSON. For example,  {\"text\": \"Hello, this is some text.\"}    You can override the channel specified in the webhook definition by specifying a  channel  parameter in your payload. For example, you might have a single webhook created for  Town Square , but you can use  payload={\"channel\": \"off-topic\", \"text\": \"Hello, this is some text.\"}  to send a message to the  Off-Topic  channel using the same webhook URL    In addition, with  Enable Overriding of Usernames from Webhooks  turned on,  you can also override the username the message posts as by providing a  username  parameter in your JSON payload. For example, you might want your message looking like it came from a robot so you can use  payload={\"username\": \"robot\", \"text\": \"Hello, this is some text.\"}  to change the username of the post to robot. Note, to combat any malicious users from trying to use this to perform  phishing attacks  a  BOT  indicator appears next to posts coming from webhooks    With  Enable Overriding of Icon from Webhooks  turned on, you can similarly change the icon the message posts with by providing a link to an image in the  icon_url  parameter of your payload. For example,  payload={\"icon_url\": \"http://somewebsite.com/somecoolimage.jpg\", \"text\": \"Hello, this is some text.\"}  will post using whatever image is located at  http://somewebsite.com/somecoolimage.jpg  as the icon for the post    Also, as mentioned previously,  markdown  can be used to create richly formatted payloads, for example:  payload={\"text\": \"# A Header\\nThe _text_ below **the** header.\"}  creates a messages with a header, a carriage return and bold text for \"the\"    Just like regular posts, the text will be limited to 4000 characters at maximum    Slack Compatibility  As mentioned above, Mattermost makes it easy to take integrations written for Slack's proprietary JSON payload format and repurpose them to become Mattermost integrations. The following automatic translations are supported:   Payloads designed for Slack using   to note the need to hyperlink a URL, such as  payload={\"text\": \" http://www.mattermost.com/ \"} , are translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack  Similiarly, payloads designed for Slack using  |  within a   to define linked text, such as  payload={\"text\": \"Click  http://www.mattermost.com/|here  for a link.\"} , are also translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack  Like Slack, by overriding the channel name with an @username, such as payload={\"text\": \"Hi\", channel: \"@jim\"}, you can send the message to a user through your direct message chat  Channel names can be prepended with a #, like they are in Slack incoming webhooks, and the message will still be sent to the correct channel   To see samples and community contributions, please visit  http://mattermost.org/webhooks .  Known Issues in v1.1   The  attachments  payload used in Slack is not yet supported  Overriding of usernames does not yet apply to notifications (fixed on master)   Cannot supply  icon_emoji  to override the message icon  Webhook UI fails when connected to deleted channel (fixed on master)", 
            "title": "Incoming Webhooks"
        }, 
        {
            "location": "/integrations/webhooks/Outgoing-Webhooks/index.html", 
            "text": "Outgoing Webhooks\n\n\nOutgoing webhooks allow external applications, written in the programming language of your choice--to receive HTTP POST requests whenever a user posts to a certain channel, with a trigger word at the beginning of the message, or a combination of both. If the external application responds appropriately to the HTTP request, as response post can be made in the channel where the original post occurred.\n\n\nA couple key points:\n\n\n\n\nMattermost outgoing webhooks are Slack-compatible.\n If you've used Slack's outgoing webhooks to create integrations, you can copy and paste that code to create Mattermost integrations. Mattermost automatically translates Slack's proprietary JSON payload format into markdown to render in Mattermost messages\n\n\nMattermost outgoing webhooks support full markdown.\n When an integration responds with a message to post, it will have access to a rich range of formatting unavailable in Slack that is made possible through \nmarkdown support\n in Mattermost. This includes headings, formatted fonts, tables, inline images and other options supported by [Mattermost Markdown]\n\n\n\n\nExample:\n\n\nSuppose you had an external application that recieved a post event whenever a message starting with \n#build\n. If a user posted the message \n#build Let's see the status\n, then the external application would receive an HTTP POST with data about that message. The application could then respond with a table of total tests run and total tests failed by component category, with links to failed tests by category. An example response might be:\n\n\n{\ntext\n: \n\n---\n##### Build Break - Project X - December 12, 2015 - 15:32 GMT +0\n| Component  | Tests Run   | Tests Failed                                   |\n|:-----------|:------------|:-----------------------------------------------|\n| Server     | 948         | :white_check_mark: 0                           |\n| Web Client | 123         | :warning: [2 (see details)](http://linktologs) |\n| iOS Client | 78          | :warning: [3 (see details)](http://linktologs) |\n---\n\n}\n\n\n\n\nWhich would render in a Mattermost message as follows:\n\n\n\n\nBuild Break - Project X - December 12, 2015 - 15:32 GMT +0\n\n\n\n\n\n\n\n\nComponent\n\n\nTests Run\n\n\nTests Failed\n\n\n\n\n\n\n\n\n\n\nServer\n\n\n948\n\n\n:white_check_mark: 0\n\n\n\n\n\n\nWeb Client\n\n\n123\n\n\n:warning: \n2 (see details)\n\n\n\n\n\n\niOS Client\n\n\n78\n\n\n:warning: \n3 (see details)\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\nEnabling Outgoing Webhooks\n\n\nOutgoing webhooks are off by default, and can be enabled by the system administrator. If you are the system administrator you can enable them by doing the following:\n\n\n\n\nLogin to your Mattermost team account that has the system administrator role.\n\n\nEnable outgoing webhooks from \nSystem Console -\n Service Settings\n.\n\n\n(Optional) Configure the \nEnable Overriding of Usernames from Webhooks\n option to allow external applications to post messages under any name. If not enabled, the username of the creator of the webhook URL is used to post messages.\n\n\n(Optional) Configure the \nEnable Overriding of Icon from Webhooks\n option to allow external applciations to change the icon of the account posting messages. If not enabled, the icon of the creator of the webhook URL is used to post messages.\n\n\n\n\nSet Up an Outgoing Webhook\n\n\nOnce outgoing webhooks are enabled, you will be able to set one up through the Mattermost UI. You will need to know the following\n\n\n\n\nThe channel (if not all of them) you want to listen to post events from\n\n\nThe trigger words (if any) that will trigger a post event if they are the \nfirst word\n of the post\n\n\nThe URL you want Mattermost to report the events to\n\n\n\n\nOnce you have those, you can follow these steps to set up your webhook:\n\n\n\n\nLogin to your Mattermost team site and go to \nAccount Settings -\n Integrations\n\n\nNext to \nOutgoing Webhooks\n click \nEdit\n\n\nUnder \nAdd a new outgoing webhook\n select your options\n\n\nSelect a channel from the \nChannel\n dropdown to only report events from a certain channel (optional if Trigger Words selected)\n\n\nEnter comma separated words into \nTrigger Words\n to only report events from posts that start with one of those words (optional if \nChannel\n selected)\n\n\nEnter new line separated URLs that the post events will be sent too\n\n\nClick \nAdd\n to add your webhook to the system\n\n\nYour new outgoing webhook will be displayed below with a \nToken\n that any external application that wants to listen to the webhook should ask for in it's instructions\n\n\n\n\nCreating Integrations using Outgoing Webhooks\n\n\nIf you'd like to build your own integration that uses outgoing webhooks, you can follow these general guidelines:\n\n\n\n\nIn the programming language of your choice, write your integration to perform what you had in mind\n\n\n\n\nYour integration should have a function for receiving HTTP POSTs from Mattermost that look like this example:\n  ```\n    Content-Length: 244\n    User-Agent: Go 1.1 package http\n    Host: localhost:5000\n    Accept: application/json\n    Content-Type: application/x-www-form-urlencoded\n\n\nchannel_id=hawos4dqtby53pd64o4a4cmeoo\n\nchannel_name=town-square\n\nteam_domain=someteam\n\nteam_id=kwoknj9nwpypzgzy78wkw516qe\n\ntext=some text here\n\ntimestamp=1445532266\n\ntoken=zmigewsanbbsdf59xnmduzypjc\n\ntrigger_word=some\n\nuser_id=rnina9994bde8mua79zqcg5hmo\n\nuser_name=somename\n  \n2. Your integration must have a configurable **MATTERMOST_TOKEN** variable that is the Token given to you when you set up the outgoing webhook in Mattermost as decribed in the previous section _Set Up an Outgoing Webhook_. This configurable **MATTERMOST_TOKEN** must match the token in the request body so your application can be sure the request came from Mattermost\n 3. If you want your integration to post a message back to the same channel, it can respond to the HTTP POST request from Mattermost with a JSON response body similar to this example:\n\n  {\n\"text\": \"This is some response text.\"\n  }\n  ```\n3. Set up your integration running on Heroku, an AWS server or a server of your own to start getting real time post events from Mattermost channels\n\n\n\n\n\n\nAdditional Notes:\n\n\n\n\n\n\nWith \nEnable Overriding of Usernames from Webhooks\n turned on,  you can also override the username the message posts as by providing a \nusername\n parameter in your JSON payload. For example, you might want your message looking like it came from a robot so you can use the JSON response \n{\"username\": \"robot\", \"text\": \"Hello, this is some text.\"}\n to change the username of the post to robot. Note, to combat any malicious users from trying to use this to perform \nphishing attacks\n a \nBOT\n indicator appears next to posts coming from webhooks\n\n\n\n\n\n\nWith \nEnable Overriding of Icon from Webhooks\n turned on, you can similarly change the icon the message posts with by providing a link to an image in the \nicon_url\n parameter of your JSON response. For example, \n{\"icon_url\": \"http://somewebsite.com/somecoolimage.jpg\", \"text\": \"Hello, this is some text.\"}\n will post using whatever image is located at \nhttp://somewebsite.com/somecoolimage.jpg\n as the icon for the post\n\n\n\n\n\n\nAlso, as mentioned previously, \nmarkdown\n can be used to create richly formatted payloads, for example: \npayload={\"text\": \"# A Header\\nThe _text_ below **the** header.\"}\n creates a messages with a header, a carriage return and bold text for \"the\"\n\n\n\n\n\n\nJust like regular posts, the text will be limited to 4000 characters at maximum\n\n\n\n\n\n\nSlack Compatibility\n\n\nAs mentioned above, Mattermost makes it easy to take integrations written for Slack's proprietary JSON payload format and repurpose them to become Mattermost integrations. The following automatic translations are supported:\n\n\n\n\nThe HTTP POST request body is formatted the same as Slack's, which means your Slack integration's receiving function should not need to change at all to be compatible with Mattermost\n\n\nJSON responses designed for Slack using \n to note the need to hyperlink a URL, such as \n{\"text\": \"\nhttp://www.mattermost.com/\n\"}\n, are translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack\n\n\nSimiliarly, responses designed for Slack using \n|\n within a \n to define linked text, such as \n{\"text\": \"Click \nhttp://www.mattermost.com/|here\n for a link.\"}\n, are also translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack\n\n\n\n\nTo see samples and community contributions, please visit \nhttp://mattermost.org/webhooks\n.\n\n\nKnown Issues in v1.1\n\n\n\n\nOverriding of usernames does not yet apply to notifications\n\n\nCannot supply \nicon_emoji\n to override the message icon", 
            "title": "Outgoing Webhooks"
        }, 
        {
            "location": "/integrations/webhooks/Outgoing-Webhooks/index.html#outgoing-webhooks", 
            "text": "Outgoing webhooks allow external applications, written in the programming language of your choice--to receive HTTP POST requests whenever a user posts to a certain channel, with a trigger word at the beginning of the message, or a combination of both. If the external application responds appropriately to the HTTP request, as response post can be made in the channel where the original post occurred.  A couple key points:   Mattermost outgoing webhooks are Slack-compatible.  If you've used Slack's outgoing webhooks to create integrations, you can copy and paste that code to create Mattermost integrations. Mattermost automatically translates Slack's proprietary JSON payload format into markdown to render in Mattermost messages  Mattermost outgoing webhooks support full markdown.  When an integration responds with a message to post, it will have access to a rich range of formatting unavailable in Slack that is made possible through  markdown support  in Mattermost. This includes headings, formatted fonts, tables, inline images and other options supported by [Mattermost Markdown]   Example:  Suppose you had an external application that recieved a post event whenever a message starting with  #build . If a user posted the message  #build Let's see the status , then the external application would receive an HTTP POST with data about that message. The application could then respond with a table of total tests run and total tests failed by component category, with links to failed tests by category. An example response might be:  { text :  \n---\n##### Build Break - Project X - December 12, 2015 - 15:32 GMT +0\n| Component  | Tests Run   | Tests Failed                                   |\n|:-----------|:------------|:-----------------------------------------------|\n| Server     | 948         | :white_check_mark: 0                           |\n| Web Client | 123         | :warning: [2 (see details)](http://linktologs) |\n| iOS Client | 78          | :warning: [3 (see details)](http://linktologs) |\n--- }  Which would render in a Mattermost message as follows:   Build Break - Project X - December 12, 2015 - 15:32 GMT +0     Component  Tests Run  Tests Failed      Server  948  :white_check_mark: 0    Web Client  123  :warning:  2 (see details)    iOS Client  78  :warning:  3 (see details)    ---       Enabling Outgoing Webhooks  Outgoing webhooks are off by default, and can be enabled by the system administrator. If you are the system administrator you can enable them by doing the following:   Login to your Mattermost team account that has the system administrator role.  Enable outgoing webhooks from  System Console -  Service Settings .  (Optional) Configure the  Enable Overriding of Usernames from Webhooks  option to allow external applications to post messages under any name. If not enabled, the username of the creator of the webhook URL is used to post messages.  (Optional) Configure the  Enable Overriding of Icon from Webhooks  option to allow external applciations to change the icon of the account posting messages. If not enabled, the icon of the creator of the webhook URL is used to post messages.   Set Up an Outgoing Webhook  Once outgoing webhooks are enabled, you will be able to set one up through the Mattermost UI. You will need to know the following   The channel (if not all of them) you want to listen to post events from  The trigger words (if any) that will trigger a post event if they are the  first word  of the post  The URL you want Mattermost to report the events to   Once you have those, you can follow these steps to set up your webhook:   Login to your Mattermost team site and go to  Account Settings -  Integrations  Next to  Outgoing Webhooks  click  Edit  Under  Add a new outgoing webhook  select your options  Select a channel from the  Channel  dropdown to only report events from a certain channel (optional if Trigger Words selected)  Enter comma separated words into  Trigger Words  to only report events from posts that start with one of those words (optional if  Channel  selected)  Enter new line separated URLs that the post events will be sent too  Click  Add  to add your webhook to the system  Your new outgoing webhook will be displayed below with a  Token  that any external application that wants to listen to the webhook should ask for in it's instructions   Creating Integrations using Outgoing Webhooks  If you'd like to build your own integration that uses outgoing webhooks, you can follow these general guidelines:   In the programming language of your choice, write your integration to perform what you had in mind   Your integration should have a function for receiving HTTP POSTs from Mattermost that look like this example:\n  ```\n    Content-Length: 244\n    User-Agent: Go 1.1 package http\n    Host: localhost:5000\n    Accept: application/json\n    Content-Type: application/x-www-form-urlencoded  channel_id=hawos4dqtby53pd64o4a4cmeoo \nchannel_name=town-square \nteam_domain=someteam \nteam_id=kwoknj9nwpypzgzy78wkw516qe \ntext=some text here \ntimestamp=1445532266 \ntoken=zmigewsanbbsdf59xnmduzypjc \ntrigger_word=some \nuser_id=rnina9994bde8mua79zqcg5hmo \nuser_name=somename\n   2. Your integration must have a configurable **MATTERMOST_TOKEN** variable that is the Token given to you when you set up the outgoing webhook in Mattermost as decribed in the previous section _Set Up an Outgoing Webhook_. This configurable **MATTERMOST_TOKEN** must match the token in the request body so your application can be sure the request came from Mattermost\n 3. If you want your integration to post a message back to the same channel, it can respond to the HTTP POST request from Mattermost with a JSON response body similar to this example: \n  {\n\"text\": \"This is some response text.\"\n  }\n  ```\n3. Set up your integration running on Heroku, an AWS server or a server of your own to start getting real time post events from Mattermost channels    Additional Notes:    With  Enable Overriding of Usernames from Webhooks  turned on,  you can also override the username the message posts as by providing a  username  parameter in your JSON payload. For example, you might want your message looking like it came from a robot so you can use the JSON response  {\"username\": \"robot\", \"text\": \"Hello, this is some text.\"}  to change the username of the post to robot. Note, to combat any malicious users from trying to use this to perform  phishing attacks  a  BOT  indicator appears next to posts coming from webhooks    With  Enable Overriding of Icon from Webhooks  turned on, you can similarly change the icon the message posts with by providing a link to an image in the  icon_url  parameter of your JSON response. For example,  {\"icon_url\": \"http://somewebsite.com/somecoolimage.jpg\", \"text\": \"Hello, this is some text.\"}  will post using whatever image is located at  http://somewebsite.com/somecoolimage.jpg  as the icon for the post    Also, as mentioned previously,  markdown  can be used to create richly formatted payloads, for example:  payload={\"text\": \"# A Header\\nThe _text_ below **the** header.\"}  creates a messages with a header, a carriage return and bold text for \"the\"    Just like regular posts, the text will be limited to 4000 characters at maximum    Slack Compatibility  As mentioned above, Mattermost makes it easy to take integrations written for Slack's proprietary JSON payload format and repurpose them to become Mattermost integrations. The following automatic translations are supported:   The HTTP POST request body is formatted the same as Slack's, which means your Slack integration's receiving function should not need to change at all to be compatible with Mattermost  JSON responses designed for Slack using   to note the need to hyperlink a URL, such as  {\"text\": \" http://www.mattermost.com/ \"} , are translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack  Similiarly, responses designed for Slack using  |  within a   to define linked text, such as  {\"text\": \"Click  http://www.mattermost.com/|here  for a link.\"} , are also translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack   To see samples and community contributions, please visit  http://mattermost.org/webhooks .  Known Issues in v1.1   Overriding of usernames does not yet apply to notifications  Cannot supply  icon_emoji  to override the message icon", 
            "title": "Outgoing Webhooks"
        }, 
        {
            "location": "/integrations/services/Gitlab-Integration-Service-for-Mattermost/index.html", 
            "text": "GitLab Integration Service for Mattermost\n\n\nThis \nopen source integration service\n let you configure real-time notifications on GitLab issues, merge requests and comments to be delivered to selected Mattermost channels.\n\n\nThe service can be installed on any Linux-based web server and instructions for \nHeroku\n and \nUbuntu 14.04\n are included. Please see \nMattermost incoming webhooks documentation\n for details on formatting options within the service.\n\n\nThe Mattermost community is invited to fork, extend and repurpose this service for other applications. If you'd like your integration featured on http://mattermost.org/webhooks, please mail info@mattermost.org or tweet to us at @mattermosthq.", 
            "title": "Gitlab Integration Service for Mattermost"
        }, 
        {
            "location": "/integrations/services/Gitlab-Integration-Service-for-Mattermost/index.html#gitlab-integration-service-for-mattermost", 
            "text": "This  open source integration service  let you configure real-time notifications on GitLab issues, merge requests and comments to be delivered to selected Mattermost channels.  The service can be installed on any Linux-based web server and instructions for  Heroku  and  Ubuntu 14.04  are included. Please see  Mattermost incoming webhooks documentation  for details on formatting options within the service.  The Mattermost community is invited to fork, extend and repurpose this service for other applications. If you'd like your integration featured on http://mattermost.org/webhooks, please mail info@mattermost.org or tweet to us at @mattermosthq.", 
            "title": "GitLab Integration Service for Mattermost"
        }, 
        {
            "location": "/process/documentation-guidelines/index.html", 
            "text": "Documentation Conventions\n\n\nThe most important thing about documentation is getting it done and out to the community. \n\n\nAfter that, we can work on upgrading the quality of documentation. The below chart summarizes the different levels of documentation and how the quality gates are applied. \n\n\nNote: Documentation Guidelines are new, and iterating. Documentation has started to balloon and this is our attempt at reducing ambiguity and increasing consistency, but the conventions here are very open to discussion.\n\n\n\n\n\n\n\n\nStars\n\n\nBenchmark\n\n\nTimeline\n\n\n\n\n\n\n\n\n\n\n1\n\n\nDocumentation is correct.\n\n\nFirst draft checked in by developer. Okay to ship in first release of new feature.\n\n\n\n\n\n\n2\n\n\nDocumentation a) follows all objective formatting criteria, b) is tested by someone other than the author, c) satisfies above.\n\n\nFirst edit under objective rules. Required before second release cycle with this feature included.\n\n\n\n\n\n\n3\n\n\nDocumentation a) follows all subjective style criteria, b) is reviewed and edited by someone who has previously authored 3-star documentation, and c)  satisfies above.\n\n\nSecond edit under subjective rules. Required before third release cycle with this feature included\n\n\n\n\n\n\n4\n\n\nDocumentation a) has received at least 1 edit due to user feedback, b) has received at least one unprompted compliment from user community on quality, c) satisfies above.\n\n\nAdditional edits to refine documentation based on user feedback\n\n\n\n\n\n\n\n\n1-Star Requirements: Correctness\n\n\nList precise dependencies\n\n\n\n\nBe explicit about what specific dependencies have been tested as part of an installation procedure. \n\n\nBe explicit about assumptions of compatibility on systems that have not been tested. \n\n\nDo not claim the system works on later versions of a platform if backwards compatibility is not a priority for the dependency (It's okay to say Chrome version 43 and higher, but not Python 2.6 and higher, because Python 3.0 is explicitly incompatible with previous versions). \n\n\n\n\nCorrect\n\n\n\n\nThis procedure works on an Ubuntu 14.04 server with Python 2.6 installed and should work on compatible Linux-based operating systems and compatible versions of Python. \n\n\n\n\nIncorrect\n\n\n\n\nThis procedure works on Linux servers running Python.  \n\n\nalso: \n\n\nThis procedure works on Linux servers running Python 2.6 and higher. \n\n\n\n\n2-Star Requirements: Objective Formatting Checklist\n\n\nUse headings\n\n\nHeadings in markdown provide anchors that can be used to easily reference sub-sections of long pieces of documentation. This is preferrable to just numbering sections without headings. \n\n\nCorrect:\n\n\n\n\nStep 1: Add a heading\n\n\nThis makes things easier to reference via hyperlinks\n\n\nStep 2: Link to headings\n\n\nSo things are easier to find\n\n\n\n\nIncorrect:\n\n\n\n\nStep 1: Add a heading\n\nThis makes things easier to reference via hyperlinks\n\nStep 2: Link to headings\n\nSo things are easier to find\n\n\n\n\nUse appropriate heading case\n\n\nCases in headings may vary depending on usage.\n\n\nWhen to use Title Case\n\n\nH1, H2, H3 headings should be \"Title Case\" and less than four words, except if a colon is used, then four words per segment separated by the colon. \n\n\nThese large headings are typically shorter and help with navigating large documents\n\n\nWhen to use sentence case\n\n\nH3, H4, H5 headings should be \"Sentence case\" and can be any length. \n\n\nThese headers are smaller and used to summarize sections. H3 can be considered either a large or small heading. \n\n\nThese conventions are new, so there's flexibility around them, when you're not sure, consider the convention here as default. \n\n\nOne instruction per line\n\n\nIt's easy to miss instructions when they're compounded. Have only one instruction per line, so documentation looks more like a checklist. \n\n\nA support person should be able to say \"Did you complete step 7?\" instead of \"Did you complete the second part of step 7 after doing XXX?\"\n\n\nCorrect:\n\n\n\n\n\n\nFor \nPredefined configuration\n look under \nGeneric\n and select \nDocker\n. \n\n\nFor \nEnvironment type\n select \nSingle instance\n\n\n\n\n\n\nIncorrect:\n\n\n\n\n\n\nFor \nPredefined configuration\n look under \nGeneric\n and select \nDocker\n. For \nEnvironment type\n select \nSingle instance\n\n\n\n\n\n\nLists end without periods\n\n\nSentences within bullet points or numbered lists should end in normal punctuation. The sentence or fragment at the end of a bullet point should not have a period. \n\n\nCorrect\n\n\n\n\n\n\nThis is a sentence within a bullet point. This is the end of a bullet point without a period\n\n\n\n\n\n\nIncorrect\n\n\n\n\n\n\nThis is an incorrect ending of a bullet point with a period. \n\n\n\n\n\n\nAvoid Passive Phrases\n\n\nExamples of passive phrases include \"have\", \"had\", \"was\", \"can be\", \"has been\" and documentation is shorter and clearer without them. \n\n\nCorrect\n\n\n\n\nThis software \nruns\n on any server that supports Python. \n\n\n\n\nIncorrect\n\n\n\n\nThis software \ncan be run\n on any server that supports Python. \n\n\n\n\n3-Star Requirements: Subjective Style Guidelines\n\n\nBe Concise\n\n\nTry to use fewer words when possible. \n\n\nCorrect:\n\n\n\n\nThis integration posts \nissue\n, \ncomment\n and \nmerge request\n events from a GitLab repository into specific Mattermost channels by formatting output from \nGitLab's outgoing webhooks\n to \nMattermost's incoming webhooks\n.\n\n\n\n\nIncorrect:\n\n\n\n\nThis integration makes use of GitLab's outgoing webhooks and Mattermost's incoming webhooks to post GitLab events into Mattermost. You can find GitLab's outgoing webhooks described \nhere\n and Mattermost's incoming webhooks described \nhere\n.\n\n\n\n\nUse appropriate emphasis\n\n\nMention Clickable Controls in \nBold\n, Sections and Setting Names in \nItalics\n, and Key Strokes in \npre-formatted text\n.\n\n\nTo make it clear and consistent across documentation on how we describe controls that a user is asked to manipulate, we have a number of guidelines:\n\n\nBold\n\n- Please \nbold\n the names of controls you're asking users to click. The text that is bolded should match the label of the control in the user interface. Do not format these references with \nitalics\n, ALL-CAPS or \npre-formatted text\n.\n- Use \n to express a series of clicks, for example clicking on \nButton One\n \n \nButton Two\n \n \nButton Three\n. \n- If a button might be difficult to find, give a hint about its location \nbefore\n mentioning the name of the control (this helps people find the hint before they start searching, if the see the name of the button first, they might not continue reading to find the hint before starting to look). \n\n\nItalics\n\n- Please \nitalicize\n setting names or section headings that identify that the user is looking in the correct area. The text that is italicized should match the name of the setting or section in the user interface.\n\n- It is helpful to use italics to guide the user to the correct area before mentioning a clickable action in bold.\n\n\npre-formatted text\n\n- Please use \npre-formatted text\n to identify when a user must enter key strokes or paste text into an input box.\n\n\nCorrect\n\n\n\n\nType \nmattermost-integration-giphy\n in the \nrepo-name\n field, then click \nSearch\n and then the \nConnect\n button once Heroku finds your repository\n\n\n\n\nIncorrect\n\n\n\n\nType \"mattermost-integration-giphy\" in the \nrepo-name\n field, then click Search and then the \nConnect\n button once Heroku finds your repository", 
            "title": "Documentation guidelines"
        }, 
        {
            "location": "/process/documentation-guidelines/index.html#documentation-conventions", 
            "text": "The most important thing about documentation is getting it done and out to the community.   After that, we can work on upgrading the quality of documentation. The below chart summarizes the different levels of documentation and how the quality gates are applied.   Note: Documentation Guidelines are new, and iterating. Documentation has started to balloon and this is our attempt at reducing ambiguity and increasing consistency, but the conventions here are very open to discussion.     Stars  Benchmark  Timeline      1  Documentation is correct.  First draft checked in by developer. Okay to ship in first release of new feature.    2  Documentation a) follows all objective formatting criteria, b) is tested by someone other than the author, c) satisfies above.  First edit under objective rules. Required before second release cycle with this feature included.    3  Documentation a) follows all subjective style criteria, b) is reviewed and edited by someone who has previously authored 3-star documentation, and c)  satisfies above.  Second edit under subjective rules. Required before third release cycle with this feature included    4  Documentation a) has received at least 1 edit due to user feedback, b) has received at least one unprompted compliment from user community on quality, c) satisfies above.  Additional edits to refine documentation based on user feedback", 
            "title": "Documentation Conventions"
        }, 
        {
            "location": "/process/documentation-guidelines/index.html#1-star-requirements-correctness", 
            "text": "List precise dependencies   Be explicit about what specific dependencies have been tested as part of an installation procedure.   Be explicit about assumptions of compatibility on systems that have not been tested.   Do not claim the system works on later versions of a platform if backwards compatibility is not a priority for the dependency (It's okay to say Chrome version 43 and higher, but not Python 2.6 and higher, because Python 3.0 is explicitly incompatible with previous versions).    Correct   This procedure works on an Ubuntu 14.04 server with Python 2.6 installed and should work on compatible Linux-based operating systems and compatible versions of Python.    Incorrect   This procedure works on Linux servers running Python.    also:   This procedure works on Linux servers running Python 2.6 and higher.", 
            "title": "1-Star Requirements: Correctness"
        }, 
        {
            "location": "/process/documentation-guidelines/index.html#2-star-requirements-objective-formatting-checklist", 
            "text": "Use headings  Headings in markdown provide anchors that can be used to easily reference sub-sections of long pieces of documentation. This is preferrable to just numbering sections without headings.   Correct:   Step 1: Add a heading  This makes things easier to reference via hyperlinks  Step 2: Link to headings  So things are easier to find   Incorrect:   Step 1: Add a heading \nThis makes things easier to reference via hyperlinks Step 2: Link to headings \nSo things are easier to find   Use appropriate heading case  Cases in headings may vary depending on usage.  When to use Title Case  H1, H2, H3 headings should be \"Title Case\" and less than four words, except if a colon is used, then four words per segment separated by the colon.   These large headings are typically shorter and help with navigating large documents  When to use sentence case  H3, H4, H5 headings should be \"Sentence case\" and can be any length.   These headers are smaller and used to summarize sections. H3 can be considered either a large or small heading.   These conventions are new, so there's flexibility around them, when you're not sure, consider the convention here as default.   One instruction per line  It's easy to miss instructions when they're compounded. Have only one instruction per line, so documentation looks more like a checklist.   A support person should be able to say \"Did you complete step 7?\" instead of \"Did you complete the second part of step 7 after doing XXX?\"  Correct:    For  Predefined configuration  look under  Generic  and select  Docker .   For  Environment type  select  Single instance    Incorrect:    For  Predefined configuration  look under  Generic  and select  Docker . For  Environment type  select  Single instance    Lists end without periods  Sentences within bullet points or numbered lists should end in normal punctuation. The sentence or fragment at the end of a bullet point should not have a period.   Correct    This is a sentence within a bullet point. This is the end of a bullet point without a period    Incorrect    This is an incorrect ending of a bullet point with a period.     Avoid Passive Phrases  Examples of passive phrases include \"have\", \"had\", \"was\", \"can be\", \"has been\" and documentation is shorter and clearer without them.   Correct   This software  runs  on any server that supports Python.    Incorrect   This software  can be run  on any server that supports Python.", 
            "title": "2-Star Requirements: Objective Formatting Checklist"
        }, 
        {
            "location": "/process/documentation-guidelines/index.html#3-star-requirements-subjective-style-guidelines", 
            "text": "Be Concise  Try to use fewer words when possible.   Correct:   This integration posts  issue ,  comment  and  merge request  events from a GitLab repository into specific Mattermost channels by formatting output from  GitLab's outgoing webhooks  to  Mattermost's incoming webhooks .   Incorrect:   This integration makes use of GitLab's outgoing webhooks and Mattermost's incoming webhooks to post GitLab events into Mattermost. You can find GitLab's outgoing webhooks described  here  and Mattermost's incoming webhooks described  here .   Use appropriate emphasis  Mention Clickable Controls in  Bold , Sections and Setting Names in  Italics , and Key Strokes in  pre-formatted text .  To make it clear and consistent across documentation on how we describe controls that a user is asked to manipulate, we have a number of guidelines:  Bold \n- Please  bold  the names of controls you're asking users to click. The text that is bolded should match the label of the control in the user interface. Do not format these references with  italics , ALL-CAPS or  pre-formatted text .\n- Use   to express a series of clicks, for example clicking on  Button One     Button Two     Button Three . \n- If a button might be difficult to find, give a hint about its location  before  mentioning the name of the control (this helps people find the hint before they start searching, if the see the name of the button first, they might not continue reading to find the hint before starting to look).   Italics \n- Please  italicize  setting names or section headings that identify that the user is looking in the correct area. The text that is italicized should match the name of the setting or section in the user interface. \n- It is helpful to use italics to guide the user to the correct area before mentioning a clickable action in bold.  pre-formatted text \n- Please use  pre-formatted text  to identify when a user must enter key strokes or paste text into an input box.  Correct   Type  mattermost-integration-giphy  in the  repo-name  field, then click  Search  and then the  Connect  button once Heroku finds your repository   Incorrect   Type \"mattermost-integration-giphy\" in the  repo-name  field, then click Search and then the  Connect  button once Heroku finds your repository", 
            "title": "3-Star Requirements: Subjective Style Guidelines"
        }, 
        {
            "location": "/process/release-process/index.html", 
            "text": "We're working on making internal processes in the Mattermost core team more transparent for the community. Below is a working draft of our software development process, which will be updated live as we refine our process.\n\n\nQuestions, feedback, comments always welcome, \n\n\n\n\nMattermost core team works on a monthly release process, with a new version shipping on the 16th of each month. \n\n\nThis document outlines the development process for the Mattermost core team, which draws from what we find works best for us from Agile, Scrum and Software Development Lifecycle approaches.\n\n\nThis is a working document that will update as our process evolves.\n\n\n- Beginning of release\n\n\n\n\n(Ops) Queue an agenda item for first team meeting of the release to review Roadmap\n\n\n\n\n- (10 weekdays before release date) Cut-off for major features\n\n\n\n\nNo major features can be committed to the current release after this date\n\n\n(Dev) Prioritize reviewing, updating, and merging of all pull requests that are going to make it into the release \n\n\nThere should be no more tickets in the \npull request queue\n marked for the current release\n\n\n(Leads) Meets to prioritize the final tickets of the release\n\n\nBacklog is reviewed and major features that won\u2019t make it are moved to next release\n\n\nTriage tickets\n\n\nReview roadmap for next release\n\n\n(Marketing) Writes the \"Highlights\" section of the Changelog\n\n\n(PM) Write compatibility updates for config.json and database changes \nSee example\n\n\n(PM) Update \nUpgrade Guide\n for any steps needed to upgrade to new version\n\n\n(PM) Prepare tickets for cutting RCs builds, filing issue in GitLab omnibus to take RC candidate, testing GitLab RC with Mattermost\n\n\n(Stand-up) Each team member discusses worst bug\n\n\n\n\n- (8 weekdays before release date) Feature Complete and Stabilization\n\n\n\n\nAfter the cut-off time for Feature Complete, Dev prioritizes reviewing PRs and committing to master so Stabilization period can begin, with testing and high priority bug fixes\n\n\nDuring Stabilization period only BUGS can be committed to master, non-bug tickets are tagged for next version and wait until after a release candidate is cut to be added to master\n\n\n(PM) Review all \nS1 bugs\n and mark important ones as high priority\n\n\n(Dev + PM) Exceptions can be made by triage team consensus across PM and Dev. List of approved changes for release candidate 1 here: https://mattermost.atlassian.net/issues/?filter=10204\n\n\n(PM) Documentation \n\n\n(PM) Make Changelog PR with updates for latest feature additions and changes\n\n\n(PM) Make Changelog PR with updates to contributors\n\n\n(PM) Make NOTICE.txt PR for any new libraries added from dev, if not added already \n\n\n(PM) Prioritize any developer documentation tickets\n\n\n(PM and devs) Sign-off testing of their feature areas (i.e. PM/dev either signs-off that their area is well tested, or they flag that potential quality issues may exist)\n\n\n(Ops) Mail out mugs to any new contributors\n\n\n(Team) Select \"Top Contributor\" for the release from external contributions to be mentioned in release announcement\n\n\n(Marketing) Decides announce date (discuss in meeting)\n\n\n(Ops) Post Announce Date in Release channel + update the channel header to reflect date\n\n\n(Marketing) Communicates checklist of items needed by specific dates to write the blog post announce (e.g. screenshots, GIFs, documentation) and begins to write the blog post, tweet, and email for the release announcement\n\n\n(PM) Works with Ops to check the Quality Gate for feature complete\n\n\n(PM) Communicate to team the plan for next release\n\n\n(Stand-up) Each team member discusses worst bug\n\n\n\n\n- (5 weekdays before release date) Code Complete and Release Candidate Cut\n\n\n\n\n(Team) Meets to discuss release at 10am PST \n\n\n(PM) Each area changed in latest release is assigned a PM owner to lead testing\n\n\n(Ops) Walks through each item of the \nCode Complete and Release Candidate Cut\n checklist\n\n\n(Dev) Last check of tickets that need to be merged before RC1\n\n\n(Team) Each team member discusses worst bug\n\n\nAfter 10am PST meeting the release is considered \u201cCode Complete\u201d. \n\n\n(Dev) Completes final reviews and updates of PRs marked for the release version \n\n\nThere should be no more tickets in the \npull request queue\n marked for the current release\n\n\n\n\n\n\nMaster is tagged and branched and \u201cRelease Candidate 1\u2033 is cut (e.g. 1.1.0-RC1) according to the Release Candidate Checklist\n\n\n(PM) Create meta issue for regressions in GitHub (see \nexample\n)\n\n\n\n\n- (4 weekdays before release date) Release Candidate Testing\n\n\n\n\nFinal testing is conducted by the team on the acceptance server and any issues found are filed\n\n\n(Dev) Tests upgrade from previous version to current version, following the \nUpgrade Guide\n \n\n\n(Ops) Posts copy of the \nRelease Candidate Testing\n checklist into Town Square in PRODUCTION \n\n\n(Ops) Moves meeting, test and community channels over to the production version of RC, and posts in Town Square asking everyone to move communication over to the new team for testing purposes\n\n\n(PM) Test feature areas and post bugs to Bugs/Issues in PRODUCTION \n\n\n(Ops) Runs through general testing checklist on RC1 and post bugs to Bugs/Issues in PRODUCTION \n\n\n\n\n\n\n(PM \n DEV) Add \n#p1\n tag to any \u201cBlocking\u201d issue that looks like a hotfix to the RC is needed, and create a public ticket in Jira. Blocking issues are considered to be security issues, data loss issues, issues that break core functionality, or significantly impact aesthetics. \n\n\n(PM) Updates the GitHub meta issue\n\n\n(PM) Posts links to all issues found in RC as comments on the meta issue\n\n\n(PM) Updates description to include approved fixes\n\n\n(PM) Posts screenshot and link to final tickets for next RC to the Release room\n\n\n(PM \n DEV leads) Triage hotfix candidates and decide on whether and when to cut next RC or final\n\n\n(Dev) PRs for hotfixes made to release branch, and changes from release branch are merged into master\n\n\n(Ops) Tests approved fixes on master\n\n\n(Dev) Pushes next RC to acceptance after testing is complete and approved fixes merged\n\n\n(Dev) pushes next RC to acceptance and announces in Town Square on PRODUCTION \n\n\n(PM) closes the meta issue after the next RC is cut, and opens another ticket for new RC\n\n\n(Ops) verifies each of the issues in meta ticket is fixed\n\n\n(PM) If no blocking issues are found, PM, Dev and Ops signs off on the release\n\n\n\n\n- (2 weekdays before release date) Release\n\n\n\n\n(Dev) Tags a new release (e.g. 1.1.0) and runs an official build which should be essentially identical to the last RC\n\n\n(PM) Any significant issues that were found and not fixed for the final release are noted in the release notes\n\n\nIf an urgent and important issue needs to be addressed between major releases, a hotfix release (e.g. 1.1.1) may be released, however this should be very rare, given a monthly cadence\n\n\n(PM) Copy and paste the Release Notes from the Changelog to the Release Description\n\n\n(PM) Update the mattermost.org/download page\n\n\n(Dev) Delete RCs after final version is shipped\n\n\n(PM) Close final GitHub RC meta ticket\n\n\n\n\n- (0 weekdays before release date) End of Release\n\n\n\n\n(PM) Makes sure marketing has been posted (animated GIFs, screenshots, mail announcement, Tweets, blog posts) \n\n\n(PM) Close the release in Jira\n\n\n(Dev) Check if any libraries need to be updated for the next release, and if so bring up in weekly team meeting\n\n\n(Ops) Post important dates for the next release in the header of the Release channel\n\n\n(Ops) Queue an agenda item for next team meeting for \"Stepping Back\" Q\nA\n\n\n(Ops) Queue an agenda item for next team meeting for Roadmap review", 
            "title": "Release process"
        }, 
        {
            "location": "/usage/Markdown/index.html", 
            "text": "Markdown Help\n\n\nMarkdown makes it easy to format messages. Type a message as you normally would, and use these rules to render it with special formatting. \n\n\nText Style:\n\n\nYou can use either \n_\n or \n*\n around a word to make it italic. Use two to make it bold.\n\n\n\n\n_italics_\n renders as \nitalics\n\n\n**bold**\n renders as \nbold\n\n\n**_bold-italic_**\n renders as \nbold-italics\n\n\n~~strikethrough~~\n renders as ~~strikethrough~~\n\n\n\n\nCode:\n\n\nCreate a code block by indenting four spaces, or by placing ``` on the line above and below your code. \n\n\nExample:\n\n\n```\ncode block\n```\n\n\n\nRenders as: \n\n\ncode block\n\n\n\n\nCreate in-line monospaced font by surrounding it with backticks. \n\n\n`monospace`\n\n\n\n\nRenders as: \nmonospace\n.\n\n\nLinks:\n\n\nCreate labeled links by putting the desired text in square brackets and the associated link in normal brackets. \n\n\n[Check out Mattermost!](www.mattermost.com)\n\n\nRenders as: \nCheck out Mattermost!\n\n\nIn-line Images\n\n\nCreate in-line images using an \n!\n followed by the alt text in square brackets and the link in normal brackets. Add hover text by placing it in quotes after the link.\n\n\n![alt text](link \nhover text\n)\n\nand\n\n[![Build Status](https://travis-ci.org/mattermost/platform.svg?branch=master)](https://travis-ci.org/mattermost/platform) [![Github](https://assets-cdn.github.com/favicon.ico)](https://github.com/mattermost/platform)\n\n\n\n\nRenders as: \n\n\n\n\nand\n\n\n \n\n\nEmojis\n\n\nCheck out a full list of emojis \nhere\n.\n\n\n:smile: :+1: :sheep:\n\n\n\n\nRenders as:\n:smile: :+1: :sheep:\n\n\nLines:\n\n\nCreate a line by using three \n*\n, \n_\n, or \n-\n.\n\n\n***\n renders as: \n\n\n\n\nBlock quotes:\n\n\nCreate block quotes using \n.\n\n\n block quotes\n renders as:\n\n\n\n\nblock quotes\n\n\n\n\nLists:\n\n\nCreate a list by using \n*\n or \n-\n as bullets. Indent a bullet point by adding two spaces in front of it.\n\n\n* list item one\n* list item two\n  * item two sub-point\n\n\n\n\nRenders as: \n\n list item one\n\n list item two\n  * item two sub-point\n\n\nMake it an ordered list by using numbers instead:\n\n\n1. Item one\n2. Item two\n\n\n\n\nRenders as: \n1. Item one\n2. Item two\n\n\nTables:\n\n\nCreate a table by placing a dashed line under the header row and separating the columns with a pipe \n|\n. (The columns don\u2019t need to line up exactly for it to work). Choose how to align table columns by including colons \n:\n within the header row.\n\n\n| Left-Aligned \u00a0| Center Aligned \u00a0| Right Aligned |\n| :------------ |:---------------:| -----:|\n| Left column 1 | this text \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| \u00a0$100 |\n| Left column 2 | is \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| \u00a0\u00a0$10 |\n| Left column 3 | centered \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| \u00a0\u00a0\u00a0$1 |\n\n\n\n\nRenders as:\n\n\n\n\n\n\n\n\nLeft-Aligned\n\n\nCenter Aligned\n\n\nRight Aligned\n\n\n\n\n\n\n\n\n\n\nLeft column 1\n\n\nthis text\n\n\n$100\n\n\n\n\n\n\nLeft column 2\n\n\nis\n\n\n$10\n\n\n\n\n\n\nLeft column 3\n\n\ncentered\n\n\n$1\n\n\n\n\n\n\n\n\nHeadings:\n\n\nMake a heading by typing # and a space before your title. For smaller headings, use more #\u2019s. \n\n\n# Large heading\n## Smaller heading\n### Even smaller heading\n\n\n\n\nRenders as: \n\n\nLarge Heading\n\n\nSmaller Heading\n\n\nEven smaller heading\n\n\nAlternatively, for the large heading you can underline the text using \n===\n. For the smaller heading you can underline using \n---\n\n\nLarge Heading\n=============\n\nSmaller Heading\n--------------\n\n\n\n\nRenders as:\nLarge Heading\n=============\n\n\nSmaller Heading", 
            "title": "Markdown"
        }, 
        {
            "location": "/usage/Markdown/index.html#markdown-help", 
            "text": "Markdown makes it easy to format messages. Type a message as you normally would, and use these rules to render it with special formatting.", 
            "title": "Markdown Help"
        }, 
        {
            "location": "/usage/Markdown/index.html#text-style", 
            "text": "You can use either  _  or  *  around a word to make it italic. Use two to make it bold.   _italics_  renders as  italics  **bold**  renders as  bold  **_bold-italic_**  renders as  bold-italics  ~~strikethrough~~  renders as ~~strikethrough~~", 
            "title": "Text Style:"
        }, 
        {
            "location": "/usage/Markdown/index.html#code", 
            "text": "Create a code block by indenting four spaces, or by placing ``` on the line above and below your code.   Example:  ```\ncode block\n```  Renders as:   code block  Create in-line monospaced font by surrounding it with backticks.   `monospace`  Renders as:  monospace .", 
            "title": "Code:"
        }, 
        {
            "location": "/usage/Markdown/index.html#links", 
            "text": "Create labeled links by putting the desired text in square brackets and the associated link in normal brackets.   [Check out Mattermost!](www.mattermost.com)  Renders as:  Check out Mattermost!", 
            "title": "Links:"
        }, 
        {
            "location": "/usage/Markdown/index.html#in-line-images", 
            "text": "Create in-line images using an  !  followed by the alt text in square brackets and the link in normal brackets. Add hover text by placing it in quotes after the link.  ![alt text](link  hover text )\n\nand\n\n[![Build Status](https://travis-ci.org/mattermost/platform.svg?branch=master)](https://travis-ci.org/mattermost/platform) [![Github](https://assets-cdn.github.com/favicon.ico)](https://github.com/mattermost/platform)  Renders as:    and", 
            "title": "In-line Images"
        }, 
        {
            "location": "/usage/Markdown/index.html#emojis", 
            "text": "Check out a full list of emojis  here .  :smile: :+1: :sheep:  Renders as:\n:smile: :+1: :sheep:", 
            "title": "Emojis"
        }, 
        {
            "location": "/usage/Markdown/index.html#lines", 
            "text": "Create a line by using three  * ,  _ , or  - .  ***  renders as:", 
            "title": "Lines:"
        }, 
        {
            "location": "/usage/Markdown/index.html#block-quotes", 
            "text": "Create block quotes using  .   block quotes  renders as:   block quotes", 
            "title": "Block quotes:"
        }, 
        {
            "location": "/usage/Markdown/index.html#lists", 
            "text": "Create a list by using  *  or  -  as bullets. Indent a bullet point by adding two spaces in front of it.  * list item one\n* list item two\n  * item two sub-point  Renders as:   list item one  list item two\n  * item two sub-point  Make it an ordered list by using numbers instead:  1. Item one\n2. Item two  Renders as: \n1. Item one\n2. Item two", 
            "title": "Lists:"
        }, 
        {
            "location": "/usage/Markdown/index.html#tables", 
            "text": "Create a table by placing a dashed line under the header row and separating the columns with a pipe  | . (The columns don\u2019t need to line up exactly for it to work). Choose how to align table columns by including colons  :  within the header row.  | Left-Aligned \u00a0| Center Aligned \u00a0| Right Aligned |\n| :------------ |:---------------:| -----:|\n| Left column 1 | this text \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| \u00a0$100 |\n| Left column 2 | is \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| \u00a0\u00a0$10 |\n| Left column 3 | centered \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| \u00a0\u00a0\u00a0$1 |  Renders as:     Left-Aligned  Center Aligned  Right Aligned      Left column 1  this text  $100    Left column 2  is  $10    Left column 3  centered  $1", 
            "title": "Tables:"
        }, 
        {
            "location": "/usage/Markdown/index.html#headings", 
            "text": "Make a heading by typing # and a space before your title. For smaller headings, use more #\u2019s.   # Large heading\n## Smaller heading\n### Even smaller heading  Renders as:", 
            "title": "Headings:"
        }, 
        {
            "location": "/usage/Markdown/index.html#large-heading", 
            "text": "", 
            "title": "Large Heading"
        }, 
        {
            "location": "/usage/Markdown/index.html#smaller-heading", 
            "text": "Even smaller heading  Alternatively, for the large heading you can underline the text using  === . For the smaller heading you can underline using  ---  Large Heading\n=============\n\nSmaller Heading\n--------------  Renders as:\nLarge Heading\n=============", 
            "title": "Smaller Heading"
        }, 
        {
            "location": "/usage/Markdown/index.html#smaller-heading_1", 
            "text": "", 
            "title": "Smaller Heading"
        }
    ]
}